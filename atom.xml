<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FXXS</title>
  
  <subtitle>FXXS</subtitle>
  <link href="http://fxxs.github.io/atom.xml" rel="self"/>
  
  <link href="http://fxxs.github.io/"/>
  <updated>2024-12-25T03:59:09.687Z</updated>
  <id>http://fxxs.github.io/</id>
  
  <author>
    <name>ted423</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>压制基础教程（FXXS出品）</title>
    <link href="http://fxxs.github.io/%E5%8E%8B%E5%88%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <id>http://fxxs.github.io/%E5%8E%8B%E5%88%B6%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</id>
    <published>2024-12-25T03:49:04.598Z</published>
    <updated>2024-12-25T03:59:09.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源、编码、透明度对比"><a href="#源、编码、透明度对比" class="headerlink" title="源、编码、透明度对比"></a>源、编码、透明度对比</h3><p><strong>源</strong>：源是指高质量可以用于进行压制编码的视频，一般包括蓝光圆盘、高质量的Web（一般4K的SDR）等。压片时应采用 <strong>最优质的源</strong> 进行压制，提高压制质量。</p><p>随着很多老片的BD推出，很多蓝光源是从低分辨率拉到高分辨率，被称为 Upscaled，在压制时应注意复原为原版的分辨率，不要压制过高的分辨率。关于WEB源应谨慎使用，尤其1080p的web-dl一般都为低质量不可以进行二次压制源，如非必要请勿压制，4k的SDR web源目前评价较好，往往好于1080p的BD来源，对于压制1080p的视频可以进行比较使用。</p><p><strong>！！！对于已经编码过的视频禁止二次编码！！！</strong> (通常而言，二次编码违反选择最优质源进行压制的原则。)</p><p><strong>编码</strong>：编码是指对于高质量来源进行压缩编码，进一步节约体积。编码过程种主要进行片源处理，修复源较为明显常见问题，通常包括脏边、色带、碎块、颜色偏差、伽马矫正等；切除黑边，去除源中16：9比例下的黑色边框；压制空间，主要将源采用更高的压缩方式进行重新编码，通常为有损方式。</p><p><strong>透明度对比</strong>：透明度是评价源于编码之间的相似程度的指标。良好的透明度是指在有经验的编码人员下都不能较为明显区分压制作品与源之间的差距。</p><p>根据I、P、B帧的功能，在编码过程中，编码器一般会尊重I帧内容，哪怕再劣质的压制，都不会对其进行明显的转换；而针对p帧，编码器可以转化为B帧进行编码节约空间，对于B帧进行重新编码。因此透明度应该从源与压制中P-&gt;B以及B-&gt;B的转换质量对比评判的压制质量。</p><p><strong>Bloating</strong>：称为臃肿，是指实现在相同透明度情况下，码率较高。根据压制较为广泛接受的规则，当压制作品太过接近源的码率也被认为Bloating，数值如下表：(x265建议更小的比例)</p><table><thead><tr><th align="center"></th><th>1080p</th><th>720p</th><th>576p</th><th>480p</th></tr></thead><tbody><tr><td align="center">原盘码率比例</td><td>75%</td><td>50%</td><td></td><td></td></tr></tbody></table><h3 id="x264-与-x265"><a href="#x264-与-x265" class="headerlink" title="x264 与 x265"></a>x264 与 x265</h3><p>在获取比 VapourSynth 更容易找到的 x264 和 x265 编码器前，你也可以选择使用它们的修改版。 最主流 x264 的修改版是 tmod 。值得注意的改进包括 <strong>淡化补偿(fade-compensate)</strong> ，在 <strong>宏块树(mbtree)</strong> 开启的情况下对淡入淡出进行编码，以及更多的 <strong>自适应量化(aq-mode)</strong> 选项。除非你不使用这些选项（但现在几乎没有人这么做），那么你可以直接使用 vanilla x264 代替。而如果你希望在转码时更加精确地控制，毫无疑问你应该尝试使用 tmod 并捆绑使用它提供的<code>aq-mode</code>，这样你就能够从中榨取出更高的质量，从而在保护噪点的同时不至于破坏线条。</p><p>最主流的 x265 修改版则是 yukki ，相比 x264 的修改版它却没有那么让人印象深刻。所有这一切都包括一些外观上的变化，比如更准确的预计完成时间。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>x264参数(1080p)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--crf * --preset placebo --profile high --level <span class="number">4.1</span> --no-fast-pskip --threads auto --deblock -<span class="number">3</span>,-<span class="number">3</span> --me umh --subme <span class="number">10</span> --vbv-bufsize <span class="number">78125</span> --vbv-maxrate <span class="number">62500</span> --colormatrix bt709 --colorprim bt709 --merange <span class="number">48</span> --rc-lookahead <span class="number">60</span> --aq-mode <span class="number">2</span> --no-mbtree  --no-dct-decimate --<span class="built_in">min</span>-keyint <span class="number">24</span>  --ipratio <span class="number">1.3</span> --pbratio <span class="number">1.2</span> --aq-strength <span class="number">0.8</span> --qcomp <span class="number">0.65</span> --psy-rd <span class="number">1.05</span>:<span class="number">0.00</span> --bframes <span class="number">16</span></span><br></pre></td></tr></table></figure><p>(crf可以用18)<br>ref说明</p><ul><li>480p ref&#x3D;16</li><li>576p ref&#x3D;14</li><li>720p ref&#x3D;9(-12)</li><li>1080p ref&#x3D;5</li></ul><p>ref开太高的话，ptp会提示 DXVA: Incompatible</p><p>请注意ref的计算，分辨率切黑边会导致 ref 可设置值下降，留空会自动计算</p><p>ref计算方法(机翻)：<br>对于 –level 4.1，根据 H.264 标准，最大 DPB（解码图片缓冲区）大小为 12,288 千字节。</p><p>由于每个帧都以 YV12 格式存储，即每像素 1.5 字节，因此 1920x1088 帧为</p><p>1920 × 1088 × 1.5 &#x3D; 3133440 字节 &#x3D; 3060 千字节。</p><p>12,288 ÷ 3060 千字节 &#x3D; 4.01568627，因此您最多可以使用 4 个参考帧。</p><p>请记住，在进行计算时，将两个维度向上舍入为 mod16 值，即使您没有对 mod16 进行编码！让我们对 1920x800 进行计算。<br>1920 × 800 × 1.5 &#x3D; 2304000 字节 &#x3D; 2250 千字节。12,288 ÷ 2250 千字节 &#x3D; 5.45777778，因此最多可 以使用 5 个参考帧。请注意，这些转换使用基数 2，<br>1 千字节 &#x3D;&#x3D; 1024 字节。如果计算错误，也没关系 - 如果使用太多，x264 将显示警告，你会知道是否需要更改它。</p><p>x265非HDR参数(仅供参考)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-D 10 --preset veryslower --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3  --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.6 --aq-mode 2 --aq-strength 1.0 --psy-rd 1.00 --psy-rdoq 1.00</span><br></pre></td></tr></table></figure><p>x265的HDR参数(仅供参考,HDR参数需要计算，不能直接使用)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-D <span class="number">10</span> --crf * --preset slower --level-idc <span class="number">5.1</span> --bframes <span class="number">8</span> --rd <span class="number">4</span> --me <span class="number">3</span> --subme <span class="number">7</span> --ref <span class="number">5</span> --merange <span class="number">57</span> --ipratio <span class="number">1.3</span> --pbratio <span class="number">1.2</span> --aq-mode <span class="number">2</span> --aq-strength <span class="number">1.00</span> --qcomp <span class="number">0.60</span> --psy-rd <span class="number">1.5</span> --psy-rdoq <span class="number">1.00</span> --ctu <span class="number">64</span> --rc-lookahead <span class="number">100</span> --deblock -<span class="number">3</span>:-<span class="number">3</span> --no-strong-intra-smoothing --cbqpoffs <span class="number">0</span> --crqpoffs <span class="number">0</span> --qg-size <span class="number">8</span> --<span class="built_in">range</span> limited --no-frame-dup --selective-sao <span class="number">0</span> --no-cutree --tu-intra-depth <span class="number">4</span> --no-<span class="built_in">open</span>-gop --tu-inter-depth <span class="number">4</span> --rskip <span class="number">0</span> --no-tskip --no-early-skip --<span class="built_in">min</span>-keyint=<span class="number">1</span> --no-rect --no-amp --vbv-bufsize <span class="number">160000</span> --vbv-maxrate <span class="number">160000</span> --no-sao --aud --repeat-headers --hrd --hdr-opt --colorprim bt2020 --colormatrix bt2020nc --transfer smpte2084 --chromaloc <span class="number">2</span> --pmode --master-display <span class="string">&quot;G(13250,34500)B(7500,3000)R(34000,16000)WP(15635,16450)L(40000000,50)&quot;</span> --<span class="built_in">max</span>-cll=<span class="number">577</span>,<span class="number">512</span></span><br></pre></td></tr></table></figure><p><strong>其中的HDR参数应根据源进行计算设置</strong></p><h2 id="压制环境构建"><a href="#压制环境构建" class="headerlink" title="压制环境构建"></a>压制环境构建</h2><p>全套软件打包(请联系相关人员获取)</p><p>便携版压制软件带集成环境</p><p><a href="https://github.com/ted423/Simple-x264-x265-Launcher-with-vapoursynth-protable">https://github.com/ted423/Simple-x264-x265-Launcher-with-vapoursynth-protable</a></p><p>VS集成环境(其他人维护，脚本可能不太全，ffms2等版本存在已知issue)</p><p><a href="https://github.com/theChaosCoder/vapoursynth-portable-FATPACK">https://github.com/theChaosCoder/vapoursynth-portable-FATPACK</a></p><h4 id="基础软件"><a href="#基础软件" class="headerlink" title="基础软件"></a>基础软件</h4><ul><li><strong><a href="https://mediaarea.net/en/MediaInfo/Download/Windows">Mediainfo</a></strong> &#x3D;:媒体信息检查软件，查看片源以及压制信息使用。</li><li><strong><a href="https://www.fosshub.com/MKVToolNix.html">MKVToolNix</a></strong>: mkv混流软件，也能实现以下基本的视频分割。</li><li><strong><a href="https://github.com/SubtitleEdit/subtitleedit/releases">SubtitleEdit</a></strong>: 字幕编辑软，可以实现ORC等功能。</li><li><strong><a href="http://rationalqm.us/dgdemux/dgdemux.html">DGDemux</a></strong>: Demux 软件，目前作为默认标准的Demux软件</li><li><strong><a href="https://www.videohelp.com/software/eac3to">eac3to</a></strong>: <strong><a href="https://github.com/ted423/FXXS-Encode-Guide/issues/14">存在已知Issue</a><strong>音轨转码编辑软件，也可实现Demux等功能。推荐使用</strong>eac3to with UsEac3to</strong>版本，并应包含一些对应的其他转换格式插件。</li><li><strong><a href="https://www.videohelp.com/software/BDInfo">BDinfo</a></strong>: 蓝光原盘信息检测分析软件。</li><li><strong><a href="https://www.videolan.org/index.zh.html">VLC</a></strong>: 能播放蓝光菜单，辅助确认音轨字幕章节信息</li></ul><p>其他请参考 <a href="/2.Tools/Collection">软件列表</a></p><p>基础部分软件直接使用或者安装即可。<br>AVS和VS为两种方向，推荐选VS</p><p>AVS相关教程Archive</p><h4 id="VapourSynth环境"><a href="#VapourSynth环境" class="headerlink" title="VapourSynth环境"></a>VapourSynth环境</h4><blockquote><p><a href="http://www.vapoursynth.com/doc/">官方文档</a></p></blockquote><p>VapourSynth是基于python编写新一代的视频处理工具，解决了许多AVS遗留的问题，显著提高了运行速度。</p><p>**<a href="https://www.python.org/">Python</a>**：安装VS之前必须装好Python环境，不同VS版本要求的Python版本不同，下载安装前请先看好所需要的Python版本。安装时候必须选择 <em>Add Python to PATH</em> !!</p><p>**<a href="http://www.vapoursynth.com/">VapourSynth</a>**：VapourSynth的主体安装程序，安装过程推荐安装所有推荐内容。除了安装位置外推荐使用默认设置。安装完后只包括主程序，以及官方的自带的插件，VS使用过程需要大量的插件以及脚本：主要分为 <strong>Script(.py)脚本</strong> 和 <strong>Plugins(.dll)插件</strong> 两个部分。安装插件脚本，需要将对应文件放入对应目录，目录在官方文档内有详细介绍。在Windows下官方提供了方便的下载管理。下文对于使用到部分将会介绍。</p><p>请注意脚本主要是 Python 环境，Python 版本兼容，通过 import 加载，而dll加载与VS本身，是需要考虑系统兼容，通过 core.XXX 加载，很多插件没有 Release Linux 版本，所以 Linux 环境可能会有部分插件需要自己想办法编译或者没法编译。</p><p><strong>口语环境里，很多人会把脚本也叫成插件，但自己注意区分，以免造成混淆</strong></p><p>VS 最新提供了制作便携版的脚本，但需要注意，升级会需要一些手动操作，如 python 的 vs 包无法卸载。如果是个人使用搭建，建议用安装包</p><p>VapourSynth 文档中列出了放置插件的路径。</p><p>Windows 的推荐路径<code>&lt;AppData&gt;\VapourSynth\plugins32</code> 或 <code>&lt;AppData&gt;\VapourSynth\plugins64</code>。Unix 用户可以创建一个配置文件来指定路径。</p><p>VapourSynth的Python脚本应该放在你的Python site-packages文件夹中。在 Arch Linux上，位于 <code>/usr/lib64/Python3.*/sitepackages/</code>。Windows 用户可以在本地AppData文件夹【译者注：即<code>C:\Users\&lt;用户名&gt;\AppData\Local</code>】中找到这个文件夹。</p><p><strong>需要注意的是 Python 自身也会有个 site-packages 文件夹，注意不要放错位置或者混放，可能会造成不知道加载了什么东西的问题</strong></p><p>**<a href="https://github.com/theChaosCoder/VSRepoGUI/releases">VSRepoGUI</a>**：官方提供了方便的下载管理插件以及脚本的GUI界面，下载解压后点开后即可使用，推荐放在VS的安装目录内。</p><p><img src="/img/VSRepoGUI.png" alt="image"></p><p>通过软件可以查看对应的VS安装信息和脚本插件的所在位置，同时可以实现对插件的脚本安装、更新和卸载，软件插件安装位置，再右上角可以快速点开。在Windows下推荐本软件进行维护插件和脚本。</p><p>VapourSynth 编辑器</p><ul><li>VapourSynth Editor <a href="https://github.com/YomikoR/VapourSynth-Editor/releases/tag/r19-mod-5.1">推荐用YomikoR的mod版本</a></li><li>Yuuno</li><li>VapourSynth Preview</li><li>AvsPmod(长期不更新)</li></ul><p><strong>VapourSynth Editor</strong>：VS Editor是目前较为广泛使用的VS编辑器(目前会使用Mod版本)。下载后，直接解压即可使用。第一次使用时候，需要配置VapourSynth文件的位置。VS plugins paths 可以是用VSRepoGUI中的路径进行查看。</p><p><img src="/img/VS%20Editor.png" alt="image"></p><p><strong>独立版本</strong></p><p><strong>Yuuno</strong> 是 Jupyter 记事本的一个扩展，允许你编辑和导出 VapourSynth 脚本。你可以通过以下代码来安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pip install yuuno</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yuuno jupyter install</span></span><br></pre></td></tr></table></figure><p>注意你需要安装 Jupyter 或 Jupyter Lab。</p><p><strong>VapourSynth Preview</strong> 需要一个单独的文本编辑器或 IDE 来编写脚本，这使得它对那些不喜欢 VSEdit 中内置编辑器的人来说非常有用。<br>AvsPmod是用于 AviSynth 的编辑器，但它也支持 VapourSynth。 </p><p>它们都有各自的优点和缺点，但对于新手来说，我更推荐 VSEdit 进行本地编辑，而希望在服务器上也能够写脚本的用户，更推荐 Yuuno。这是因为 Jupyter 只需要少量配置就可以远程使用。建议 Yuuno 用户试试使用 Jupyter Lab 替代 Jupyter。</p><p>此处举例两者最大的差别：</p><p>VSEdit</p><ul><li>不需要保持浏览器开启</li><li>内置基准和编码工具</li><li>通过CTRL + SHIFT + 方向键轻松浏览视频</li><li>更稳定</li><li>几乎无需二次开发</li><li>大多数PT用户在使用它，因此它可能更容易获得帮助与支持</li><li>VapourSynth 特有的语法高亮及输入建议</li><li>允许你存储片段和模板</li></ul><p>Yuuno</p><ul><li>非常易于远程使用</li><li>可以通过 iPython magic 轻松导出</li><li>更好的比较工具，通过使用<code>%%vspreview clipa --diff clipb</code> ⇒ 实现鼠标悬停即可预览更改效果</li><li>程序不太成熟，因此更可能发生崩溃</li><li>允许你在一个 Jupyter 编辑器中处理和导出多个脚本</li></ul><h4 id="压制工具"><a href="#压制工具" class="headerlink" title="压制工具"></a>压制工具</h4><p>使用压制工具大部分核心都是x264和x265(x265如无必要不在重复)。本人推荐压制软件功能越为简单越好，推荐2个使用，适合新手的**<a href="https://github.com/lordmulder/Simple-x264-Launcher">Simple x264&#x2F;x265 Launcher</a><strong>以及适合有经验的纯命令行（CLI）的</strong><a href="https://www.videohelp.com/software/x264-Encoder">x264.exe</a>和<a href="https://www.videohelp.com/software/x265-Encoder">x265.exe</a>**。Simple下载安装即可使用，本教程将以此为基础进行讲解。工具需要简单的设置，推荐log文件保存等设置，根据个人习惯修改。</p><p><img src="/img/Simple.png" alt="image-20200210024626480"></p><blockquote><p>大部分压制组要求，压制工具要求及时更新，使用最新版的压制工具。</p></blockquote><h2 id="压制步骤"><a href="#压制步骤" class="headerlink" title="压制步骤"></a>压制步骤</h2><h3 id="1-压制源分析"><a href="#1-压制源分析" class="headerlink" title="1.压制源分析"></a>1.压制源分析</h3><p>要想做一个较为高质量作品，应采用最好的来源进行压制。HDR电影来源较为单一，4k的原盘和Remux资源为主，版本较少能选择不多。SDR目前可用压制版本较多，各个发行商的在不同时期也发行过不同蓝光版本，随着web的兴起，AZ和NF也都发布了较高码率的4k的sdr版本，所以在SDR压制时，需要对于来源进行对比，选取最为高质量的来源进行压制。对于蓝光原盘与remux两者相同时候，推荐使用Remux的更为方便。</p><p>对于原盘使用 <strong>BDInfo</strong> 检查原盘信息，查看原盘主要视频对应播放列表。对于复杂原盘，可能出现多版本混合的情况，需要确定所需要版本对应的MPLS，并确定原盘的主要码率 。在压制前推荐进行分离提取(Demux)后再进行压制。</p><p><img src="/img/BDInfo.png" alt="image"></p><h3 id="2-分离提取-Demux-与音频转换"><a href="#2-分离提取-Demux-与音频转换" class="headerlink" title="2.分离提取(Demux)与音频转换"></a>2.分离提取(Demux)与音频转换</h3><p>见<a href="https://github.com/ted423/FXXS-Encode-Guide/blob/main/2.%20Tools/1.%20Demux%26Remux.md">Demux&amp;Remux</a>以及<a href="https://github.com/ted423/FXXS-Encode-Guide/tree/main/3.%20Audio">Audio</a></p><h3 id="3-输入脚本编写"><a href="#3-输入脚本编写" class="headerlink" title="3.输入脚本编写"></a>3.输入脚本编写</h3><p>压制前一般需要对片源就行处理，一般包括去除黑边、修复脏边脏线、去除片源的一些问题等，并且在压制时一般需要进行部分压制测试，也需使用脚本进行实现。本节将对介绍压制中的最基本脚本的编写，分为VS和AVS两个部分。编写脚本使用对应的编辑器较为方便。以及基础例子如下</p><h5 id="1-AVS例子"><a href="#1-AVS例子" class="headerlink" title="1).AVS例子"></a>1).AVS例子</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FFVideoSource(<span class="string">&quot;J:\BluryBD\After.the.Storm.2016.BluRay.Remux.1080p.AVC.TrueHD.5.1-HiFi.mkv&quot;</span>)</span><br><span class="line">Crop(<span class="number">0</span>, <span class="number">20</span>, -<span class="number">0</span>, -<span class="number">22</span>)</span><br><span class="line">FillBorder(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">bbmod(<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">21</span>)</span><br><span class="line">Z_Spline36Resize(<span class="number">1280</span>, <span class="number">692</span>,dither=<span class="string">&quot;error_diffusion&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-VS例子"><a href="#2-VS例子" class="headerlink" title="2).VS例子"></a>2).VS例子</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line"><span class="comment">#import kagefunc as kgf</span></span><br><span class="line"><span class="keyword">import</span> fvsfunc <span class="keyword">as</span> fvf</span><br><span class="line"><span class="keyword">import</span> havsfunc <span class="keyword">as</span> haf</span><br><span class="line"><span class="keyword">import</span> vsTAAmbk <span class="keyword">as</span> taa</span><br><span class="line"><span class="comment">#import mvsfunc as mvf</span></span><br><span class="line"><span class="comment">#import muvsfunc as muf</span></span><br><span class="line"><span class="comment">#import nnedi3_resample as nnrs</span></span><br><span class="line"><span class="comment">#import nnedi3_rpow2 as nnrp</span></span><br><span class="line"><span class="keyword">import</span> awsmfunc <span class="keyword">as</span> awf</span><br><span class="line"><span class="comment">#import vsscale</span></span><br><span class="line"><span class="keyword">import</span> vsutil</span><br><span class="line"><span class="comment">#导入相关函数(上面导入的很多范例脚本中没有使用，不过去交错那用到了haf),awsmfunc早期包没包含，故先注释掉</span></span><br><span class="line"><span class="comment">#core = vs.core 在R55 API4及之后版本使用，早期版本可以使用vs.get_core()</span></span><br><span class="line"><span class="comment">#core = vs.get_core()</span></span><br><span class="line">core = vs.core</span><br><span class="line"><span class="comment">#请依据自己内存调整(单位MB)</span></span><br><span class="line">core.max_cache_size = <span class="number">27384</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载片源输入即为16bit色深</span></span><br><span class="line">src = core.lsmas.LWLibavSource(source=<span class="string">r&quot;J:\BluryBD\After.the.Storm.2016.BluRay.Remux.1080p.AVC.TrueHD.5.1-HiFi.mkv&quot;</span>,<span class="built_in">format</span>=<span class="string">&quot;yuv420p16&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#另一种加载片源</span></span><br><span class="line"><span class="comment">#src = core.ffms2.Source(source=r&#x27;J:\BluryBD\After.the.Storm.2016.BluRay.Remux.1080p.AVC.TrueHD.5.1-HiFi.mkv&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通常来说，有些比较特殊的片源可能在ffms2或lsmas下会有不正常的表现或者报错，故有时候需要更换使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#处理前调整为16bit色深，可以降低运算带来的损失，lsmas不需要这个步骤</span></span><br><span class="line"><span class="comment">#src = fvf.Depth(src, 16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切边</span></span><br><span class="line">src=core.std.Crop(src, left=<span class="number">0</span>, right=<span class="number">0</span>, top=<span class="number">20</span>, bottom=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#脏边处理相关</span></span><br><span class="line"><span class="comment">#FillBorders基本是复制一条或几条线，作为填充，在任何情况下都不建议超过一条使用</span></span><br><span class="line"><span class="comment">#src = core.fb.FillBorders(src, 0, 1, 0, 0, mode=&quot;fillmargins&quot;)</span></span><br><span class="line"><span class="comment">#src = core.edgefixer.Continuity(src,left=4, right=4, top=0, bottom=0)</span></span><br><span class="line"><span class="comment">#src = awf.fb(src, top=1,bottom=1)</span></span><br><span class="line"><span class="comment">#如果边缘呈灰色，awf.fb 可以填充 luma&amp;chroma</span></span><br><span class="line"><span class="comment">#src = awf.bbmod(src,left=3, right=6, top=10, bottom=4, thresh=30, blur=20)</span></span><br><span class="line"><span class="comment">#对于边缘本身不是正常画面的，可以接一下bbmode，但请注意，严禁乱用，具体参数请看Pro mit 翻译的AHD压制指南(Others里)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#AutoDeblock(请在指导下使用)</span></span><br><span class="line"><span class="comment">#src = fvf.AutoDeblock(src)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将分辨率（压制为720p）</span></span><br><span class="line"><span class="comment">#src=core.resize.Spline36(src, 1280, 692)</span></span><br><span class="line"><span class="comment">#另一种缩小算法,gamma是HDR才需要开启</span></span><br><span class="line"><span class="comment">#src = muf.SSIM_downsample(src, 1280, 692, use_fmtc=False,gamma=True)</span></span><br><span class="line"><span class="comment">#src =vsscale.scale.ssim_downsample(src, width=None, height=720)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#去交错(正常不需要使用)</span></span><br><span class="line"><span class="comment">#src  = haf.QTGMC(src, Preset=&quot;slow&quot;, TFF=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#去锯齿</span></span><br><span class="line"><span class="comment">#src = taa.TAAmbk(src, aatype=-3, preaa=-1, strength=0, mtype=2, opencl=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转为10bit再输出，x265一般压制为10bit,x264为8bit</span></span><br><span class="line"><span class="comment">#之前得降bit函数</span></span><br><span class="line"><span class="comment">#src = fvf.Depth(src, 10)</span></span><br><span class="line"></span><br><span class="line">src = vsutil.depth(src, <span class="number">10</span>, dither_type=<span class="string">&#x27;error_diffusion&#x27;</span>)</span><br><span class="line">src.set_output()</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Tips：</p><p>1.修复脏边脏线以及去色带等属于进阶部分，将单独介绍</p></blockquote><p>VS由C++编写的核心库和允许创建视频脚本的Python模块组成,脚本部分作为Python模块实现，因此脚本完全使用Python语法</p><p>看这里以便于理解vpy写法以及含义</p><p>Python 文档<a href="https://docs.python.org/zh-cn/3.9/reference/index.html">https://docs.python.org/zh-cn/3.9/reference/index.html</a></p><p>VS文档<a href="http://www.vapoursynth.com/doc/pythonreference.html">http://www.vapoursynth.com/doc/pythonreference.html</a></p><p>其中最前面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import vapoursynth as vs</span><br><span class="line">import kagefunc as kgf</span><br><span class="line">import fvsfunc as fvf</span><br><span class="line">import havsfunc as haf</span><br><span class="line">import vsTAAmbk as taa</span><br><span class="line">import mvsfunc as mvf</span><br><span class="line">import muvsfunc as muf</span><br><span class="line">import nnedi3_resample as nnrs</span><br><span class="line">import nnedi3_rpow2 as nnrp</span><br><span class="line">#import awsmfunc as awf</span><br></pre></td></tr></table></figure><p>就是 python 的 <a href="https://docs.python.org/zh-cn/3.9/tutorial/modules.html">模块&#x2F;modules</a> 的 <a href="https://docs.python.org/zh-cn/3.9/reference/import.html">导入&#x2F;import</a></p><h4 id="1-片源载入"><a href="#1-片源载入" class="headerlink" title="(1).片源载入"></a>(1).片源载入</h4><p>载入片源需要使用对应的解码器，<strong>ffm2</strong>(ffmpeg)是目前脚本广泛使用的解码器，支持格式较为广发，其第一次载入时需要进行全片的检索。</p><h5 id="1-AVS语法"><a href="#1-AVS语法" class="headerlink" title="1).AVS语法"></a>1).AVS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FFVideoSource(<span class="built_in">str</span> filePath) <span class="comment">#指定文件的路径</span></span><br></pre></td></tr></table></figure><h5 id="2-VS语法"><a href="#2-VS语法" class="headerlink" title="2).VS语法"></a>2).VS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src = core.ffms2.Source(<span class="built_in">str</span> source) <span class="comment">#指定文件的路径</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips:</p><p>1.右键可以直接选择插入文件完整路径。</p><p>2.首次执行载入预览会卡死，需要等待一定时间。</p><ol start="3"><li></li></ol></blockquote><h4 id="2-切除边缘"><a href="#2-切除边缘" class="headerlink" title="(2).切除边缘"></a>(2).切除边缘</h4><h5 id="1-avs语法"><a href="#1-avs语法" class="headerlink" title="1).avs语法"></a>1).avs语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Crop(clip, <span class="built_in">int</span> left=<span class="number">0</span>,<span class="built_in">int</span> top=<span class="number">0</span>,<span class="built_in">int</span> -right=<span class="number">0</span>,<span class="built_in">int</span> -bottom=<span class="number">0</span>) <span class="comment">#切割必须为偶数，right与bottom为负数</span></span><br></pre></td></tr></table></figure><h5 id="2-VS语法-1"><a href="#2-VS语法-1" class="headerlink" title="2).VS语法"></a>2).VS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip=core.std.Crop(clip, <span class="built_in">int</span> left=<span class="number">0</span>, <span class="built_in">int</span> right=<span class="number">0</span>, <span class="built_in">int</span> top=<span class="number">0</span>, <span class="built_in">int</span> bottom=<span class="number">0</span>) <span class="comment">#切割必须为偶数</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips:</p><p>1.Crop切割方式只能以偶数方式切割，奇数切割属于进阶内容</p><p>2.切割奇数边需要使用下节介绍的resize方法</p></blockquote><h4 id="3-变换大小"><a href="#3-变换大小" class="headerlink" title="(3).变换大小"></a>(3).变换大小</h4><p>$$<br>w<br>$$</p><h5 id="1-AVS语法-1"><a href="#1-AVS语法-1" class="headerlink" title="1).AVS语法"></a>1).AVS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z_Spline36Resize(<span class="built_in">int</span> Width, <span class="built_in">int</span> height, <span class="built_in">int</span> src_left=?, <span class="built_in">int</span> src_top, <span class="built_in">int</span> src_width, <span class="built_in">int</span> src_height, <span class="built_in">str</span> dither) <span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="2-VS语法-2"><a href="#2-VS语法-2" class="headerlink" title="2).VS语法"></a>2).VS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip = core.resize.Spline36(clip clip, <span class="built_in">int</span> Width, <span class="built_in">int</span> height) <span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="4-抽取测试"><a href="#4-抽取测试" class="headerlink" title="(4).抽取测试"></a>(4).抽取测试</h4><p>压制前使用脚本一般间断抽取共约5k~10K帧进行参数测试，需要在脚本进行抽取。</p><h5 id="1-AVS语法-2"><a href="#1-AVS语法-2" class="headerlink" title="1).AVS语法"></a>1).AVS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectRangeEvery(<span class="built_in">int</span> every, <span class="built_in">int</span> length, <span class="built_in">int</span> offset) <span class="comment">#every为间隔，length为长度，offset为启示帧数</span></span><br></pre></td></tr></table></figure><h5 id="2-VS语法-3"><a href="#2-VS语法-3" class="headerlink" title="2).VS语法"></a>2).VS语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select=core.std.SelectEvery(clip[<span class="number">8000</span>:-<span class="number">8000</span>],cycle=<span class="number">4000</span>, offsets=<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">clip= core.std.AssumeFPS(select, fpsnum=clip.fps.numerator, fpsden=clip.fps.denominator)</span><br></pre></td></tr></table></figure><h3 id="4-压制测试"><a href="#4-压制测试" class="headerlink" title="4.压制测试"></a>4.压制测试</h3><p>在压制前应该进行参数测试，以便获取较高的压制质量，一般需要确定合理<strong>码率大小(crf)<strong>以及对于</strong>码率分配参数(ap-mode、ap-s、qcomp)<strong>以及</strong>psy</strong>等重要参数进行测试。使用抽取测试代码，大约抽取6k帧进行参数测试，送入<strong>Simple-x264</strong>进行测试。</p><h4 id="1-压制参数配置"><a href="#1-压制参数配置" class="headerlink" title="(1).压制参数配置"></a>(1).压制参数配置</h4><p>使用Simple进行压制，其设置如下所示。<strong>在设置界面记得开始log自动保存！！！</strong></p><p><img src="/(/img/simplex264.png" alt="image-20200220003824403"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--level <span class="number">4.1</span> --threads <span class="keyword">auto</span> --vbv-bufsize <span class="number">78125</span> --vbv-maxrate <span class="number">62500</span> --colormatrix bt709 --colorprim bt709 --no-mbtree --no-dct-decimate --min-keyint <span class="number">24</span> --me umh --merange <span class="number">48</span> --deblock=<span class="number">-3</span>,<span class="number">-3</span> --ipratio <span class="number">1.3</span> --pbratio <span class="number">1.2</span> --qcomp <span class="number">0.6</span> --aq-mode <span class="number">1</span> --aq-strength <span class="number">0.8</span> --psy-rd <span class="number">1.00</span>:<span class="number">0.00</span></span><br></pre></td></tr></table></figure><h4 id="2-CRF测试"><a href="#2-CRF测试" class="headerlink" title="(2).CRF测试"></a>(2).CRF测试</h4><p>CRF测试主要确定合适码率，根据压制目标，确定合理的码率。推荐测试起始CRF为17，根据范围码率以0.5步进进行CRF测试。</p><h5 id="合理码率评判方式"><a href="#合理码率评判方式" class="headerlink" title="合理码率评判方式"></a>合理码率评判方式</h5><h6 id="1-追求体积"><a href="#1-追求体积" class="headerlink" title="1.追求体积"></a>1.追求体积</h6><p>压制效果受码率影响很大，在追求体积时，很容易造成欠码的问题。所以要设置合理的码率范围，防止出现因为码率不足导致的质量问题。需要主要检查需要码率较高的场景，例如，复杂的场景和暗的场景。</p><p>主要辨别问题有：</p><ul><li>是否新产生了新的block</li><li>复杂的场景的细节是否丢失</li><li>是否压出明显的色带</li></ul><h6 id="2-保证与原盘相似透明度"><a href="#2-保证与原盘相似透明度" class="headerlink" title="2.保证与原盘相似透明度"></a>2.保证与原盘相似透明度</h6><p>前景无损失，背景没有明显损失</p><h4 id="3-其他参数"><a href="#3-其他参数" class="headerlink" title="(3).其他参数"></a>(3).其他参数</h4><blockquote><p>本部分十分建议进行，但是对于一些压制组不是强制要求。可以编写脚本进行批量测试</p></blockquote><p>确定合理的码率后，切换2-pass方式使用预计码率，采用单一变量方式进行参数测试，每次测试只改变一个参数，每个参数推荐测试范围如下：</p><table><thead><tr><th align="center">参数</th><th align="center">真人类型</th><th align="center">步进</th></tr></thead><tbody><tr><td align="center">qcomp</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="4-最终CRF测试"><a href="#4-最终CRF测试" class="headerlink" title="(4).最终CRF测试"></a>(4).最终CRF测试</h4><p>在新参数下，进行最终使用的crf测试。</p><h4 id="5-压制对比脚本编写"><a href="#5-压制对比脚本编写" class="headerlink" title="(5).压制对比脚本编写"></a>(5).压制对比脚本编写</h4><h5 id="1-avs语法-1"><a href="#1-avs语法-1" class="headerlink" title="1).avs语法"></a>1).avs语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入压制使用的脚本文件，并添加帧信息与名字</span></span><br><span class="line">a=<span class="keyword">import</span>(<span class="string">&quot;C:\Path\To\source.avs&quot;</span>).subtitle(<span class="string">&quot;Source&quot;</span>, align=<span class="number">9</span>).ffinfo(framenum=true,frametype=true,cfrtime=false,vfrtime=false,version=false,cropping=false,colorrange=false,colorspace=false,sar=false) </span><br><span class="line"><span class="comment"># 导入压制后的对比的视频文件</span></span><br><span class="line">b=ffvideosource(<span class="string">&quot;C:\Path\To\b.mkv&quot;</span>).subtitle(<span class="string">&quot;b&quot;</span>, align=<span class="number">9</span>).ffinfo(framenum=true,frametype=true,cfrtime=false,vfrtime=false,version=false,cropping=false,colorrange=false,colorspace=false,sar=false)</span><br><span class="line"><span class="comment"># 其他的压制文件</span></span><br><span class="line">c=ffvideosource(<span class="string">&quot;C:\Path\To\c.mkv&quot;</span>).subtitle(<span class="string">&quot;c&quot;</span>, align=<span class="number">9</span>).ffinfo(framenum=true,frametype=true,cfrtime=false,vfrtime=false,version=false,cropping=false,colorrange=false,colorspace=false,sar=false)</span><br><span class="line"><span class="comment"># 交错视频文件</span></span><br><span class="line">interleave(a,b)</span><br></pre></td></tr></table></figure><h5 id="2-VS语法-4"><a href="#2-VS语法-4" class="headerlink" title="2).VS语法"></a>2).VS语法</h5><p><strong>下面的代码大部分已经不能在最新的VS里使用，仅作参考，请使用 awf 以及 Scrips 里的 snap</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line">core = vs.get_core()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成帧信息，并打入标签</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FrameInfo</span>(<span class="params">clip, title,</span></span><br><span class="line"><span class="params">              style=<span class="string">&quot;sans-serif,20,&amp;H00FFFFFF,&amp;H000000FF,&amp;H00000000,&amp;H00000000,0,0,0,0,100,100,0,0,1,2,0,7,10,10,10,1&quot;</span></span>):</span><br><span class="line">    <span class="keyword">import</span> functools</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">FrameProps</span>(<span class="params">n, clip</span>):</span><br><span class="line">        clip = core.sub.Subtitle(clip, <span class="string">&quot;Frame &quot;</span> + <span class="built_in">str</span>(n) + <span class="string">&quot; of &quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">            clip.num_frames) + <span class="string">&quot;\nPicture type: &quot;</span> + clip.get_frame(n).props._PictType.decode(), style=style)</span><br><span class="line">        <span class="keyword">return</span> clip</span><br><span class="line"></span><br><span class="line">    clip = core.std.FrameEval(clip, functools.partial(FrameProps, clip=clip))</span><br><span class="line">    clip = core.sub.Subtitle(clip, [<span class="string">&#x27;\n \n \n&#x27;</span> + title], style=style)</span><br><span class="line">    <span class="keyword">return</span> clip</span><br><span class="line"></span><br><span class="line"><span class="comment"># VS editor输出显示bug，对于压制后的文件需要进行，进行处理。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outfix</span>(<span class="params">clip</span>):</span><br><span class="line">encode = core.std.SetFrameProp(clip,prop=<span class="string">&quot;_Matrix&quot;</span>,delete=<span class="literal">True</span>)</span><br><span class="line">encode = core.std.SetFrameProp(encode,prop=<span class="string">&quot;_Transfer&quot;</span>,delete=<span class="literal">True</span>)</span><br><span class="line">encode = core.std.SetFrameProp(encode,prop=<span class="string">&quot;_Primaries&quot;</span>,delete=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------用于压制脚本的滤镜部分（例子）----------------#</span></span><br><span class="line"><span class="comment">#复制自己脚本出了导入，和输出部分内容</span></span><br><span class="line">video = core.ffms2.Source(source=<span class="string">r&#x27;/Users/hujingyu/Encode/Paris.Texas.1984.1080p.BluRay.Remux.AVC.DTS-HD.MA.5.1-PmP.mkv&#x27;</span>)</span><br><span class="line">video=core.std.Crop(video,<span class="number">64</span>,<span class="number">64</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">select=core.std.SelectEvery(video[<span class="number">8000</span>:-<span class="number">8000</span>],cycle=<span class="number">4000</span>, offsets=<span class="built_in">range</span>(<span class="number">80</span>))</span><br><span class="line">video= core.std.AssumeFPS(select, fpsnum=video.fps.numerator, fpsden=video.fps.denominator)</span><br><span class="line"><span class="comment">#-------------用于压制脚本的滤镜部分----------------#</span></span><br><span class="line">video=FrameInfo(video,<span class="string">&quot;source&quot;</span>)<span class="comment"># 标记信息</span></span><br><span class="line"><span class="comment">#-------------encode文件-------------------------#</span></span><br><span class="line">encode=core.ffms2.Source(source=<span class="string">r&quot;/whalehu/Encode/encode.mkv&quot;</span>) <span class="comment"># 载入视频</span></span><br><span class="line">encode=FrameInfo(encode,<span class="string">&quot;encode&quot;</span>) <span class="comment"># 标记信息</span></span><br><span class="line">encode=outfix(encode)<span class="comment"># 输入修复</span></span><br><span class="line"></span><br><span class="line">out = core.std.Interleave([video,encode]) <span class="comment"># 交叉帧</span></span><br><span class="line">out.set_output()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-正式压制"><a href="#5-正式压制" class="headerlink" title="5.正式压制"></a>5.正式压制</h3><p>将压制脚本中的测试抽帧代码注释掉，进行正式压制。</p><blockquote><p>清晰度越高需要的时间越长，推荐使用较低的分辨率入门</p></blockquote><h3 id="6-封装"><a href="#6-封装" class="headerlink" title="6.封装"></a>6.封装</h3><p>封装是将所有素材合成一个mkv的视频文件，封装是一个很简单的工作，没有技术难点，但是封装的好坏会对压制作品评价很为重要，封装主要是认真。这里主要介绍被广泛接受的封装细节，不同压制组对这个有具体的细节要求。</p><p>一般封装主要注意以及下内容：</p><ul><li><p>视频、音轨和字幕是否匹配</p></li><li><p>音轨和字幕是否设置了正确的语言标签</p></li><li><p>需要标准命名的音轨是否正确</p></li><li><p>章节信息和标题是否添加并正确命名</p></li><li><p>正确命名文件标题</p></li></ul><blockquote><p>文件标题并不是文件名！！！一般主要为IMDB的英文标题并可以添加小组信息</p><p>原盘若没有章节信息，推荐5-10min间隔生成章节点</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;源、编码、透明度对比&quot;&gt;&lt;a href=&quot;#源、编码、透明度对比&quot; class=&quot;headerlink&quot; title=&quot;源、编码、透明度对比&quot;&gt;&lt;/a&gt;源、编码、透明度对比&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;源&lt;/strong&gt;：源是指高质量可以用于进行压制编码的视频</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件列表</title>
    <link href="http://fxxs.github.io/2.Tools/Collection/"/>
    <id>http://fxxs.github.io/2.Tools/Collection/</id>
    <published>2024-12-25T03:19:11.931Z</published>
    <updated>2024-12-25T03:18:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>A collection of Encode tools and scripts.</p><h1 id="Codec"><a href="#Codec" class="headerlink" title="Codec"></a>Codec</h1><table><thead><tr><th>Name</th><th>Description</th><th>Document</th></tr></thead><tbody><tr><td><a href="https://code.videolan.org/videolan/x264">x264</a></td><td>x264 codec</td><td></td></tr><tr><td><a href="https://github.com/jpsdr/x264">x264-tMod</a></td><td>x264 t_mod codec(默认使用)</td><td></td></tr><tr><td><a href="https://bitbucket.org/multicoreware/x265_git/src">x265</a></td><td>x265 codec</td><td><a href="https://x265.readthedocs.io/">Doc</a></td></tr><tr><td><a href="https://github.com/msg7086/x265-Yuuki-Asuna">x265-Yuuki</a></td><td>x265-Yuuki codec</td><td></td></tr><tr><td><a href="https://github.com/AOMediaCodec/SVT-AV1">SVT-AV1</a></td><td>AV1 codec</td><td><a href="https://github.com/AOMediaCodec/SVT-AV1/tree/master/Docs">Doc</a></td></tr><tr><td><a href="https://aomedia.googlesource.com/aom/">AOM-AV1</a></td><td>AV1 codec</td><td></td></tr><tr><td><a href="https://github.com/fraunhoferhhi/vvenc">vvenc</a></td><td>VVC codec</td><td></td></tr><tr><td><a href="https://ffmpeg.org//">ffmpeg</a></td><td>Web Only, Contain SVT-AV1(not the newest code)<br> <a href="https://github.com/BtbN/FFmpeg-Builds">Win builds by BtbN</a></td><td><a href="https://ffmpeg.org/ffmpeg.html">Doc</a></td></tr><tr><td><a href="https://github.com/nu774/qaac">qaac</a></td><td>是基于 Apple 编码器的命令行 AAC&#x2F;ALAC 编码器前端。开源</td><td><a href="https://github.com/nu774/qaac/wiki">Wiki</a></td></tr><tr><td><a href="https://xiph.org/flac/">flac</a></td><td>很多现有的编码器会调用libFLAC.dll，但项目长期不放出libFLAC.dll的编译版本，需要自己找别人的编译版本</td><td><a href="https://xiph.org/flac/documentation.html">Doc</a></td></tr><tr><td><a href="https://opus-codec.org/">opus</a></td><td>2019年发布最后一版 1.3.1</td><td><a href="https://opus-codec.org/docs/">Doc</a></td></tr><tr><td><a href="https://www.videohelp.com/software/eac3to">eac3to with UsEac3to GUI</a></td><td><a href="https://forum.doom9.org/showthread.php?t=145574">UsEac3to GUI</a> 作者:tebasuna51 <del><a href="https://forum.doom9.org/showthread.php?t=125966">eac3to</a> 作者:madshi (老版本)</del> <a href="https://www.rationalqm.us/eac3to/">https://www.rationalqm.us/eac3to/</a> 新版本</td><td><a href="http://en.wikibooks.org/wiki/Eac3to">Wiki</a></td></tr></tbody></table><h1 id="VS-etc"><a href="#VS-etc" class="headerlink" title="VS etc"></a>VS etc</h1><table><thead><tr><th>Name</th><th>Description</th><th>Document</th><th>etc</th></tr></thead><tbody><tr><td><a href="https://www.vapoursynth.com/">VS Official Web</a> \ <a href="https://github.com/vapoursynth/vapoursynth">VS Github</a></td><td>VS</td><td><a href="http://www.vapoursynth.com/doc/index.html">Doc</a></td><td></td></tr><tr><td><a href="https://github.com/YomikoR/VapourSynth-Editor">VapourSynth Editor Modified by YomikoR</a></td><td>原版长期未更新，并且存在一些不足,故只放mod版</td><td></td><td></td></tr><tr><td><a href="https://bitbucket.org/gundamftw/vapoursynth-editor-2">VapourSynth Editor 2</a></td><td>Untest</td><td></td><td></td></tr><tr><td><a href="https://github.com/AmusementClub/vapoursynth-classic">vapoursynth-classic</a></td><td>Untest，旨在维护旧版API的一个版本</td><td></td><td></td></tr><tr><td><a href="https://github.com/AmusementClub/tools">tool-pack</a></td><td>Untest，类似Mediatool的一个项目，不过我一直好奇里面打包了GPL的东西能不能这么发布</td><td></td><td></td></tr></tbody></table><h1 id="Other-Tool"><a href="#Other-Tool" class="headerlink" title="Other Tool"></a>Other Tool</h1><table><thead><tr><th>Name</th><th>Description</th><th>Document</th><th>etc</th></tr></thead><tbody><tr><td><a href="https://github.com/vcb-s/OKEGui">OKEGui</a></td><td>Untest，平时习惯先封装一个，然后通过样板json批量生成再用mkvmerge命令行批量封装</td><td></td><td></td></tr><tr><td><a href="https://github.com/YohoYang/VSGUI">VSGUI</a></td><td>Untest，类似于MEGUI的VS版本</td><td></td><td></td></tr></tbody></table><h1 id="Subtitle"><a href="#Subtitle" class="headerlink" title="Subtitle"></a>Subtitle</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/SubtitleEdit/subtitleedit">subtitleedit</a></td><td>支持ass转srt</td></tr><tr><td><a href="https://github.com/Ristellise/AegisubDC">AegisubDC</a></td><td>unmaintained</td></tr><tr><td><a href="https://github.com/wangqr/Aegisub">Aegisub(wangqr)</a></td><td>Aegisub 在 ass 方面会比较专业</td></tr><tr><td><a href="https://github.com/quietvoid/subtitle_tonemap">subtitle_tonemap</a></td><td>adjust brightness to PGS subtitle</td></tr><tr><td><a href="https://github.com/tp7/Sushi">sushi</a></td><td>automatic shifter based audio stream</td></tr><tr><td><a href="https://github.com/kaegi/alass">alass</a></td><td>automatic shifter based subtitle&#x2F;audio</td></tr><tr><td><a href="https://github.com/dyphire/subtitle-convert">subtitle-convert</a></td><td>fix subtitle encoding (to UTF-8)</td></tr><tr><td><a href="https://github.com/yuppity/ttml2srt">ttml2srt</a></td><td>convert ttml to srt</td></tr><tr><td><a href="https://github.com/arcusmaximus/YTSubConverter">YTSubConverter</a></td><td>convert ytt to ass(or reverse)</td></tr><tr><td><a href="https://github.com/computer045/vtt2ass">vtt2ass</a></td><td>convert vtt to ass</td></tr><tr><td><a href="https://github.com/civodulab/srt2ass">srt2ass</a></td><td>convert srt to ass</td></tr><tr><td><a href="https://github.com/arition/SubRenamer">Subrenamer</a></td><td>Rename subtitles for BDRip</td></tr><tr><td><a href="https://github.com/qwqcode/SubRenamer">SubRenamer</a></td><td>番剧字幕文件自动化一键批量重命名（改名）工具</td></tr></tbody></table><h1 id="Dolby"><a href="#Dolby" class="headerlink" title="Dolby"></a>Dolby</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/domyd/mlp">mlp</a></td><td>Dovi TrueHD demuxer</td></tr><tr><td><a href="https://github.com/pcroland/deew">deew</a></td><td>DDP maker</td></tr><tr><td><a href="https://github.com/rixtox/mp4dovi">mp4dovi</a></td><td>Dovi in mp4 files</td></tr></tbody></table><h1 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/N3xusHD/EasyCompare">EasyCompare</a></td><td>compare snapshot</td></tr></tbody></table><h1 id="Chapter"><a href="#Chapter" class="headerlink" title="Chapter"></a>Chapter</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/tautcony/ChapterTool">ChapterTool</a></td><td>chapter create tool</td></tr><tr><td><a href="https://github.com/fireattack/chapter_converter">chapter_converter</a></td><td>convert chapter file formats</td></tr></tbody></table><h1 id="Player"><a href="#Player" class="headerlink" title="Player"></a>Player</h1><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/dyphire/mpv-config/releases">mpv-config</a></td><td>mpv pack</td></tr><tr><td><a href="https://www.microsoft.com/zh-cn/p/hevc-video-extensions-from-device-manufacturer/9n4wgh0z6vhq">Hevc Video Extensions From Device Manufacturer</a></td><td>hevc extension for Windows</td></tr><tr><td><a href="https://www.microsoft.com/zh-cn/p/app/9pltg1lwphlf">Dolby Vision Extensions</a></td><td>dovi extension for Windows</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A collection of Encode tools and scripts.&lt;/p&gt;
&lt;h1 id=&quot;Codec&quot;&gt;&lt;a href=&quot;#Codec&quot; class=&quot;headerlink&quot; title=&quot;Codec&quot;&gt;&lt;/a&gt;Codec&lt;/h1&gt;&lt;table&gt;
&lt;the</summary>
      
    
    
    
    <category term="2.Tools" scheme="http://fxxs.github.io/categories/2-Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Irrational Encoding Wizardry 插件</title>
    <link href="http://fxxs.github.io/3.Code/Irrational%20Encoding%20Wizardry/"/>
    <id>http://fxxs.github.io/3.Code/Irrational%20Encoding%20Wizardry/</id>
    <published>2024-12-22T12:08:51.969Z</published>
    <updated>2024-12-22T12:15:31.445Z</updated>
    
    <content type="html"><![CDATA[<p>他们的插件经常会跟进最新的 VS 版本。</p><p>建议找他们仓库提供的 Discord 连接进群查询插件语法及用法</p><h1 id="vs-deband"><a href="#vs-deband" class="headerlink" title="vs-deband"></a>vs-deband</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> vsdeband <span class="keyword">import</span> F3kdb</span><br><span class="line"><span class="keyword">from</span> vsmasktools <span class="keyword">import</span> dre_edgemask</span><br><span class="line"><span class="keyword">from</span> vstools <span class="keyword">import</span> core, vs</span><br><span class="line"></span><br><span class="line">deband = F3kdb.deband(clip)</span><br><span class="line">mask = dre_edgemask(clip)<span class="comment">#.std.Binarize().std.Maximum()  # please make sure you properly define the Binarize threshold, or better yet use the threshold param dre_edgemask iirc has</span></span><br><span class="line">debanded = core.std.MaskedMerge(deband, clip, mask)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;他们的插件经常会跟进最新的 VS 版本。&lt;/p&gt;
&lt;p&gt;建议找他们仓库提供的 Discord 连接进群查询插件语法及用法&lt;/p&gt;
&lt;h1 id=&quot;vs-deband&quot;&gt;&lt;a href=&quot;#vs-deband&quot; class=&quot;headerlink&quot; title=&quot;vs-deb</summary>
      
    
    
    
    <category term="3.Code" scheme="http://fxxs.github.io/categories/3-Code/"/>
    
    
    <category term="Document" scheme="http://fxxs.github.io/tags/Document/"/>
    
    <category term="VS(Plugin/Scripts)" scheme="http://fxxs.github.io/tags/VS-Plugin-Scripts/"/>
    
  </entry>
  
  <entry>
    <title>README FXXS压制教程 FXXS Encode Guide</title>
    <link href="http://fxxs.github.io/README/"/>
    <id>http://fxxs.github.io/README/</id>
    <published>2024-12-22T11:47:33.209Z</published>
    <updated>2024-12-25T02:14:16.736Z</updated>
    
    <content type="html"><![CDATA[<p>本教程还在建设中，并且存在不准确，瞎写等问题。</p><p>在此提醒一下，学习应该不盲从权威，有足够的自学与判断能力。</p><p>公开教程寄望于能降低压制学习门槛，促进沟通交流。</p><p>讨论群组:<a href="https://t.me/+V3PD9djMoUr4v38n">https://t.me/+V3PD9djMoUr4v38n</a></p><p>不受限加入，我们非常欢迎新鲜血液的加入，非组内成员也可参与询问及讨论。不会强制征召。</p><p>希望入组的童鞋，在有成品后请联系我。</p><hr><p>Scrips里的脚本使用环境是Win,没有经过太多的测试</p><p><code>python 脚本 输入目录</code> 这样，里面的文本要自己根据需要修改内容再跑</p><p>mkv 的 json封装，要确保输入端的mkv是规则的，否则可能会因为轨道id不对导致封错内容</p><hr><h1 id="软件官方文档"><a href="#软件官方文档" class="headerlink" title="软件官方文档"></a>软件官方文档</h1><h2 id="Python-文档"><a href="#Python-文档" class="headerlink" title="Python 文档"></a>Python 文档</h2><p><a href="https://docs.python.org/zh-cn/3.9/reference/index.html">https://docs.python.org/zh-cn/3.9/reference/index.html</a></p><p>用于理解vpy写法以及含义</p><h2 id="VS文档"><a href="#VS文档" class="headerlink" title="VS文档"></a>VS文档</h2><p><a href="http://www.vapoursynth.com/doc/pythonreference.html">http://www.vapoursynth.com/doc/pythonreference.html</a></p><h2 id="x265文档"><a href="#x265文档" class="headerlink" title="x265文档"></a>x265文档</h2><p><a href="https://x265.readthedocs.io/en/latest/cli.html">https://x265.readthedocs.io/en/latest/cli.html</a></p><hr><h1 id="一些可供参考的其他教程"><a href="#一些可供参考的其他教程" class="headerlink" title="一些可供参考的其他教程"></a>一些可供参考的其他教程</h1><h2 id="VCB-S"><a href="#VCB-S" class="headerlink" title="VCB-S"></a>VCB-S</h2><p>建议有了第一步压制作品，会写VS脚本之后再看</p><p><a href="https://guides.vcb-s.com/">https://guides.vcb-s.com</a></p><h2 id="AHD-英文"><a href="#AHD-英文" class="headerlink" title="AHD(英文)"></a>AHD(英文)</h2><p><a href="https://silentaperture.gitlab.io/mdbook-guide/introduction.html">https://silentaperture.gitlab.io/mdbook-guide/introduction.html</a></p><h2 id="Irrational-Encoding-Wizardry-Jaded-Encoding-Thaumaturgy"><a href="#Irrational-Encoding-Wizardry-Jaded-Encoding-Thaumaturgy" class="headerlink" title="Irrational Encoding Wizardry &#x2F; Jaded-Encoding-Thaumaturgy"></a>Irrational Encoding Wizardry &#x2F; Jaded-Encoding-Thaumaturgy</h2><p>名字其实我也没太搞懂</p><p><a href="https://guide.encode.moe/index.html">https://guide.encode.moe/index.html</a></p><p><a href="https://jaded-encoding-thaumaturgy.github.io/JET-guide/master/">https://jaded-encoding-thaumaturgy.github.io/JET-guide/master/</a></p><p>他们还有Discord(英文) discord.gg&#x2F;qxTxVJGtst</p><p>他们的插件文档位于 Github repo 的 docs 下，但基本没啥用</p><p>具体使用目测要去Discord里面搜</p><h2 id="iAvoe"><a href="#iAvoe" class="headerlink" title="iAvoe"></a>iAvoe</h2><p>这个的教程跟我们的有一些出入，可能跟侧重点有关，建议在压过一些片，有一定的基础之后再看</p><p><del><a href="https://github.com/iAvoe/x264-x265-QAAC-ffprobe-Ultimatetutorial">https://github.com/iAvoe/x264-x265-QAAC-ffprobe-Ultimatetutorial</a></del></p><h2 id="Encode-Mystery"><a href="#Encode-Mystery" class="headerlink" title="Encode Mystery"></a>Encode Mystery</h2><p><a href="https://guide.geeking.moe/">https://guide.geeking.moe</a></p><h1 id="其他组的脚本"><a href="#其他组的脚本" class="headerlink" title="其他组的脚本"></a>其他组的脚本</h1><h2 id="国外-int-组"><a href="#国外-int-组" class="headerlink" title="国外 int 组"></a>国外 int 组</h2><p><a href="https://git.concertos.live/OpusGang/EncodeScripts">https://git.concertos.live/OpusGang/EncodeScripts</a></p><h2 id="Beatrice-Raws"><a href="#Beatrice-Raws" class="headerlink" title="Beatrice-Raws"></a>Beatrice-Raws</h2><p><a href="https://github.com/Beatrice-Raws/encode-scripts">https://github.com/Beatrice-Raws/encode-scripts</a></p><h1 id="大佬们的-Github"><a href="#大佬们的-Github" class="headerlink" title="大佬们的 Github"></a>大佬们的 Github</h1><p><a href="https://github.com/OpusGang">https://github.com/OpusGang</a></p><p><a href="https://github.com/quietvoid">https://github.com/quietvoid</a></p><p><a href="https://github.com/Irrational-Encoding-Wizardry">https://github.com/Irrational-Encoding-Wizardry</a></p><p><a href="https://github.com/Jaded-Encoding-Thaumaturgy">https://github.com/Jaded-Encoding-Thaumaturgy</a></p><p><a href="https://github.com/vcb-s">https://github.com/vcb-s</a></p><p><a href="https://github.com/AmusementClub">https://github.com/AmusementClub</a></p><p><a href="https://github.com/Beatrice-Raws">https://github.com/Beatrice-Raws</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本教程还在建设中，并且存在不准确，瞎写等问题。&lt;/p&gt;
&lt;p&gt;在此提醒一下，学习应该不盲从权威，有足够的自学与判断能力。&lt;/p&gt;
&lt;p&gt;公开教程寄望于能降低压制学习门槛，促进沟通交流。&lt;/p&gt;
&lt;p&gt;讨论群组:&lt;a href=&quot;https://t.me/+V3PD9djMo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>x265参数解析</title>
    <link href="http://fxxs.github.io/2.Tools/x265%E5%8F%82%E6%95%B0/"/>
    <id>http://fxxs.github.io/2.Tools/x265%E5%8F%82%E6%95%B0/</id>
    <published>2024-12-08T14:45:04.532Z</published>
    <updated>2024-12-25T01:23:52.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://tieba.baidu.com/p/6627144750">https://tieba.baidu.com/p/6627144750</a></p></li><li><p><a href="https://x265.readthedocs.io/en/3.1/cli.html">https://x265.readthedocs.io/en/3.1/cli.html</a></p></li><li><p><a href="https://guides.vcb-s.com/basic-guide-07#4-x265-%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90">https://guides.vcb-s.com/basic-guide-07#4-x265-参数解析</a></p></li><li><p><a href="https://silentaperture.gitlab.io/mdbook-guide/encoding/x265.html">https://silentaperture.gitlab.io/mdbook-guide/encoding/x265.html</a></p></li></ul><p><strong>请注意，不能确保完全正确</strong></p><h2 id="crf-qp"><a href="#crf-qp" class="headerlink" title="crf,qp"></a>crf,qp</h2><p><strong>qp</strong> 电脑认为的恒定画质(但一般不进行设置)</p><p><strong>crf</strong> 人眼认为的恒定画质，但是运动时候画质会降低来节省码率</p><p>数值越低画质越好。</p><p>一般低于等于18可以认为和原画差不多(主观观点)</p><h2 id="ctu"><a href="#ctu" class="headerlink" title="ctu &lt;64|32|16&gt;"></a>ctu &lt;64|32|16&gt;</h2><p>分块大小，64速度最慢，32其次</p><p>设成32 对于复杂场景压缩压缩率最高，64 对于简单场景压缩压缩率最高</p><p>推荐用32因为速度比64快10%，并且画质更好一些</p><p>16适合DVD，32适合1080p,64适合4K,720p用16,x265可能就会直接退出</p><h2 id="rd-1-6"><a href="#rd-1-6" class="headerlink" title="rd (1-6)"></a>rd (1-6)</h2><p>分析的复杂度，数值越大画质越高，压出来体积越大，5,6非常慢, 默认3.</p><h2 id="early-skip"><a href="#early-skip" class="headerlink" title="early-skip"></a>early-skip</h2><p>–early-skip, –no-early-skip</p><p>默认开，开了提高压缩速度，关了提高精度，体积小幅度增加</p><h2 id="rdoq-level"><a href="#rdoq-level" class="headerlink" title="rdoq-level"></a>rdoq-level</h2><p>RDOP [rate-distortion optimized quantization] (率失真优化量化)</p><p>默认0,关闭，预设slow时候默认开启。(preset placebo 似乎也还是2)</p><p>x265最重要的参数，没有之一，开了能有助于保存细节，当然会有更大文件体积。关闭可以提高压缩速度，看起来会轻度模糊。开启掉速度30%以上，推荐舍弃其他参数，也要开启这个。</p><p>设成 1 时候 看起来效果最好，但是体积会大30%以上</p><p>设成 2 时候 效果略差，体积只会小幅度增加，推荐使用2</p><h2 id="psy-rd-psy-rdoq"><a href="#psy-rd-psy-rdoq" class="headerlink" title="psy-rd &amp; psy-rdoq"></a>psy-rd &amp; psy-rdoq</h2><p>都是Psycho-visual options的参数</p><p>具体见<a href="https://x265.readthedocs.io/en/latest/cli.html#psycho-visual-options">https://x265.readthedocs.io/en/latest/cli.html#psycho-visual-options</a></p><p>这两者都会影响码率(经测试，开高psy-rdoq到5所增加的码率通过crf来给画面反而效果更好)</p><p>psy-rd 默认 2.0 有些高，<del>建议开到1.5</del>，开高反而降低画质(不过这种仅适用高还原度压制，如果希望节省码率，这个可能要再试试) 目前看来 VCB 似乎建议开高，国外是推荐真人电影(x264)开到1左右，不过4k 可能需要开到2</p><p>psy-rdoq 一直用1一般就好，开高了保留噪点，画面本身却会变差</p><p>一些测试见Compare</p><h2 id="tu-intra-depth-tu-inter-depth"><a href="#tu-intra-depth-tu-inter-depth" class="headerlink" title="tu-intra-depth &lt;1..4&gt; tu-inter-depth &lt;1..4&gt;"></a>tu-intra-depth &lt;1..4&gt; tu-inter-depth &lt;1..4&gt;</h2><p>默认1，开高会小幅增加压缩率，但是特别慢 (preset placebo 似乎就是4)</p><h2 id="max-tu-size"><a href="#max-tu-size" class="headerlink" title="max-tu-size &lt;32|16|8|4&gt;"></a>max-tu-size &lt;32|16|8|4&gt;</h2><p>默认32，开低会降低压缩率，并且不会提速，推荐默认</p><h2 id="max-merge"><a href="#max-merge" class="headerlink" title="max-merge &lt;1..5&gt;"></a>max-merge &lt;1..5&gt;</h2><p>开高小幅度提高压缩率，对速度影响不明显，默认2 (preset placebo 似乎就是5)</p><h2 id="me-merange"><a href="#me-merange" class="headerlink" title="me ,merange"></a>me ,merange</h2><p>me 搜索方式，默认hex ，用umh 或star 能小幅度提高压缩率，但是掉速20%</p><p>merange 搜索范围，默认57，me设成hex时候，对速度影响不大，但是使用umh或star时候，开高掉速严重</p><p>umh比star好</p><ol><li><p>dia</p></li><li><p>hex (default)</p></li><li><p>umh</p></li><li><p>star</p></li><li><p>sea</p></li><li><p>full</p></li></ol><h2 id="subme"><a href="#subme" class="headerlink" title="subme"></a>subme</h2><p>默认2</p><p>开高小幅提高压缩率，开低提高压缩速度，5比3慢10%</p><p>推荐3</p><h2 id="keyint"><a href="#keyint" class="headerlink" title="keyint"></a>keyint</h2><p>最大IDR间隔</p><p>关键帧相关，这个将会影响到点击跳转，开高能提升压缩率(但个人不建议随便动他，720对于一般的24p意味着30秒的时间，60p你可以稍微开高点？)</p><p>默认250</p><h2 id="min-keyint"><a href="#min-keyint" class="headerlink" title="min-keyint"></a>min-keyint</h2><p>最小分组帧数，默认23，推荐改成个位数，提高gop准确度。</p><p>小幅度提高压缩率，对压缩速度没影响</p><p>min-keyint&#x3D;1 的情况对于一些高速切换的场景会因此要强制1秒内一个IDR帧，造成P或者B等参考帧使用效率降低(换场景了参考的意义已经不大了)。</p><p>还有就是这样可以避免一些老旧的设备出现硬解的bug。 - by fch1993</p><h2 id="pmode-no-pmode-4-1-deprecated"><a href="#pmode-no-pmode-4-1-deprecated" class="headerlink" title="pmode &amp; no-pmode (4.1 deprecated)"></a>pmode &amp; no-pmode (4.1 deprecated)</h2><p>并行决策模式</p><p>官方推荐是CPU不饱和才开，编码器将跨多个工作线程分配每个 CU 的分析工作。</p><h2 id="rc-lookahead"><a href="#rc-lookahead" class="headerlink" title="rc-lookahead"></a>rc-lookahead</h2><p>预览帧数，默认20</p><p>开高可以提高分组(gop)准确度，小幅度提高压缩率，同时小幅度降速，推荐40</p><p>crf模式时，rc-lookahead可以提高cutree的准确度（提高画质)</p><h2 id="bframes"><a href="#bframes" class="headerlink" title="bframes"></a>bframes</h2><p>最大b帧数量</p><p>开高小幅度提高压缩率，默认4，开到8，掉速10%</p><p>bframes 开高了会小幅降低画质</p><h2 id="cutree"><a href="#cutree" class="headerlink" title="cutree"></a>cutree</h2><p>–no-cutree since this seems to be a poor implementation of mbtree.</p><p><del>目前测试是静态场景表现不错，具体可以看<a href="https://ted423.github.io/Document/Encode/cutree/">https://ted423.github.io/Document/Encode/cutree/</a></del> 不建议开，码率分配存在非常大的问题(有一处分配了31M的码率结果效果还不如一半码率的x264)</p><p>doom9 上2020年有人说”在快速移动的场景中，我一直在努力解决丑陋的扭曲（用条带涂抹看起来有点像运动模糊的东西），最后发现 x265 的 CUTree 是罪魁祸首。</p><p>关闭它可以解决它，但是当试图在其他场景中保持相同的整体质量时，比特率会爆炸。</p><p>有什么方法可以使 CUTree ‘不那么激进’ 或将其设置为 50% 或某些阈值参数吗？”</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>参照帧数量，默认3</p><p>开高小幅度提高压缩率，同时小幅度降速，</p><p>3和4速度差不多，推荐4</p><p>VCB:不过实测 ref 增加在 x265 中作用不明显。建议不超过 6</p><h2 id="sao-默认开启"><a href="#sao-默认开启" class="headerlink" title="sao 默认开启"></a>sao 默认开启</h2><p>–sao, –no-sao</p><p>设计目的是去振铃(光环现象)，但是细节丰富地方会去掉太多细节，</p><p>推荐关闭。</p><h2 id="strong-intra-smoothing"><a href="#strong-intra-smoothing" class="headerlink" title="strong-intra-smoothing"></a>strong-intra-smoothing</h2><p>推荐在追求还原度的压制的时候关闭，严重欠码压制时开启(部分情况下，aq2 或者降低 aqs 更为优先)</p><p>对关键帧进行平滑处理，看起来挺吓人的，实际上效果不明显，推荐用<code>--no-strong-intra-smoothing</code>关闭，保留细节(来源贴吧 连接1 的帖内说明)</p><p><a href="http://forum.doom9.net/showthread.php?p=1873696">http://forum.doom9.net/showthread.php?p=1873696</a></p><p>相关讨论，与贴吧给出的结论不同</p><p>个人测试是开的话画面细节丢失，影响蛮大 <del>可能适合低码压制</del></p><p>目前测试是在低码压制上会降低块效应(不知道这么说对不对，aqs psy-rdoq开高会导致块变得严重。特别是4K，44Mbps仍然有些欠码，因此4K欠码压制的情况下，这种现象会非常严重，见 <a href="https://slow.pics/c/uvnpqHrU">https://slow.pics/c/uvnpqHrU</a> 不过这个对比图没有块现象严重的对比，只是用于说明所需码率，因为一个没注意顺手删了)</p><h2 id="lookahead-slices"><a href="#lookahead-slices" class="headerlink" title="lookahead-slices"></a>lookahead-slices</h2><p>设成0有助于提高画质，开高有利于lookahead的并行度，</p><p>推荐设成0，对压缩速度无影响</p><h2 id="deblock-去色块"><a href="#deblock-去色块" class="headerlink" title="deblock 去色块"></a>deblock 去色块</h2><p>要调低 默认太高， 推荐最高调到-1,-1以下，调高了会模糊</p><h2 id="qcomp"><a href="#qcomp" class="headerlink" title="qcomp"></a>qcomp</h2><p>运动时候画质 crf开启时候有效</p><p>开高提高运动时候画质，开低减少文件体积</p><p>推荐0.6-0.7</p><h2 id="frame-threads"><a href="#frame-threads" class="headerlink" title="frame-threads"></a>frame-threads</h2><p>帧线程数量，开高提高cpu利用率，开低有利于小幅度提高压缩率</p><p>如果cpu能够满载可以考虑调到2，如果不能满载考虑使用默认值</p><p>(默认会自动调整)</p><h2 id="aq-strength-默认1-0"><a href="#aq-strength-默认1-0" class="headerlink" title="aq-strength 默认1.0"></a>aq-strength 默认1.0</h2><p>低于1.0首先保留边缘，高于1.0优先保留纹理，这个值也要看aq-mode，噪点多的片可以调低这个值，噪点少的片调高这个值</p><p>不了解不要乱调这个</p><p>VCB:aq-strength 决定了 aq 的强度，一般来说，Anime 的 aq-strength 不用太高（太高了码率也会浪费）。通常，aq-mode&#x3D;1，aq-strength 给 0.8 比较合理；aq-mode&#x3D;2，aq-strength 给 0.9 左右，aq-mode&#x3D;3，aq-strength 给 0.7 左右。</p><h2 id="aq-mode"><a href="#aq-mode" class="headerlink" title="aq-mode"></a>aq-mode</h2><p>目前测试在不足码率压制的情况下,aq1可能会导致画面出现一些奇怪的现象，aq2相对画面更好一些，并且不会出现奇妙的画面(不过测试还不够充分)。</p><p>在给够码率的情况下(噪点比较重的片)，aq1似乎会好些(可以看战火高码版对比图，不过暂时还没放到公网)</p><p>2 x265默认（推荐）</p><p>3 暗处增强，避免暗处被压坏，实际上亮的地方码率也会增加30%以上，所以很 浪费码率(不过就压制而言，通常是差不多码率进行比较，因此浪费码率可以通过调高crf解决)</p><p>aq-mode 4 :优先保留边缘，噪点很多时候用</p><p>VCB:x265 目前有三种 aq 模式。aq-mode 1 是最安全稳定的 aq，适合高码率&#x2F;高画质编码；aq-mode<br>2 相对来说效率最高，适合中低码率的编码；aq-mode 3 对暗场进行加强，适合 8bit 编码防止暗场压烂。一般 10bit编码根据 crf 高低决定 aq 选取，个人建议在 crf &lt;&#x3D; 16 时候使用 aq-mode 1，否则使用 aq-mode 2。注意同 crf下，不同 aq-mode 出来的体积是不一样的，3&gt;1&gt;2。</p><p>补充说明，个人在压制黑白噪点片时，aq2产生了比aq1还大的体积，目测在大颗粒噪点的情况下，aq2会比aq1产生更高的码率</p><h2 id="rskip"><a href="#rskip" class="headerlink" title="rskip &lt;0|1|2&gt;"></a>rskip &lt;0|1|2&gt;</h2><p>开启提高速度，关闭提高画质，0是关闭，默认1</p><p>模式1比0 wmaf 下降0.03左右</p><p>模式2比模式1压缩速度要快30%-50%左右，但是压缩率要低</p><p>对于平滑画面（噪点比较少）画质优于rskip&#x3D;1，但是噪点比较多画面 画质不如rskip&#x3D;1</p><p>rskip&#x3D;2 和ctu&#x3D;64配合不好，同时开启画质压缩率都会下降</p><p><del>推荐rskip&#x3D;2 和ctu&#x3D;32配合</del>(我们一般不开)</p><h2 id="rect"><a href="#rect" class="headerlink" title="rect"></a>rect</h2><p>–rect, –no-rect</p><p>开了小幅度增加压缩率（0%-5%左右 )和画质，有长方形区域时候才有效，否则是空跑，开了掉速30%以上</p><p>推荐关闭增加压缩速度。</p><p>VCB:通常来说，&lt;&#x3D;1080p 下，rect 基本上没什么作用，amp 是几乎完全没作用，但是这俩都是速度黑洞。因此从效率角度建议关闭，或者至少关闭 amp</p><p>个人测试中，1080p开了之后，码率低了一点，画面差了一点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://tieba.baidu.com/p/6627144750&quot;&gt;https:</summary>
      
    
    
    
    <category term="2.Tools" scheme="http://fxxs.github.io/categories/2-Tools/"/>
    
    
    <category term="Doc" scheme="http://fxxs.github.io/tags/Doc/"/>
    
  </entry>
  
  <entry>
    <title>Demux &amp; Remux 操作</title>
    <link href="http://fxxs.github.io/2.Tools/Demux&amp;Remux/"/>
    <id>http://fxxs.github.io/2.Tools/Demux&amp;Remux/</id>
    <published>2024-12-02T02:51:17.055Z</published>
    <updated>2024-12-04T06:52:30.977Z</updated>
    
    <content type="html"><![CDATA[<p>通常建议在 Demux &amp; Remux 之前进行扫盘，mkvtoolnix 以及 dgdemux 都可以进行。</p><p>主要判断信息有</p><ul><li>是否是肉酱盘</li><li>是否默认的 mpls 是正确的影片（有些盘会坑人）</li><li>mpls 是否包含了无效的mt2s(这种会导致操作失败)，这种情况，需要 dgdemux,然后勾选 “skip first&#x2F;last M2TS”</li></ul><p>部分剧集原盘 dgdemux 需要开启 “strict playlist times” mkvtoolnix 可以自动处理，useac3to 等其他软件会产生包含长时间黑屏的文件出来。(m2ts本身包含，mlps中做了切割处理)</p><p>Demux作为音轨处理的前置步骤(部分原盘只有DGDemux能正常处理)，目前获取的信息是再TrueHD方面 MakeMKV &gt;&#x3D; 1.15.4 &#x3D; mlp &gt; DGDemux (具体见 mlp 的 Readme)。</p><p>或许考虑使用<a href="https://github.com/domyd/mlp">mlp</a>来专门处理肉酱TrueHD盘</p><p>一些肉酱盘 mkvtoolnix,eac3to,会有 glitching 的问题见<a href="https://github.com/ted423/FXXS-Encode-Guide/issues/14">issue</a>(并不确认eac3to最新版是否解决了问题)。</p><p>一些 mpls 会作为 m2ts 的 index,m2ts 本身前后会包含一些 garbage，见<a href="https://github.com/justdan96/tsMuxer/issues/624">issue</a>,目前 DGDemux 可以通过勾选 ‘strict playlist’ 来正确处理。</p><p>mkvtoolnix也会进行处理，但音轨出现了一些问题。</p><h1 id="DVD"><a href="#DVD" class="headerlink" title="DVD"></a>DVD</h1><p>对于DVD，你可能需要使用MakeMKV，目前的其他软件对DVD都支持不太好，例如mkvtoolnix认不到章节以及字幕轨</p><h1 id="常见的Demux软件有"><a href="#常见的Demux软件有" class="headerlink" title="常见的Demux软件有"></a>常见的Demux软件有</h1><ul><li>UsEac3to&#x2F;eac3to</li><li>DGDemux(现在作为默认的标准软件)</li><li>tsMuxer</li><li>FFmpeg</li><li>gMKVExtractGUI&#x2F;mkvextract</li></ul><p>其中UsEac3to功能非常多，内含了转码功能，但其长期未更新，在部分音轨上可能出现问题。</p><p><strong>其中eac3to可以检测到坏帧并进行输出，故可以用来判断原盘是否有问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[v02] Extracting video track number 2...</span><br><span class="line">[v02] Creating file &quot;D:\Rip\00001.mpls_2eng.h264&quot;...</span><br><span class="line">[v02] [0:07:57] The source file seems to be damaged (sync byte missing).  &lt;WARNING&gt;</span><br><span class="line">[v02] [0:07:57] The source file seems to be damaged (discontinuity).  &lt;WARNING&gt;</span><br><span class="line">[v02] [0:20:58] The source file seems to be damaged (sync byte missing).  &lt;WARNING&gt;</span><br><span class="line">[v02] [0:20:58] The source file seems to be damaged (discontinuity).  &lt;WARNING&gt;</span><br><span class="line">[v02] [1:34:37] The source file seems to be damaged (sync byte missing).  &lt;WARNING&gt;</span><br><span class="line">[v02] [1:34:37] The source file seems to be damaged (discontinuity).  &lt;WARNING&gt;</span><br><span class="line">[v02] Video has a gap of 355 frames at playtime 0:07:57.  &lt;WARNING&gt;</span><br><span class="line">[v02] Video has a gap of 383 frames at playtime 0:20:57.  &lt;WARNING&gt;</span><br><span class="line">[v02] Video has a gap of 42 frames at playtime 1:34:35.  &lt;WARNING&gt;</span><br><span class="line">[v02] Video has a gap of 255 frames at playtime 1:34:35.  &lt;WARNING&gt;</span><br><span class="line">Video track 2 contains 141636 frames.</span><br><span class="line">eac3to processing took 1 minute, 17 seconds.</span><br><span class="line">Done.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前3者支持BD&#x2F;mpls的demux(你可以选用现成的Remux来避免原盘带来的各种问题),不过DGDemux支持原盘，tsMuxer的mkv很多轨道都不认<br>后3者开源免费多平台(有Linux版本)</p><p>DGDemux有Linux版本，不过没有GUI</p><p>tsMuxer拆出的turehd是包含ac3核心的，FFmpeg不认(不能拿来制作DDP)</p><h1 id="选择正确的mpls"><a href="#选择正确的mpls" class="headerlink" title="选择正确的mpls"></a>选择正确的mpls</h1><p>不像二次元原盘可能一个m2ts就一集，乱七八糟的原盘mpls可能发生各种情况。建议关注下以及观察加载 m2ts 的规律。</p><p>一般可以看获取原盘处的BDinfo。</p><p>还有个比较便捷的办法,就是stream里看最大的m2ts，记住名字，然后通过文本编辑器打开mpls看这个m2ts出现在哪。(不过在有DGDemux的情况下，直接在里面看就好了)</p><h1 id="mkvextract"><a href="#mkvextract" class="headerlink" title="mkvextract"></a>mkvextract</h1><p>一般建议用GUI,除非你用Linux<br><a href="https://mkvtoolnix.download/doc/mkvextract.html">https://mkvtoolnix.download/doc/mkvextract.html</a></p><p>Examples</p><p><code>mkvextract inpu.mkv tracks 1:audio.thd</code><br>(需要自己确定轨道ID以及后缀)</p><p>Extracting both chapters and tags in their respective XML formats at the same time:</p><p><code>mkvextract movie.mkv chapters movie-chapters.xml tags movie-tags.xml</code></p><p>Extracting a couple of tracks and their respective timestamps at the same time:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvextract &quot;Another Movie.mkv&quot; tracks 0:video.h265 &quot;1:main audio.aac&quot; &quot;2:director&#x27;s comments.aac&quot; timestamps_v2 &quot;0:timestamps video.txt&quot; &quot;1:timestamps main audio.txt&quot; &quot;2:timestamps director&#x27;s comments.txt&quot;</span><br></pre></td></tr></table></figure><p>Extracting chapters in the Ogg&#x2F;OGM format and re-encoding a text subtitle track to another character set:</p><p><code>mkvextract &quot;My Movie.mkv&quot; chapters --simple &quot;My Chapters.txt&quot; tracks -c MS-ANSI &quot;2:My Subtitles.srt&quot;</code></p><p>关于字幕的一些范例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkvextract -v sample.mkv tracks 2:chs.sup 3:cht.sup</span><br><span class="line">Extracting track 2 with the CodecID &#x27;S_HDMV/PGS&#x27; to the file &#x27;chs.sup&#x27;. Container format: SUP</span><br><span class="line">Extracting track 3 with the CodecID &#x27;S_HDMV/PGS&#x27; to the file &#x27;cht.sup&#x27;. Container format: SUP</span><br></pre></td></tr></table></figure><h1 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h1><p>如无必要，不建议使用，需要自己判断音轨深度，默认是拆16bit</p><h2 id="ffprobe"><a href="#ffprobe" class="headerlink" title="ffprobe"></a>ffprobe</h2><p><code>ffprobe &#39;文件&#39;</code> 用于检测文件信息(不过直接看mediainfo就好，而且纯文本输出没有各种GUI看起来那么直观,不过可以用来确认下音轨轨道)</p><p>ffprobe 无法区分音轨是否带Atmos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Stream #0:1(eng): Audio: dts (DTS-HD MA), 48000 Hz, 5.1(side), s32p (24 bit) (default)</span><br><span class="line">    Metadata:</span><br><span class="line">      title           : DTS-HD MA 5.1</span><br><span class="line">      BPS-eng         : 4133090</span><br><span class="line">      DURATION-eng    : 02:58:09.472000000</span><br><span class="line">      NUMBER_OF_FRAMES-eng: 1002138</span><br><span class="line">      NUMBER_OF_BYTES-eng: 5522569140</span><br><span class="line">      _STATISTICS_WRITING_APP-eng: mkvmerge v29.0.0 (&#x27;Like It Or Not&#x27;) 64-bit</span><br><span class="line">      _STATISTICS_WRITING_DATE_UTC-eng: 2018-12-23 15:53:25</span><br><span class="line">      _STATISTICS_TAGS-eng: BPS DURATION NUMBER_OF_FRAMES NUMBER_OF_BYTES</span><br></pre></td></tr></table></figure><p>如这个就是音轨轨道-&gt;0:1</p><h2 id="拆音轨为单轨道"><a href="#拆音轨为单轨道" class="headerlink" title="拆音轨为单轨道"></a><del>拆音轨为单轨道</del></h2><p>(废弃，Dolby Media Producer Suite需要，不过已经用不到了)</p><p>音轨轨道顺序可以在这里确认<a href="https://trac.ffmpeg.org/wiki/AudioChannelManipulation">https://trac.ffmpeg.org/wiki/AudioChannelManipulation</a></p><p>ffmpeg -i input.wav -filter_complex “channelsplit&#x3D;channel_layout&#x3D;5.1[FL][FR][FC][LFE][BL][BR]” -map “[FL]” -c:a -map “[FR]” R.wav -map “[FC]” C.wav -map “[LFE]” LFE.wav -map “[BL]” Ls.wav -map “[BR]” Rs.wav</p><p>24bit</p><p>ffmpeg -i input.wav -filter_complex “channelsplit&#x3D;channel_layout&#x3D;5.1[FL][FR][FC][LFE][BL][BR]” -map “[FL]” -c:a pcm_s24le L.wav -map “[FR]” -c:a pcm_s24le R.wav -map “[FC]” -c:a pcm_s24le C.wav -map “[LFE]” -c:a pcm_s24le LFE.wav -map “[BL]” -c:a pcm_s24le Ls.wav -map “[BR]” -c:a pcm_s24le Rs.wav</p><h2 id="Encode-flac"><a href="#Encode-flac" class="headerlink" title="Encode flac"></a>Encode flac</h2><p>范例</p><p><code>ffmpeg -c:a flac -compression_level 8 1.flac -i 1.dts</code></p><p><code>ffmpeg -map 0:1  -c:a flac -compression_level 8 a.flac -i 1.mkv </code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通常建议在 Demux &amp;amp; Remux 之前进行扫盘，mkvtoolnix 以及 dgdemux 都可以进行。&lt;/p&gt;
&lt;p&gt;主要判断信息有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否是肉酱盘&lt;/li&gt;
&lt;li&gt;是否默认的 mpls 是正确的影片（有些盘会坑人）&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="2.Tools" scheme="http://fxxs.github.io/categories/2-Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>Advanced HD Video Encoding Guide</title>
    <link href="http://fxxs.github.io/6.etc/%E8%BF%9B%E9%98%B6%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E5%8E%8B%E5%88%B6%E6%8C%87%E5%8D%97/"/>
    <id>http://fxxs.github.io/6.etc/%E8%BF%9B%E9%98%B6%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E5%8E%8B%E5%88%B6%E6%8C%87%E5%8D%97/</id>
    <published>2024-12-01T15:15:35.740Z</published>
    <updated>2024-12-25T03:48:14.157Z</updated>
    
    <content type="html"><![CDATA[<p>说明：并非所有内容都是正确的，部分内容仍待完善。</p><p>最新的原文地址在<a href="https://silentaperture.gitlab.io/mdbook-guide/introduction.html">https://silentaperture.gitlab.io/mdbook-guide/introduction.html</a></p><p>【译者注：本文为《Advanced HD Video Encoding Guide》老版本的翻译，限制于译者压制与翻译水平均有限，翻译可能产生偏差甚至误导，在此表示歉意。如遇不明之处还请<a href="https://github.com/FXXS-Encoder/FXXS-Encode-Guide/blob/main/Others/encode_guide_English.pdf">查看原文</a>。同时有些内容随着时间变迁用法有些不同，请读者遇到相关问题时查阅相关内容。】<br>【译者再注：由于所有图片所在图床一起随时间而逝，所有附图均由PDF中提取再经由Photoshop拼接，过程中可能造成些许损失，但应该不影响区分。】</p><h2 id="3-视频编码"><a href="#3-视频编码" class="headerlink" title="3 视频编码"></a>3 视频编码</h2><h3 id="3-1-你的第一个脚本"><a href="#3-1-你的第一个脚本" class="headerlink" title="3.1 你的第一个脚本"></a>3.1 你的第一个脚本</h3><p>一个标准并没有额外滤镜的超级基础的 VapourSynth 脚本应该与此类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你使用的是yuuno而不是VSEdit，请取消下一行的注释：</span></span><br><span class="line"><span class="comment">#%load_ext yuuno # 这将告诉Jupyter加载yuuno。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个代码块是针对VSEdit #</span></span><br><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line">core = vs.core</span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line">src = core.ffms2.Source(<span class="string">&quot;/path/to/source.mkv&quot;</span>) <span class="comment"># 对于Windows路径, 使用 r&quot;C:\path\to\source.mkv&quot;.</span></span><br><span class="line">out = core.std.Crop(src, top=<span class="number">138</span>, bottom=<span class="number">138</span>) <span class="comment"># 切除黑边是必要操作</span></span><br><span class="line">out.set_output() <span class="comment"># 标记为vspipe输出使用的变量</span></span><br></pre></td></tr></table></figure><h4 id="3-1-1-缩放-Resizing"><a href="#3-1-1-缩放-Resizing" class="headerlink" title="3.1.1 缩放(Resizing)"></a>3.1.1 缩放(Resizing)</h4><p>首先请注意，后面会有一个单独的部分来介绍 <strong>降低分辨率(Descaling)</strong> 。而在这，我将解释调整大小的方法以及哪种调整器分别适合什么情况。<br>如果你想调整大小，重要的是不要超过必要的长宽比的改变。如果你要缩小尺寸，首先要搞明白宽度和高度应该是多少。如果你想缩小分辨率到720p，首先要裁剪，然后弄清楚你是缩放至720高还是1280宽。如果是前者，你的宽度应该是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">width = <span class="built_in">round</span>(<span class="number">720</span> * src.height / (<span class="number">2</span> * src.width)) * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>对于后者，你会发现高度的代码与其非常相似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">height = <span class="built_in">round</span>(<span class="number">1280</span> * src.width / (<span class="number">2</span> * src.height)) * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>你也可以使用 awsmfunc 中封装的 <code>cropresize</code> 函数来处理这些计算并调整大小。</p><p>现在有多种调整工具可选，其中最主要的有：</p><ul><li><code>Point</code> 临近点，也被称为临近采样(nearest neighbor resizing)，是最简单的缩放方式，因为除了放大每个像素或缩小时获取周围每个像素的平均值，并没有真正做任何事情。它产生的结果很糟糕，但在放大时不做任何模糊处理，因此它非常适用于放大检查每个像素的值。它也是自我矛盾的，所以你可以用它放大然后再缩小，得到与开始时相同的结果。</li><li><code>Bilinear</code> 双线性，缩放处理速度非常快，但会导致非常模糊的结果，并有明显的 <strong>锯齿(aliasing)</strong> 现象。</li><li><code>Bicubic</code> 双立方，缩放处理速度同样很快，但也会导致相当模糊的结果和明显的锯齿。你可以在这里修改参数以获得更清晰的结果，但这将导致更多的锯齿。</li><li><code>Lanczos</code> 缩放速度较慢，但可以得到非常清晰的结果。然而，它会产生了非常明显的 <strong>振铃(ringing)伪影(artifact)</strong> 。</li><li><code>Blackmanminlobe</code> 一个 <code>lanczos</code> 的改良版（需要通过 <code>fmtconv</code> 来调用它缩放）具有较少的振铃伪影。这种调整工具对于YUV444编码的色度提升绝对值得考虑（稍后会详细介绍）。</li><li><code>Spline</code> 其缩放速度相当慢，但可以得到非常好的结果。有多种 <code>Spline</code> 调整工具可用，<code>Spline16</code> 比 <code>Spline36</code> 快，但效果稍差，而 <code>Spline36</code> 与 <code>Spline64</code> 效果十分相似，所以没有理由使用后者。推荐在缩小分辨率(downscaling)时使用 <code>Spline36</code>。</li><li><code>nnedi3</code> 其调整大小的速度相当慢，而且只能以2的幂数进行 <strong>放大像素(upscale)</strong> 。它也可以与 <code>Spline36</code> 结合起来，先将其分辨率放大，而后缩小所需的分辨率。结果明显好于前述的内核。</li><li><code>FSRCNNX</code> 是一个用于 mpv 的着色器，可以通过 <code>vs-placebo</code> 插件使用。它提供了远比 <code>nnedi3</code> 更清晰的结果，但需要GPU的支持。如果可以的话，建议使用它来进行放大分辨率。</li></ul><p>附录中提供了这些调整工具的效果比较，图16为降低分辨率，图17为放大像素。此外，由于更改 <code>bicubic</code> 的参数将输出非常显着区别的结果，因此在附录图18还包括了对不同参数配置的 <code>bicubic</code> 放大比例的比较示例。为了满足更强的好奇心，我在图19中加入了缩小至原始分辨率后的对比，并且在附录中的图20中展示了同一调整工具先缩小再放大的情况。 </p><p>虽然这些截图应该可以帮助你对不同缩放方法之间的差异有一个大致的了解，但它们只是单个画面的一小部分。如果你想更好地了解这些调整工具对整体画面的影响，我建议你自己动手使用，在动态中观察它们，并将它们交错在一起(<code>std.Interleave</code>)进行对比。 </p><p>降低分辨率时不同调整工具之间的差异比放大时要小得多。 但不建议以此为借口，在降低分辨率时因偷懒而随意选择调整工具。 </p><p>简而言之: 用 <code>core.resize.Spline36</code> 来缩小分辨率。</p><h3 id="3-2-滤镜-Filtering"><a href="#3-2-滤镜-Filtering" class="headerlink" title="3.2 滤镜(Filtering)"></a>3.2 滤镜(Filtering)</h3><p>这有几件值得一提的事。首先，大多数蓝光片都是YUV420P8，范围有限(with limited range)。这里的第一组信息是YUV。这意味着我们视频的平面中Y是 <strong>亮度(luma)</strong> 平面，U和V是 <strong>色度(chroma)</strong> 平面。</p><p>YUV平面下的颜色，本例是4:2:0，指定了我们的平面大小。这方面最常见的三种变化是：4:2:0，这意味着色度平面是亮度平面的一半大小（例如，一个1920×1080的视频将有960×540的色度平面）；4:2:2，这意味着这种情况下的色度平面是水平分辨率的一半；垂直分辨率的全部；4:4:4，这意味着所有平面都是全分辨率。在播放过程中，视频播放器将色度平面放大到与亮度平面相同的大小。所以较小的色度平面并不明显，但在放大像素时，人们肯定能看出其中的差别。为了说明这一点，这里有个由AnoHana提供的例子，分别是在4:2:0与4:4:4下从720p放大至1080p的两种版本：</p><p><img src="/(/img/AHDVEG-pics/Figure1.png" alt="Figure1"></p><p>图1：两倍放大下，左边是YUV420，右边是YUV444。用 <code>fvf.Debic</code> 降低分辨率，然后用 <code>nnedi3_rpow2.nnedi3</code>和 <code>resize.Bilinear</code> 放大像素。</p><p>在这种情况下，最差的调整工具（bilinear）被用于色度平面。如果你使用类似 带有 KrigBilateral配置的mpv 时，这应该看起来好得多。<br>另一个例子：《寄生虫》 SDR UHD缩放为1080p 4:2:0与4:4:4的比较。</p><p><img src="/(/img/AHDVEG-pics/Figure2.png" alt="Figure2"></p><p>图2：《寄生虫》（Parasite (2019)） SDR UHD缩小为1080p情况下4:2:0与4:4:4的比较。感谢HyerrDoktyer提供。</p><p>下一个要解释的信息是P8。这指的是 **位深(Bit depth)**，本例中是8-bit。现在大多数视频都存储在8-bit，因为8-bit的 AVC【译者注：H.264】 具有最好的硬件兼容性。 然而，由于8-bit导致位深没有足够的值(0-255)可用，它很容易引入例如 <strong>色带(Banding)</strong> 之类的错误。更高的位深在这方面没有这么大的问题，且由于其更好的准确性，10-bit实际上更能以较小的文件体积存储视频。然而，10-bit的 AVC 几乎没有硬件兼容性可言，而且需要更长的时间来编码，因此PT用户通常不喜欢它。实际上大多数内容是以10-bit或12-bit制作的。 由于精度的提高，最流行的滤镜处理位深是16-bit。值得注意的是，UHD蓝光将采用YUV420P10，即10-bit。 </p><p>最后一部分，则要讲述的内容是限制范围(limited range)。在全范围(full range)8-bit中，我们可以用0至255之间的每一个值。可是，电视通常无法显示这些值，因而亮度被限制在16至235、色度被限制在16至240。大多数消费内容（如蓝光盘）也被限制在有限的范围内。假如你给电视一个全范围的视频，它将简单粗暴地将所有16及以下或235&#x2F;240及以上的数值显示为相同效果(make … the same value)（例如：黑色或白色）。</p><h4 id="3-2-1-检查你的源"><a href="#3-2-1-检查你的源" class="headerlink" title="3.2.1 检查你的源"></a>3.2.1 检查你的源</h4><p>这可能是花费时间最多的地方：检查你的源代码是否有问题。这需要遍历的整个源文件并亲自是否有 <strong>色带(banding)</strong> 、 <strong>锯齿(aliasing)</strong> 、 <strong>脏线(dirty line)</strong> 以及其他可能存在的问题。好消息是，VSEdit 允许你通过<code>CTRL + SHIFT + LEFT/RIGHT</code>键，按自己定义的步进来检查你的源文件。这个步进可以在预览窗口的右下角定义。我建议步进设置在1至3秒间。显然，间隔越短越好，因为你会检查更多的帧。</p><p>为了在一个给定的区间应用一个滤镜，请使用如下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filtered = my_filter(src)</span><br><span class="line">out = awf.rfs(src, filtered, mappings=<span class="string">&quot;[FIRST_FRAME LAST_FRAME]&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-2-2-抖动-Dithering"><a href="#3-2-2-抖动-Dithering" class="headerlink" title="3.2.2 抖动(Dithering)"></a>3.2.2 抖动(Dithering)</h4><p>尽管如果你将以与源文件相同的位深输出，就没有必要在高位深下工作，但为了输出时避免四舍五入的错误，建议在滤镜链的最后使用抖动降低位深，这可能会导致色带的伪影（图23是一个例子）。幸运的是，即使你不选择以高位深来编写脚本，大多数插件都可以在内部用高位深工作。由于抖动的速度相当快，而且更高的位深确实能带来更好的精度，所以除了一些为8-bit写的函数稍慢之外，通常没有理由不在更高的位深下工作。</p><p>如果你想了解更多关于抖动的信息，维基百科上的内容相当丰富，也有很多值得一读的研究出版物。在这里你只需要明白，只有当压制源和使用滤镜后的片段之间存在实际差异时，你使用的抖动方法才是重要的。由于抖动是对不同位深的四舍五入的一种选择，只有与实际整数的偏移才会有差异。一些算法可能在不同的情况上比其他的更好，因此，有理由使用非标准的算法。例如，如果你想将某个视频的色带去除，并以8-bit的形式输出，但在正确压缩方面存在问题时，你可能想考虑有序抖动，因为众所周知，它在这种情况下的表现略好（尽管它看起来不那么棒）。要做到这一点，请使用以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source_16 = fvf.Depth(src, <span class="number">16</span>)</span><br><span class="line">deband = core.f3kdb.Deband(source_16, output_depth=<span class="number">16</span>)</span><br><span class="line">out = fvf.Depth(deband, <span class="number">8</span>, dither=<span class="string">&#x27;ordered&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同样，这只会影响实际的去色带区域。这在大多数情况下并不推荐，因为有序抖动的效果相当难看，但如果你在压缩去色带区域时遇到困难，这依然值得考虑。显然你应该使用遮罩并调整去色带函数的参数，后面会有更多关于此的内容。</p><p>为了向上或向下抖动，你可以使用 <code>fvsfunc14</code>(fvf) 或 <code>mvsfunc15</code>(mvf) 中的 <code>Depth</code> 函数。这两者之间的区别是，fvf 仅使用内置调整工具，而 mvf 不仅可以内置调整工具，而且也支持 <code>fmtconv</code>，它比较慢，但有更多的抖动（和缩放）选项。然而，两者都具有标准的 Filter Lite error_diffusion 抖动类型，所以如果你只是使用默认值，我会推荐 fvf。为了说明优质抖动与劣质抖动之间的区别，在附录中的图21下提供一些例子。 请注意，你可能要放大到相当大的程度才能发现其区别。有些PDF阅读器可能会不正确地显示这些图像。</p><p>我建议在大多数情况下使用 <strong>Filter Lite</strong>（fvf 的默认值 或 <code>mvf.Depth(dither=3)</code> 即 mvf 默认值)。其他如 <strong>Ostromoukhov</strong> (<code>mvf.Depth(dither=7)</code>), <strong>void and cluster</strong> (<code>fmtc.bitdepth(dither=8)</code>), <strong>standard Bayer ordered</strong> (<code>fvf.Depth(dither=&#39;ordered&#39;)</code> 或 <code>mvf.Depth(dither=0)</code>) 有时也会有用。不过，<strong>Filter Lite</strong> 通常更适用。</p><h4 id="3-2-3-去色带-Debanding"><a href="#3-2-3-去色带-Debanding" class="headerlink" title="3.2.3 去色带(Debanding)"></a>3.2.3 去色带(Debanding)</h4><p>这是人们会遇到的最常见的问题。当位深不足和劣化设置导致较平滑的梯度变成突然的颜色变化时，就会发生色带现象，这最终显然看起来不好。好消息是因有更多的值可以用于创建梯度，所以更高的位深可以帮助解决这个问题。正因为如此，很多去色带工作都是在16-bit下完成的，然后在滤镜过程完成后再抖动到10-bit或8-bit。</p><p>关于去色带，需要注意的一点是，你应该尽量使用遮罩，最好是边缘遮罩或类似的东西。详见[3.2.14](####3.2.14 遮罩(Masking))！</p><p>在 VapourSynth 中，有两个很优秀的函数可以用来修复色带：<code>f3kdb16</code> 和 <code>fvsfunc.gradfun3</code>。后者不太常用，但其中有内置遮罩。<br>让我们先看看 <code>f3kdb</code>。 VapourSynth 的相关代码默认设置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deband = core.f3kdb.deband(src = clip, <span class="built_in">range</span> = <span class="number">15</span>, y = <span class="number">64</span>, cb = <span class="number">64</span>, cr = <span class="number">64</span>, grainy = <span class="number">64</span>, grainc = <span class="number">64</span>, dynamic_grain = <span class="literal">False</span>, output_depth = <span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>这些设置对一些人来说可能是不言自明的，但还是说明一下各参数的作用：</p><ul><li><code>src</code> 这显然指你的输入内容。</li><li><code>range</code> 指定了用于计算某场景中色带的像素范围。更高的范围意味着更多的像素被用于计算，也意味着它有更高的性能需求。默认值15通常是足够的。</li><li><code>y</code> 最重要的设置，因为大多数（明显的）色带发生在亮度平面。它规定了在亮度平面上要有多大的差异才会被认为是色带的。你应该从低数值开始，缓慢但有效地提高，直到色带消失。如果设置得太高，很多细节就会被视为色带，从而变得模糊不清。</li><li><code>cb</code>&#x2F;<code>cr</code> 与y相同，但应用于色度平面。然而，色度平面上的色带是很不常见的，所以你通常可以忽略它。</li><li><code>grainy</code>&#x2F;<code>grainc</code> 为了防止带状物再次出现，并抵消平滑度，通常在去色带过程后加入<strong>颗粒(grain)</strong> 。然而，由于这种假颗粒是相当明显的，建议保守一点添加。另外，你可以使用自定义加噪，这将得到一个更好的输出（见 3.2.10 颗粒化(Graining)）</li><li><code>dynamic_grain</code> 默认情况下，<code>f3kdb</code>添加的噪点是静态的。这样压缩效果更好，因为动态显然更少，但它在实拍内容中看起来不正常，所以除非你正在处理动画内容，否则通常建议将其设置为 <code>True</code>。</li><li><code>output_depth</code> 你应该将其设置为你想在去色带处理后的任意位深。如果你一直在8-bit下进行处理，你可以忽略这个选项。</li></ul><p>一个相当简单去色带的例子：</p><p><img src="/(/img/AHDVEG-pics/Figure3.png" alt="Figure3"></p><p>图3：两倍放大下，左边为源，右边为 <code>deband = core.f3kdb.Deband(src, y=64, cr=0, cb=0, grainy=32, grainc=0, range=15, keep_tv_range=True)</code> 处理后的效果。</p><p>如果你想把 <code>f3kdb</code> 和 <code>gradfun3</code> 两种遮罩一起使用，你可以使用 <code>fag3kdb</code> 替代。我建议在去色带力度非常强时尝试这个方法，但 <code>retinex_edgemask</code> 或 <code>debandmask</code> 在大多数情况下效果更好（尽管比前者的速度要慢很多）。</p><p>最常用的替代品是 <code>gradfun3</code>，它可能主要是由于其参数不太直接而不太受欢迎。它的工作原理是将源平滑处理，并通过 <code>mvf.LimitFilter</code> 将其限制在 <code>thr</code> 和 <code>elast</code>指定的值内，然后通过其内部遮罩与源合并（尽管使用外置遮罩也是可行的）。<br>许多人认为 <code>gradfun3</code> 比 <code>f3kdb</code> 的处理结果更平滑。因为它与 <code>f3kdb</code> 相比有更多的选项，而且使用它在大多数时候不必为遮罩而烦恼，所以值得了解如何去使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fvsfunc <span class="keyword">as</span> fvf</span><br><span class="line">deband = fvf.GradFun3(src, thr=<span class="number">0.35</span>, radius=<span class="number">12</span>, elast=<span class="number">3.0</span>, mask=<span class="number">2</span>, mode=<span class="number">3</span>,</span><br><span class="line">ampo=<span class="number">1</span>, ampn=<span class="number">0</span>, pat=<span class="number">32</span>, dyn=<span class="literal">False</span>, staticnoise=<span class="literal">False</span>, smode=<span class="number">2</span>, thr_det=<span class="number">2</span> + <span class="built_in">round</span>(<span class="built_in">max</span>(thr - <span class="number">0.35</span>, <span class="number">0</span>) / <span class="number">0.3</span>), debug=<span class="literal">False</span>, thrc=thr,radiusc=radius, elastc=elast,planes=<span class="built_in">list</span>(<span class="built_in">range</span>(src.<span class="built_in">format</span>.num_planes)), ref=src, bits=src.<span class="built_in">format</span>.bits_per_sample) <span class="comment"># + 调整大小的变量</span></span><br></pre></td></tr></table></figure><p>很多这些值是用于 <code>fmtconv </code> 位深转换的，因此它的文档可以证明其是有帮助的。<code>GradFun3</code>中的降低分辨率与其他缩小方法没有什么不同，所以我不会讨论这个。其他一些可能感兴趣的参数是：</p><ul><li><code>thr</code> 等价于<code>y</code>&#x2F;<code>cb</code>&#x2F;<code>cr</code>。你可能想提高或降低它。</li><li><code>radius</code> 与 <code>f3kdb</code>的<code>range</code> 具有相同的效果。</li><li><code>smode</code> 设置平滑模式。通常最好保持默认值，即双边(bilateral)滤镜。如果你想使用支持CUDA的GPU而不是CPU的话，可以把它设置为5。使用 <code>ref</code>（默认为input clip）作为参考素材。</li><li><code>mask</code> 如果设置为0，则禁用遮罩。否则，它设置了要调用的 <code>std.Maximum</code>和<code>std.Minimum</code> 的次数。</li><li><code>planes</code> 设置需要处理的平面。</li><li><code>mode</code> 设置 <code>fmtconv</code> 中使用的抖动模式。</li><li><code>ampn</code>&#x2F;<code>staticnoise</code> 设置 <code>fmtconv</code>应该添加多少噪点以及噪点是否为静态。对于真人动作内容来说，有必要进行调整。</li><li><code>debug</code> 允许你查看遮罩。</li><li><code>elast</code>是 “软阈值的弹性”。更高的值会在去色带遮罩和源之间做更多的混合。</li></ul><p>如果去色带处理后的片段与未经处理的相比噪点很少，此时你应该考虑使用一个单独的函数来添加匹配的噪点，这样场景就更容易融合在一起。 如果有很多噪点，你可能要考虑使用 <code>adptvgrnMod</code>、<code>adaptive_grain</code> 或 <code>GrainFactory3</code>；对于不太明显的噪点或对于通常只有很少噪点的明亮场景，你也可以使用 <code>grain.Add</code>。这个话题将在后面的[3.2.10](####3.2.10 颗粒化(Graining))中进一步阐述。</p><p><img src="/(/img/AHDVEG-pics/Figure4.png" alt="Figure4"></p><p>图4：左边是源，右边是滤镜处理后的。这里的色带可能很难发现，但我不能在这个PDF中加入更大的图片。不过，这个效果应该是显而易见的。</p><p>如果你想进行自动色带检测，你可以使用一个基于 <code>bandmask</code> 的检测函数，叫做 <code>banddtct</code>。确保适当调整数值并检查全部输出。[3.2.17](####3.2.17 论坛和博客文章)中有一个解释它的论坛帖子链接。你也可以在运行 <code>adptvgrnMod</code> 或<code>adaptive_grain</code> 时使用一个高的 <code>luma_scaling</code> 值，希望噪点能完全覆盖它。 更多关于这个的内容在[3.2.10](####3.2.10 颗粒化(Graining))中继续讨论。</p><h4 id="3-2-4-修复脏线-Dirty-Lines-及不合适的边缘-Borders"><a href="#3-2-4-修复脏线-Dirty-Lines-及不合适的边缘-Borders" class="headerlink" title="3.2.4 修复脏线(Dirty Lines)及不合适的边缘(Borders)"></a>3.2.4 修复脏线(Dirty Lines)及不合适的边缘(Borders)</h4><p>另一个非常常见的问题，至少在真人电影的内容中，是脏线。这类问题通常出现在视频的边界上，与周围的行相比，某一行或某一列的像素通常表现出过低的亮度值。通常情况下，这是由于不适当地缩小分辨率，更明显的是在应用边框后的缩小分辨率。脏线也可能发生，因为视频编辑者往往不知道他们是在YUV422下工作的，这意味着他们的竖向像素值不必是偶数；而消费者内容将是YUV420，意味着竖向像素值必须是偶数，导致额外的黑行。</p><p>另一种形式的脏线是在黑条上出现色度平面时表现出来的。 通常情况下，这些应该被裁剪掉。然而，相反的情况也可能发生，即具有合法的亮度信息的平面但缺乏色度信息。 有六种常用的滤镜用于修复脏线。</p><ul><li><p><strong>cf</strong>的<code>ContinuityFixer</code></p><p><code>ContinuityFixer</code> 的工作原理是将指定的行&#x2F;列与周围范围指定的行&#x2F;列数量进行比较，通过最小二乘法再回归找到新值。其设置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fix = core.cf.ContinuityFixer(src=clip, left=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], right=[<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>], top=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], bottom=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], radius=<span class="number">1920</span>)</span><br></pre></td></tr></table></figure><p>这是假设你使用的是1080p的素材，因为半径的值被设置为源的分辨率所定义的最长的集合。我建议使用一个更低的值，但不要低于3，因为在这一点上，你可能是在复制像素（参见下面的<code>FillBorders</code>）。可能会让大多数新手感到困惑的是，我输入了一个数组，作为要固定的行&#x2F;列的值。这些值表示要应用到三个平面上的值。通常情况下，脏线只会发生在亮度平面上，所以你通常可以把其他两个平面的值保持为0。 请注意，数组并非必须，因此您也可以只输入希望应用修复的行&#x2F;列的数量，所有平面都会被处理。<br><code>ContinuityFixer</code> 最擅长的一点是去除不规则的东西，比如点。 它也比 <code>bbmod</code> 和 <code>FixBrightnessProtect2</code> 快，但它应该被视为这两者的备选方案。</p></li><li><p><strong>awsmfunc</strong>的<code>bbmod</code></p><p>这是原<code>BalanceBorders</code> 函数的一个修改版。它与 <code>ContinuityFixer</code> 非常相似，但在更高的 <strong>模糊值(blur)</strong> 和 <strong>阈值(thresh)</strong> 的情况下会产生更好的效果。如果它没有产生去分的结果，可以改变这些，但是你设置的模糊值越低，这个函数的破坏性就越大。它也比 <code>havsfunc</code> 和 <code>sgvsfunc</code> 中的版本快得多，因为只有必要的像素被处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> awsmfunc <span class="keyword">as</span> awf</span><br><span class="line">bb = awf.bbmod(src=clip, left=<span class="number">0</span>, right=<span class="number">0</span>, top=<span class="number">0</span>, bottom=<span class="number">0</span>,thresh=[<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>], blur=[<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>], scale_thresh=<span class="literal">False</span>,cpass2=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><code>thresh</code> 和 <code>blur</code> 的数组也是Y、U和V的值。建议先试试 <code>blur=999</code>，然后尝试降低这个和 <code>thresh</code> 的值，反复尝试，直到你得到合适的效果。<br><code>thresh</code>指定了结果可以和输入值相差多少。<code>blur</code> 是过滤器的强度，数值越低越强，数值越大则越弱。如果你设置 <code>blur=1</code> ，你基本上就等同于复制行。</p></li><li><p><strong>fb</strong>的<code>FillBorders</code></p><p>这个函数几乎就是复制下一列&#x2F;行的内容。虽然这听起来很傻，但当分辨率缩小导致更多的行在底部而不是顶部，并且由于YUV420的偶数的竖向像素值，我们不得不填充一行时，它就会非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fill = core.fb.FillBorders(src=clip, left=<span class="number">0</span>, right=<span class="number">0</span>, bottom=<span class="number">0</span>, top=<span class="number">0</span>, mode=<span class="string">&quot;fillmargins&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个函数的一个非常有趣的应用是类似于只对色度平面应用 <code>ContinuityFixer</code>，它可以用在灰色边界或无论应用什么亮度平面修复的修复方法都与边界不匹配他们的环境时。这可以用下面的脚本来完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill = core.fb.FillBorders(src=clip, left=<span class="number">0</span>, right=<span class="number">0</span>, bottom=<span class="number">0</span>, top=<span class="number">0</span>, mode=<span class="string">&quot;fillmargins&quot;</span>)</span><br><span class="line">merge = core.std.Merge(clipa=clip, clipb=fill, weight=[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>你也可以分离平面并单独处理色度平面，尽管这只是稍微快一点。允许您为fb【译者注：<code>core.fb</code>】指定每个平面值的封装函数是 <strong>awsmfunc</strong> 中的 <code>FillBorders</code>。</p></li><li><p><strong>edgefixer</strong>的<code>ReferenceFixer</code></p><p>这需要原始版本的edgefixer（cf只是它的一个旧的移植版本，但它使用起来更漂亮，处理过程也没有改变）。我从来没有发现它有什么用处，但从理论上讲，它是很好的。它与一个参考素材进行比较，以调整其边缘固定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fix = core.edgefixer.Reference(src, ref, left=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], right=[<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>], top=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], bottom=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], radius = <span class="number">1920</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>rekt</strong>的 <code>rektlvls</code></p><p>这基本上是 <code>FixBrightnessProtect</code> 和 <code>FixBrightness</code> 的合二为一，另外还有一个事实，即不是整个画面都被处理。它的参数非常简单明了，提高调整值可以变亮，降低调整值可以变暗。将 <code>prot_val</code> 设置为0时，它的功能就与 <code>FixBrightness</code>相同，意味着调整值需要改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rekt <span class="keyword">import</span> rektlvls</span><br><span class="line">fix = rektlvls(src, rownum=<span class="literal">None</span>, rowval=<span class="literal">None</span>, colnum=<span class="literal">None</span>, colval=<span class="literal">None</span>, prot_val=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>如果你想一次处理多行，你可以输入一个列表（例如，<code>rownum=[0, 1, 2]</code>）。</p></li></ul><p>有一点不应该被忽视的是，对太多的行&#x2F;列应用这些修正（除了 <code>rektlvls</code> 之外）可能会导致最终结果看起来很模糊。正因为如此，我们建议尽可能使用 <code>rektlvls</code>，或只在必要的行上使用亮度修复。如果失败了，最好在使用 <code>ContinuityFixer</code> 之前先试试 <code>bbmod</code>。</p><p>值得注意的是，你总是应该在调整大小之前修复脏线，否则做会引入更多的脏线。然而，更需注意的是，如果你在边缘使用 <code>FillBorders</code> 填充了一条黑线，你应该使用调整大小的工具来删除它。例如，要将一个顶部有一条填充线的片段从1920 × 1080调整为1280 × 536时应该这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">top_crop = <span class="number">138</span></span><br><span class="line">bot_crop = <span class="number">138</span></span><br><span class="line">top_fill = <span class="number">1</span></span><br><span class="line">bot_fill = <span class="number">0</span></span><br><span class="line">src_height = src.height - (top_crop + bot_crop) - (top_fill + bot_fill)</span><br><span class="line">crop = core.std.Crop(src, top=top_crop, bottom=bot_crop)</span><br><span class="line">fix = core.fb.FillBorders(crop, top=top_fill, bottom=bot_fill, mode=<span class="string">&quot;fillmargins&quot;</span>)</span><br><span class="line">resize = core.resize.Spline36(<span class="number">1280</span>, <span class="number">536</span>, src_top=top_fill, src_height=src_height)</span><br></pre></td></tr></table></figure><p>如果你要处理对角线的边框，正确的做法是使用蒙版覆盖源，用<code>FillBorders</code> 调用合并源。为此举一个例子（来自D-Z0N3压制的作品《你的名字》）：</p><p><img src="/(/img/AHDVEG-pics/Figure5.png" alt="Figure5"></p><p>图5：该示例为《你的名字》（Your Name (2016)）中不恰当地使用边框。D-Z0N3的使用了蒙版，而Geek没有。 因此，Geek缺乏任何类似的纹理，而D-Z0N3则尽可能地保留它。使用 <code>FillBorders</code> 中的镜像模式可能更明智，但事后看来是20&#x2F;20【译者注： “20&#x2F;20视力”称为“完美”视力】。</p><p>D-Z0N3使用的代码（16-bit下）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mask = core.std.ShufflePlanes(src, <span class="number">0</span>, vs.GRAY).std.Binarize(<span class="number">43500</span>)</span><br><span class="line">cf = core.fb.FillBorders(src, top=<span class="number">6</span>).std.MaskedMerge(src, mask)</span><br></pre></td></tr></table></figure><p>在附录中的图22下有一个例子，说明为什么要使用蒙版。 </p><p>为了说明脏线可能是什么样子，这里有一个 <code>ContinuityFixer</code> 和纯色的 <code>FillBorders</code> 对比的例子。</p><p><img src="/(/img/AHDVEG-pics/Figure6.png" alt="Figure6"></p><p>图6：来源于的D-Z0N3的压制作品《无声的声音》（A Slinet Voice (2016)）的脏线修复与过滤。在最上面的三行使用 <code>ContinuityFixer</code>，在最左边的两列使用<code>FillBorders</code>。 当前画面放大15倍。</p><p>脏线很难发现。如果你在随机检查不同帧的边界时候不能发现存在脏线，那么可能就没有问题。如果你发现有每边都有小黑线边界，那么可以使用类似下面的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">black_detect</span>(<span class="params">clip, thresh=<span class="literal">None</span></span>):</span><br><span class="line"><span class="keyword">if</span> thresh == <span class="literal">None</span>:</span><br><span class="line">thresh = (<span class="number">25</span> * (<span class="number">1</span> &lt;&lt; clip.<span class="built_in">format</span>.bits_per_sample) - <span class="number">1</span>) / <span class="number">255</span></span><br><span class="line">mask = core.std.ShufflePlanes(clip, <span class="number">0</span>, vs.GRAY).std.Binarize(&#123;<span class="number">0</span>&#125;<span class="string">&quot;.format(thresh)).std.Invert().std.Maximum().std.Inflate().std.Maximum().std.Inflate()</span></span><br><span class="line"><span class="string">l = core.std.Crop(mask, right=clip.width / 2)</span></span><br><span class="line"><span class="string">r = core.std.Crop(mask, left=clip.width / 2)</span></span><br><span class="line"><span class="string">mask_test = core.std.StackHorizontal([r, l])</span></span><br><span class="line"><span class="string">t = core.std.Crop(mask_test, top=clip.height / 2)</span></span><br><span class="line"><span class="string">b = core.std.Crop(mask_test, bottom=clip.height / 2)</span></span><br><span class="line"><span class="string">mask_test = core.std.StackVertical([t, b])</span></span><br><span class="line"><span class="string">return mask_test</span></span><br></pre></td></tr></table></figure><p>这个脚本将 <code>threshold</code> 以下的数值（即黑色边框）在大部分黑色背景的中部显示为垂直或水平白线。你可以运用这个函数来浏览并检查你的视频。你也可以尝试使用 <code>blckdtct27</code>，它可以为你扫描视频。 </p><p>其他类型的可变脏线是一个修复难题(a bitch to fix)，需要手动检查场景。</p><p> 一个与脏线非常相似的问题是糟糕的边界(bad borders)。在不同场景中（例如IMAX或4:3），黑色边框有时可能不完全是黑色的，或者完全被打乱了。为了解决这个问题，只需将其裁剪并重新添加。你也可能想修复过程中可能出现的脏线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crop = core.std.Crop(src, left=<span class="number">100</span>, right=<span class="number">100</span>)</span><br><span class="line">clean = core.cf.ContinuityFixer(crop, left=<span class="number">2</span>, right=<span class="number">2</span>, top=<span class="number">0</span>, bottom=<span class="number">0</span>, radius=<span class="number">25</span>)</span><br><span class="line">out = core.std.AddBorders(clean, left=<span class="number">100</span>, right=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="3-2-5-抗锯齿-Anti-Aliasing"><a href="#3-2-5-抗锯齿-Anti-Aliasing" class="headerlink" title="3.2.5 抗锯齿(Anti-Aliasing)"></a>3.2.5 抗锯齿(Anti-Aliasing)</h4><p>这可能是最常见的问题。如果你想解决这个问题，首先要确定这个问题是由锯齿而不是糟糕的 <strong>放大像素(upscaling)</strong> 造成的。如果你已经确认，我推荐的工具是 <code>TAAmbk</code> 套件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vsTAAmbk <span class="keyword">as</span> taa</span><br><span class="line">aa = taa.TAAmbk(clip, aatype=<span class="number">1</span>, aatypeu=<span class="literal">None</span>, aatypev=<span class="literal">None</span>, preaa=<span class="number">0</span>, strength=<span class="number">0.0</span>, cycle=<span class="number">0</span>, mtype=<span class="literal">None</span>, mclip=<span class="literal">None</span>, mthr=<span class="literal">None</span>, mthr2=<span class="literal">None</span>, mlthresh=<span class="literal">None</span>, mpand=(<span class="number">1</span>, <span class="number">0</span>), txtmask=<span class="number">0</span>, txtfade=<span class="number">0</span>, thin=<span class="number">0</span>, dark=<span class="number">0.0</span>, sharp=<span class="number">0</span>, aarepair=<span class="number">0</span>, postaa=<span class="literal">None</span>, src=<span class="literal">None</span>, stabilize=<span class="number">0</span>, down8=<span class="literal">True</span>, showmask=<span class="number">0</span>, opencl=<span class="literal">False</span>, opencl_device=<span class="number">0</span>, **args)</span><br></pre></td></tr></table></figure><p>尽管GitHub的README内容相当详细，但在这有必要进行一些额外的补充：</p><ul><li><code>aatype</code>: (默认值: 1)</li></ul><p>  这里的值可以是表示亮度平面AA类型的数字，也可以是表示其AA类型的字符串。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0: lambda clip, *args, **kwargs: type(&#x27;&#x27;, (), &#123;&#x27;out&#x27;: lambda: clip&#125;),</span><br><span class="line">1: AAEedi2,</span><br><span class="line">2: AAEedi3,</span><br><span class="line">3: AANnedi3,</span><br><span class="line">4: AANnedi3UpscaleSangNom,</span><br><span class="line">5: AASpline64NRSangNom,</span><br><span class="line">6: AASpline64SangNom,</span><br><span class="line">-1: AAEedi2SangNom,</span><br><span class="line">-2: AAEedi3SangNom,</span><br><span class="line">-3: AANnedi3SangNom,</span><br><span class="line">&#x27;Eedi2&#x27;: AAEedi2,</span><br><span class="line">&#x27;Eedi3&#x27;: AAEedi3,</span><br><span class="line">&#x27;Nnedi3&#x27;: AANnedi3,</span><br><span class="line">&#x27;Nnedi3UpscaleSangNom&#x27;: AANnedi3UpscaleSangNom,</span><br><span class="line">&#x27;Spline64NrSangNom&#x27;: AASpline64NRSangNom,</span><br><span class="line">&#x27;Spline64SangNom&#x27;: AASpline64SangNom,</span><br><span class="line">&#x27;Eedi2SangNom&#x27;: AAEedi2SangNom,</span><br><span class="line">&#x27;Eedi3SangNom&#x27;: AAEedi3SangNom,</span><br><span class="line">&#x27;Nnedi3SangNom&#x27;: AANnedi3SangNom,</span><br><span class="line">&#x27;PointSangNom&#x27;: AAPointSangNom,</span><br></pre></td></tr></table></figure><p>  我建议使用的是 <code>Eedi3</code>、<code>Nnedi3</code>、<code>Spline64SangNom</code> 和 <code>Nnedi3SangNom</code>。 这两种 <code>SangNom</code> 模式都具有难以置信的破坏性，只有在绝对必要的情况下才应使用。<code>Nnedi3</code> 通常是你最好的选择；它不是很强也不具有破坏性，但往往足够好，而且速度相当快。<code>Eedi3</code> 慢得令人难以置信，但比 <code>Nnedi3</code> 强，且不像 <code>SangNom</code> 模式那样具有破坏性。</p><ul><li><p><code>aatypeu</code>: (默认值 <code>aatype</code> 一致)</p><p>当片段的格式为YUV时，为U平面选择主AA内核。</p></li><li><p><code>aatypeu</code>: (默认值 <code>aatype</code> 一致)</p><p>当片段的格式为YUV时，为V平面选择主AA内核。</p></li><li><p><code>strength</code>: (默认值: 0)</p><p>预降(predown)的强度，有效范围是[0, 0. 5]。 在应用主AA核之前，分辨率会先被缩小到 <code>(1- strength)×clip_resolution</code>，然后被主AA核放大至原始分辨率。这可能对那些因放大像素不足而造成严重锯齿的素材有好处。当使用不适合放大像素的AA内核时，自动禁用。如果可能，即不要增加，也不要降低。</p></li><li><p><code>preaa</code>: (默认值: 0)</p><p>选择 <code>preaa</code> 模式</p><ul><li>0: 不使用</li><li>1: 垂直</li><li>2: 水平</li><li>-1: Both</li></ul><p>在应用主AA内核之前，先使用 <code>preaa</code>。<code>preaa</code> 基本上是 <code>daa</code> 的一个简化版本。在处理由劣质 <strong>反交错(deinterlacing)</strong> 引起的残余隔行(residual comb)时相当有用。否则，不要使用它。</p></li><li><p><code>cycle</code>: (默认值: 0)</p><p>设置主AA内核的循环次数。用于非常非常糟糕的锯齿和3D锯齿。</p></li><li><p><code>mtype</code>: (默认值: 1)</p><p>选择要使用的边缘遮罩的类型。目前三种遮罩类型分别是： </p><ul><li>0：无遮罩 </li><li>1：Canny遮罩 </li><li>2：Sobel遮罩 </li><li>3：Prewitt遮罩</li></ul><p>遮罩总是在8-bit下构建。这所有选项都棒，但你最好测试一下，看看哪种最终效果最好。</p></li><li><p><code>mclip</code>: (默认值: None)</p><p>使用自定义遮罩，而不是由函数内部建立，并且你应该自己处理遮罩的分辨率、位深、格式等问题。如果设置了<code>mclip</code>，脚本将不会构建其他遮罩了。</p></li><li><p><code>mthr</code>: </p><p>遮罩的大小。你给定的值越小，你将得到越大的遮罩。</p></li><li><p><code>mlthresh</code>: (默认值: None)</p><p>为 n-pass 的遮罩设置亮度 thresh。使用一个列表或数组来指定luma的部分。</p></li><li><p><code>mpand</code>: (默认值: (1,0) )</p><p>使用一个列表或元组来指定掩码扩展和掩码放大的循环。</p></li><li><p><code>txtmask</code>: (默认值: 0)</p><p>创建一个掩码来保护屏幕上的白色字幕。值是亮度的阈值。有效范围是0-255。当一个区域的亮度值大于阈值，色度值为128±2时，它将被认为是一个字幕。</p></li><li><p><code>txtfade</code>: (默认值: 0)</p><p>设置淡入淡出的长度(时长？)。用于的淡入淡入淡出字幕。</p></li><li><p><code>thin</code>: (默认值: 0)</p><p>在应用主AA内核之前，通过aWarpSharp2对该行进行扭曲。</p></li><li><p><code>dark</code>: (默认值: 0.0) </p><p>在应用主AA内核之前，通过 <code>Toon</code> 使线条变暗。</p></li><li><p><code>sharp</code>: (默认值: 0)</p><p>在应用主AA内核后，对片段进行锐化。</p><ul><li>0: 没有锐化。</li><li>1 inf:LSFmod (defaults&#x3D;’old’) </li><li>0 1: 类似 Avisynth 的 <code>sharpen()</code> </li><li>-1 0: LSFmod (defaults&#x3D;’fast’) </li><li>-1:ContraSharpen</li></ul><p>无论哪种类型的锐化，较大的锐化绝对值意味着较大的锐化强度。</p></li><li><p><code>aarepair</code>: (默认值: 0)</p><p>使用修复来消除由主AA内核引入的伪影。根据不同的修复模式，原始素材中的像素将被处理过的素材的3x3邻居中的中位数或平均值所取代。强烈建议在主AA内核包含 <code>SangNom</code> 时使用该修复。更多信息请<a href="http://www.vapoursynth.com/doc/plugins/rgvs.html#rgvs.Repair">查看</a>。 但很难让这个工具正常工作。</p></li><li><p><code>postaa</code>: (默认值: False)</p><p>是否使用 soothe 来对抗锐化带来的混杂现象。</p></li><li><p><code>src</code>: (默认值: clip)</p><p>引入片段进行锐化、修复、蒙版合并等。</p></li><li><p><code>stabilize</code>: (默认值: 0)</p><p>通过 MVTools 稳定时间上的变化。值是时间半径。有效范围是[0, 3]。</p></li><li><p><code>down8</code>: (默认值: True)</p><p>如果你将此设置为 True，引入的片段将先被降低到8-bit，并在应用主AA内核之后回升到原始的位深度。在位深转换中，采用 <code>LimitFilter</code> 来减少损失。</p></li><li><p><code>showmask</code>: (默认值: 0)</p><p>如果你把它设置为非0数值，则输出遮罩而不是处理过的片段。</p><ul><li>0：正常输出</li><li>1：只有蒙版</li><li>2：粘性蒙版和剪辑</li><li>3：交错蒙版和剪辑</li><li>-1：只有文本蒙版</li></ul></li><li><p><code>opencl</code>: (默认值: False)</p><p>是否使用opencl版本的一些插件。目前有三个插件可以使用opencl：</p><ul><li>TcannyCL</li><li>EEDI3CL</li><li>NNEDI3CL</li></ul><p>这可能会加快速度，这显然是很好的，因为抗锯齿计算通常是很慢。</p></li><li><p><code>opencl_device</code>: (默认值: 0)</p><p>选择一个 OpenCL 设备。要知道选择的是哪一个的，请输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">core.nnedi3cl.NNEDI3CL(clip, <span class="number">1</span>, list_device=<span class="literal">True</span>).set_output()</span><br></pre></td></tr></table></figure></li><li><p>其他参数：</p><p>将被收集到一个特别为 <code>aatype</code> 制作的手册中。</p></li></ul><p>请注意，还有很多非常好的抗锯齿方法，以及许多不同类型的遮罩，你可以使用（例如，其他边缘遮罩，无限接近两种遮罩的结合(clamping one method’s changes to those of another method)等等）。然而，大多数方法都是基于与 <code>TAA</code> 实现的非常相似的方法。</p><p>如果你的整个视频都受到锯齿的影响，那么放大像素的效果就很糟糕，这也不是太不可能的。在这种情况下，在决定你是否需要执行抗锯齿操作之前，先降低分辨率或调整大小。</p><p>这有一个抗锯齿修复例子（来自《悠哉日常大王》(劇場版 のんのんびより ばけーしょん（2018）)）：</p><p><img src="/(/img/AHDVEG-pics/Figure7.png" alt="Figure7"></p><p>图7：左边为带有锯齿的源，右边为滤镜处理后</p><p>在这个例子中，我们进行了以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = kgf.retinex_edgemask(src).std.Binarize(<span class="number">65500</span>).std.Maximum().std.Inflate()</span><br><span class="line">aa = taa.TAAmbk(src, aatype=<span class="number">2</span>, mtype=<span class="number">0</span>, opencl=<span class="literal">True</span>)</span><br><span class="line">out = core.std.MaskedMerge(src, aa, mask)</span><br></pre></td></tr></table></figure><h4 id="3-2-6-降低分辨率-Descale"><a href="#3-2-6-降低分辨率-Descale" class="headerlink" title="3.2.6 降低分辨率(Descale)"></a>3.2.6 降低分辨率(Descale)</h4><p>虽然大多数电影是以2K分辨率制作的，大多数动漫是以720p制作的，但蓝光片几乎都是1080p，UHD蓝光片都是4K。这意味着母版制作公司经常要对画面进行放大。这种操作的结果通常不理想，但幸运的是，有些损伤是可逆的。由于动漫通常以比源图像更高的分辨率发布，而且使用 <code>bilinear</code> 或 <code>bicubic</code> 放大像素非常常见，大多数缩小分辨率软件是为动漫编写的，这也是你需要缩小分辨率的主要场景。真人电影通常不能被缩小分辨率，因为糟糕的专有缩放器（通常是 QTEC 或类似的），因此大多数真人电影压制人员不知道是否需要缩小分辨率或根本不考虑。</p><p>所以，如果你对动漫进行编码，一定要确保查看过原画分辨率(check what the source images are)。你可以使用<a href="https://anibin.blogspot.com/">https://anibin.blogspot.com/</a> 来查阅原画发行信息 ，通过 <a href="https://anibin.blogspot.com/"><code>getnative</code></a> 进行截图，或者干脆自己试试。最后一个选项显然是最好的方法，但 <code>getnative</code> 通常也非常好，而且更容易。Anibin，虽然也很有用，但并不总是能得到正确的分辨率。</p><p>为了达到缩小分辨率的效果，你应该使用 <code>fvsfunc</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fvsfunc <span class="keyword">as</span> fvf</span><br><span class="line">descaled = fvf.Debilinear(src, <span class="number">1280</span>, <span class="number">720</span>, yuv444=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们将使用 <code>bilinear</code> 缩小到720p，并用 <code>Spline36</code> 将色度平面缩小到360p。如果你为一个不关心硬件兼容性的网站&#x2F;团体压制动漫作品，你可能会想将<code>yuv444=true</code>，并相应地改变你的编码设置。</p><p>降低分辨率支持使用 <code>bilinear</code>、<code>bicubic</code> 和 <code>spline</code> 放大内核。除了 <code>Debilinear</code>之外，每一种都有自己的参数。对于 <code>Debicubic</code>，这些参数是：</p><ul><li>b：在0和1之间，这相当于应用了模糊的效果</li><li>c：也在0到1之间，这是锐利的效果</li></ul><p>  最常见的情况是 b&#x3D;1&#x2F;3和c&#x3D;1&#x2F;3 ，这是默认值；b&#x3D;0和c&#x3D;1，这是过度锐化的 <code>bicubic</code>；b&#x3D;1和c&#x3D;0，这是模糊化的 <code>bicubic</code>。不过，介于两者之间的数值也很常见。</p><p>同样，<code>Delanczos</code> 也有 <code>taps</code> 选项，使用<code>Spline</code> 放大分辨率的同样可以用 <code>Despline36</code> 和 <code>Despline16</code> 来反转放大分辨率操作。 </p><p>缩小分辨率后，你很可能想再放大至1080p或2160p。这样做的首选方法是通过 <code>nnedi3</code>，或者更具体地说是使用<code>edi3_rpow2</code> 或 <code>nnedi3_rpow2</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> edi3_rpow2 <span class="keyword">import</span> nnedi3_rpow2</span><br><span class="line">descaled = fvf.Debilinear(src, <span class="number">1280</span>, <span class="number">720</span>)</span><br><span class="line">upscaled = nnedi3_rpow2(descaled, <span class="number">2</span>).resize.Spline36(<span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">out = core.std.Merge(upscaled, src, [<span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>我们在这里做的是 <code>bilinear</code> 放大后再降至720p，然后用 <code>nnedi3</code> 将其升至1440p，再降至1080p，然后与源的色度平面合并。这样做的原因有很多：</p><ul><li>大多数人都没有正确地设置视频播放器来使分辨率放大(upscale the footage)。</li><li>那些不是很了解情况的人往往认为更高的分辨率&#x3D;更好的质量，因此1080p更受欢迎。</li><li>很多PT站点只允许720p和1080p的画面。也许你不想伤害色度平面，或者原始分辨率介于两者之间（810p和900p很常见）时，你更想放大到1080p而不是缩小至720p。</li></ul><p>另一件要注意的事是，字幕和其他文字往往是在放大像素后添加的，因此你需要使用一个蒙版，以免破坏这些文字。幸运的是，你可以简单地在降低分辨率的函数名称后添加一个M（<code>DebilinearM</code>），你就会得到一个遮罩。然而，这将大大减慢了缩小分辨率速度，所以你可能想在这里进行场景过滤。</p><p>在上述常见的分辨率缩小方法之外，还有一些值得考虑的滤镜，尽管它们的作用实际上都是一样的，那就是对线条艺术(line art)（又称边缘）进行分辨率缩小，并将其重新调整为源分辨率。如果在放大分辨率后添加了大量的抖动，这就特别有用。</p><ul><li><code>DescaleAA</code>：<code>fvsfunc</code> 的一部分，使用一个 <code>Prewitt</code> 遮罩来找到线条艺术并重新将像素放大。</li><li><code>InsaneAA</code>：使用强化的 <code>Sobel</code> 遮罩以及混合使用 <code>eedi3</code> 与 <code>nnedi3</code>。</li></ul><p>就个人而言，我不喜欢把它放大回去并坚持使用YUV444编码。然而，如果你想这样做，你也可以考虑尝试编写你自己的遮罩。一个例子是（根据以前的代码）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask = kgf.retinex_edgemask(src).std.Binarize(<span class="number">15000</span>).std.Inflate()</span><br><span class="line">new_y = core.std.MaskedMerge(src, upscaled, mask)</span><br><span class="line">new_clip = core.std.ShufflePlanes([new_y, u, v], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], vs.YUV)</span><br></pre></td></tr></table></figure><p>为了说明区别，这里有一些放大至源分辨率的例子。请注意，通过视频播放器将YUV444分辨率缩小后的画面放大会更好看。</p><p><img src="/(/img/AHDVEG-pics/Figure8.png" alt="Figure8"></p><p>图8：蓝光源，左边是通过 <code>bicubic</code> 放大函数将720p的画面提升到1080p，右边是用<code>Debilinear</code> 和 <code>nnedi3</code> 重新缩放。</p><p>重要的是要注意，这当然也可以用于实景拍摄的画面。一个例子是《权力的游戏》第一季的UHD蓝光片，它是双线性(bilinear)升频的。虽然在截图中并不明显，但在播放过程中的差异是惊人的。</p><p><img src="/(/img/AHDVEG-pics/Figure9.png" alt="Figure9"></p><p>图9：《权力的游戏》（Games of Throne:Seaon 1 (2011)）UHD蓝光源，左边是通过 <code>bilinear</code> 像素放大函数将1080p的画面提升到2160p，右边是用 <code>Debilinear</code> 和 <code>nnedi3</code> 重新缩放。</p><p>如果你的视频在每一帧中都有多个源分辨率（即不同的层有不同的分辨率），你可以通过 <code>getnative</code> 输出多个结果来注意到这一点，你最好的办法是通过 <code>Spline36</code> 缩小到最低分辨率。虽然从技术上讲，你可以屏蔽每个图层，将它们全部缩小到它们的源分辨率，然后再将每个图层放大回去，但这太费劲了，不值得这么做。</p><h4 id="3-2-7-去振铃-Deringing"><a href="#3-2-7-去振铃-Deringing" class="headerlink" title="3.2.7 去振铃(Deringing)"></a>3.2.7 去振铃(Deringing)</h4><p>术语 “振铃” 可以指大多数边缘伪影，其中最常见的是<strong>蚊式噪声(mosquito noise)</strong> 和 <strong>边缘增强伪影(edge enhancement artifacts)</strong> 。振铃是低质量视频源中十分常见。然而，由于拍摄设备原因和糟糕的压缩方法，即使是高比特率的音乐会也很容易出现这种情况。为了解决这个问题，建议使用 <code>HQDeringmod</code> 或 <code>EdgeCleaner</code>（来自 <code>scoll</code>）等软件，我建议使用前者。这些方法主要目的是模糊和锐化边缘，然后通过边缘遮罩进行合并。它们简单易用，所以你可以自己阅读和了解它们，并熟悉它们的用途。由于 <code>rgvs.Repair</code> 可能相当激进，如果你使用这些函数，并且默认值不能产生足够好的结果，我建议你尝试修复数值。</p><p><img src="/(/img/AHDVEG-pics/Figure10.jpg" alt="Figure10"></p><p>图10：左边是源，右边是经 <code>HQDeringmod(mrad=5, msmooth=10, drrep=0)</code> 处理后的。 这是非常暴力的去振铃方式，我一般不推荐。该示例图像是来自One Ok Rock演唱会，码率37 mbps蓝光视频。</p><h4 id="3-2-8-去光晕-Dehaloing"><a href="#3-2-8-去光晕-Dehaloing" class="headerlink" title="3.2.8 去光晕(Dehaloing)"></a>3.2.8 去光晕(Dehaloing)</h4><p>光晕如其名：边缘周围的粗而亮的线条。这一问题常出现在没有正确地调整大小后。你可能也会发现，像素缩小(descaling)参数不足或对低质量视频缩小分辨率会产生明显的光晕。为了解决这个问题，你应该使用<code>havsfunc</code>的<code>DeHalo_alpha</code> 或其已蒙版处理的同类产品 <code>FineDehalo</code>。如果使用前者，你必须编写你自己的掩码，因为无掩码的去晕通常会导致糟糕的结果。关于如何写一个简单的去光晕遮罩，请看<a href="https://guide.encode.moe/encoding/masking-limiting-etc.html#example-build-a-simple-dehalo-mask">encode.moe的指南</a>。</p><p>由于 <code>FineDehalo</code> 是 <code>DeHalo_alpha</code> 的衍生函数，因此它们共享一些参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FineDehalo(src, rx=<span class="number">2.0</span>, ry=<span class="literal">None</span>, thmi=<span class="number">80</span>, thma=<span class="number">128</span>, thlimi=<span class="number">50</span>, thlima=<span class="number">100</span>,</span><br><span class="line">darkstr=<span class="number">1.0</span>, brightstr=<span class="number">1.0</span>, showmask=<span class="number">0</span>, contra=<span class="number">0.0</span>, excl=<span class="literal">True</span>,edgeproc=<span class="number">0.0</span>) <span class="comment"># ry defaults to rx</span></span><br><span class="line">DeHalo_alpha(clp, rx=<span class="number">2.0</span>, ry=<span class="number">2.0</span>, darkstr=<span class="number">1.0</span>, brightstr=<span class="number">1.0</span>, lowsens=<span class="number">50</span>,highsens=<span class="number">50</span>, ss=<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure><p>AviSynth维基上的解释足以帮助了解：<a href="http://avisynth.nl/index.php/DeHalo_alpha#Syntax_and_Parameters">http://avisynth.nl/index.php/DeHalo_alpha#Syntax_and_Parameters</a> 和 <a href="http://avisynth.nl/index.php/FineDehalo#Syntax_and_Parameters">http://avisynth.nl/index.php/FineDehalo#Syntax_and_Parameters</a> 。</p><h4 id="3-2-9-降噪-Denoising"><a href="#3-2-9-降噪-Denoising" class="headerlink" title="3.2.9 降噪(Denoising)"></a>3.2.9 降噪(Denoising)</h4><p>降噪是一个相当棘手的问题。真人电影压制从不降噪(Live action encoders will never denoise)，而动漫压制往往会降噪过度。你想对动漫进行降噪的主要原因是，它本身不应该有任何噪点，但压制时会引入噪点，而位深转换会引入抖动。前者是不需要的，而后者是需要的。你也可能会遇到像<strong>闪回(flashbacks)</strong> 过程中遇到明显的<strong>颗粒感(grains)</strong> 。去除不需要的噪点将有助于压缩码率，并消除一些轻微的抖动&#x2F;颗粒感；这对10-bit来说是很有用的，因为更平滑的视频源可以更好地进行编码并得到很好的效果，而8-bit的效果更为突出，更多的噪点可以防止出现色带等。可是，有时你可能会遇到这样的情况，你必须对压缩以外的内容进行去噪&#x2F;去纹。例如，假设你正在对一部动漫电影进行编码，其中有一个原版动漫剧集的闪回场景。动漫电影通常是1080p制作的，但大多数系列不是。因此，你可能会遇到一个带有大量颗粒的1080p升级版。在这种情况下，你会想把颗粒去掉，重新缩放，并把它合并回来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">degrained = core.knlm.KNLMeansCL(src, a=<span class="number">1</span>, h=<span class="number">1.5</span>, d=<span class="number">3</span>, s=<span class="number">0</span>, channels=<span class="string">&quot;Y&quot;</span>, device_type=<span class="string">&quot;gpu&quot;</span>, device_id=<span class="number">0</span>)</span><br><span class="line">descaled = fvf.Debilinear(degrained, <span class="number">1280</span>, <span class="number">720</span>)</span><br><span class="line">upscaled = nnedi3_rpow2(descaled, rfactor=<span class="number">2</span>).resize.Spline36(<span class="number">1920</span>, <span class="number">1080</span>).std.Merge(src, [<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">diff = core.std.MakeDiff(src, degrained, planes=[<span class="number">0</span>])</span><br><span class="line">merged = core.std.MergeDiff(upscaled, diff, planes=[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="3-2-10-颗粒化-Graining"><a href="#3-2-10-颗粒化-Graining" class="headerlink" title="3.2.10 颗粒化(Graining)"></a>3.2.10 颗粒化(Graining)</h4><p>由于**颗粒(grain)**【译者注：可以理解为有益的噪点】和 <strong>抖动(dither)</strong> 是最难压缩的东西之一，许多视频源都只包含很少的颗粒，或者已去除明显的颗粒。为了应对这种情况，或者仅压缩没有颗粒的区域，手动添加颗粒往往是有利举措的。在这种没有明显颗粒的情况下，你通常要先移除噪点，然后再重新打上颗粒。这对动画片尤其有利，因为缺乏颗粒通常会使重编码更难保持颜色渐变。<br>由于是人为地添加颗粒，我们可以选择静态颗粒。在动漫中不易被察觉，而且压缩效果更好，因此它通常是动漫内容的最佳选择。然而，这在真人电影内容中往往是相当明显的，因此静态颗粒不常被用于发布在PT的压制作品中。</p><p>标准的加噪函数，<code>grain.Add</code>，也是其他函数在用的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grained = core.grain.Add(clip, var=<span class="number">1</span>, constant=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>这里的 <code>var</code> 标志着强度。一般不会调得太高。如果你发现自己把它调得太高，它就会变得很明显，以至于你要尝试颗粒与画面相匹配，以保证颗粒不影响画面。</p><p>最著名的添加颗粒的函数是 <code>GrainFactory3</code>。这个函数允许你指定 <code>grain.Add</code> 应该如何应用于三个不同的亮度(luma)级别（亮、中、暗）。同时该函数也用 <code>resize.Bicubic</code> 对亮度平面进行缩放，以提高或降低其大小，以及通过函数中 <code>b</code>和 <code>c</code> 参数对其进行锐化，这些参数通过锐化选项来修改。由于你必须修改大小、锐度和阈值参数，所以在这里可能很难匹配。 然而，它可以产生很棒的效果，特别是对于具有更多自然颗粒的实景内容。</p><p>自动化程度更高的选择是 <code>adaptive_grain</code>。它的工作原理与 <code>GrainFactory3</code> 相似，但根据整体画面的亮度值和特定区域的亮度，对部分画面应用不同数量的颗粒。由于它没有很多设置项，所以更容易使用，而且对动漫来说效果很好。由于其考虑整个帧画面的平均亮度，因此能产生非常好的效果。</p><p>除了这两个函数之外，还有一个叫做 <code>adptvgrnMod32</code> 的组合，它将 <code>GrainFactory3</code> 的锐度和尺寸规格选项添加到 <code>adaptive_grain</code> 中。由于颗粒只被添加到一个（通常比帧小）图像的一个尺寸中，这往往是最快的函数。如果颗粒的大小不会因为不同的卢马等级而改变，就像数字生产的颗粒一样，这可能会导致比前述两个函数更好的结果。</p><p>对于那些好奇这可能是什么样子的人来说，请参考图4中《未来的未来》（Mirai (2018)）的去色带例子，因为在那个例子中，<code>adptvgrnMod</code> 被用来做纹路。</p><h4 id="3-2-11-去色块-Deblocking"><a href="#3-2-11-去色块-Deblocking" class="headerlink" title="3.2.11 去色块(Deblocking)"></a>3.2.11 去色块(Deblocking)</h4><p>解锁主要相当于平滑源，通常在上面再加一个掩码。这里最流行的函数是来自 <code>havsfunc</code>的<code>Deblock_QED</code>。其主要参数是</p><ul><li>quant1：块边缘解锁的强度。默认值是24。你可能想显著提高这个值</li><li>quant2：区块内部解锁的强度。默认值是26。同样，提高这个值可能被证明是有益的。</li></ul><p>其他流行的选项有 <code>deblock.Deblock</code>，它相当强大，但几乎总是有效；<code>dfttest.DFTT</code>，效果较弱，但仍然相当积极；以及 <code>fvf.AutoDeblock</code>，它对解锁MPEG-2源相当有用，可以应用于整个视频。另一种流行的方法是简单的去色带，因为去色块和去色带是非常类比似的。这对AVC蓝光资源来说是一个不错的选择。</p><h4 id="3-2-12-色彩校正-Detinting"><a href="#3-2-12-色彩校正-Detinting" class="headerlink" title="3.2.12 色彩校正(Detinting)"></a>3.2.12 色彩校正(Detinting)</h4><p>如果你有一个较好并但偏色的片源和一个较差且无色彩渲染的片源，而你想去掉偏色层(you’d like to<br>remove tint)，你可以通过 <code>timecube</code> 和 Dr.Dre 的颜色匹配工具来实现。首先，在该工具中添加两张参考截图，导出LUT，保存它，并通过以下方式添加它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clip = core.resize.Point(src, matrix_in_s=<span class="string">&quot;709&quot;</span>, <span class="built_in">format</span>=vs.RGBS)</span><br><span class="line">detint = core.timecube.Cube(clip, <span class="string">&quot;LUT.cube&quot;</span>)</span><br><span class="line">out = core.resize.Point(detint, matrix=<span class="number">1</span>, <span class="built_in">format</span>=vs.YUV420P16)</span><br></pre></td></tr></table></figure><p><img src="/(/img/AHDVEG-pics/Figure11.png" alt="Figure11"></p><p>图11：左为偏色的源，右为色彩纠正后的。这个例子来自于D-Z0N3压制的《你的名字》（Your name (2016)）。此帧中还进行了抗锯齿处理。</p><p>同样，如果你有所谓的**伽马(gamma)<strong>错误，或者更准确地说，</strong>双范围(double range)**压缩（将有限范围的压缩完全应用于已经过范围受限处理的片段），只需做以下工作（适用于16-bit）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out = core.std.Levels(src, gamma=<span class="number">0.88</span>, min_in=<span class="number">4096</span>, max_in=<span class="number">60160</span>, min_out=<span class="number">4096</span>, max_out=<span class="number">60160</span>, planes=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="/(/img/AHDVEG-pics/Figure12.png" alt="Figure12"></p><p>图12：左由双范围(double range)处理，右由伽马(gamma)修复处理</p><p>通常会要求的使用值为0.88，但其他伽玛值也不是不可以。如果黑色的亮度值是218而不是235，这就是必要的。不要在低位深下进行这种操作，原因如图23所示。如果色度平面也受到影响，则必须单独处理它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out = core.std.Levels(src, gamma=<span class="number">0.88</span>, min_in=<span class="number">4096</span>, max_in=<span class="number">61440</span>,min_out=<span class="number">4096</span>, max_out=<span class="number">61440</span>, planes=[<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>你也可以使用 <strong>awsmfunc</strong>中封装的<code>fixlvls</code> 函数来完成所有这些操作。 </p><p>如果你有一个色彩矩阵不正确的源，你可以用以下方法来解决这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out = core.resize.Point(src, matrix_in_s=<span class="string">&#x27;470bg&#x27;</span>, matrix_s=<span class="string">&#x27;709&#x27;</span>)</span><br></pre></td></tr></table></figure><p>‘470bg’就是通常所说的601。调整大小的原因是，矩阵转换发生在 YUV 到 RGB 转换之间，这意味着我们需要提高色度。 我们使用点调整大小，因为它是绝对的。要知道你是否应该这样做，你需要一些参考来源，最好不是网络来源。从技术上讲，你可以识别不好的颜色，并意识到有必要改变矩阵。</p><p><img src="/(/img/AHDVEG-pics/Figure13.png" alt="Figure13"></p><p>图13：使用了TayTO压制的《燃烧》（Burning (2018)）进行矩阵转换的例子。最值得关注的地方是她的粉红色胸罩和背景中的红色。</p><h4 id="3-2-13-去硬字幕和图标-Dehardsubbing-and-Delogoing"><a href="#3-2-13-去硬字幕和图标-Dehardsubbing-and-Delogoing" class="headerlink" title="3.2.13 去硬字幕和图标(Dehardsubbing and Delogoing)"></a>3.2.13 去硬字幕和图标(Dehardsubbing and Delogoing)</h4><p>虽然这个问题在动画片中特别常见，但它也发生在一些实拍片源中，而且许多音乐视频或音乐会在电视台播放时都有标识，因此值得研究如何删除硬拷贝或标识。对于logo，<code>Delogo</code> 插件非常值得考虑。要使用它，你将需要 Logo 的 <code>.lgd</code> 文件。你可以通过你最喜欢的搜索引擎简单地查找这个，应该会找到一些东西。从那里，用这个插件做什么应该是相当直接的。</p><p>最常见的去除硬字幕的方法是比较两个来源，一个有硬字幕，一个没有硬拷贝的参考来源。我推荐的函数是 <code>kagefunc33</code>的<code>hardsubmask</code> 和 <code>hardsubmask_fades</code>。前者只对有黑白字幕的资源有用，而后者可用于标识和移动字幕。两者的重要参数是扩展选项，这意味着对 <code>std.max</code> 的调用。根据你的视频源质量和检测到的数量，可能需要降低这些参数值。</p><p>我们也可以用 <code>Delogo</code> 进行类似的操作，以创建一个类似的遮罩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No example script yet</span><br></pre></td></tr></table></figure><p>一旦你准备好你的蒙版，你就可以把你的参考无硬字幕源和主源合并起来。此过程中可能需要使用一些着色处理，因为二者可能有色差。值得注意的是，这样做要远好于将好的视频源（有硬字幕）替换成差的视频源。如果你很懒，通常可以毫无问题地将这些蒙版应用到整个片段中，无需遍历整个视频来寻找硬字幕区域。</p><h4 id="3-2-14-遮罩-masking"><a href="#3-2-14-遮罩-masking" class="headerlink" title="3.2.14 遮罩(masking)"></a>3.2.14 遮罩(masking)</h4><p>【译者注：也可以叫做蒙版】这是最复杂的部分，也是动漫编码人员之外的大多数编码人员倾向于忽视的部分。遮罩有助于保护重要的细节不被你的滤镜所破坏。PT压制组使用的最常用的蒙版是二值化蒙版(binarize masks)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = core.std.ShufflePlanes(src, <span class="number">0</span>, vs.GRAY)</span><br><span class="line">mask = core.std.Binarize(y, <span class="number">5000</span>)</span><br><span class="line">merge = core.std.MaskedMerge(filtered, src, mask)</span><br></pre></td></tr></table></figure><p>在这种情况下，我假设我们是在16-bit下操作。<code>std.Binarize</code> 在这里所做的是在位深允许范围内将小于5000以下的每个值变为最小值，5000以上的每个值变为最大值。这意味着5000以上的每个像素都将从源素材中复制出来。这通常被称为**亮度遮罩(luma mask)**，通常用于解决画面暗部色带问题。</p><p>我们也可以用其中一个色度平面来做相同的事：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u = core.std.ShufflePlanes(src, <span class="number">1</span>, vs.GRAY)</span><br><span class="line">mask = core.std.Binarize(u, <span class="number">5000</span>)</span><br><span class="line">mask = core.resize.Bilinear(mask, <span class="number">1920</span>, <span class="number">1080</span>)</span><br><span class="line">mask = core.std.Inflate(mask)</span><br><span class="line">merge = core.std.MaskedMerge(filtered, src, mask)</span><br></pre></td></tr></table></figure><p>你可能已经注意到了，我进行了同样的二值化处理，但同时调整了蒙版的大小并使其膨胀。调整大小的原因显然是因为色度平面在YUV420中的分辨率较低，但有些人可能对调整工具的选择产生疑惑；使用双线性(bilinear)调整器会导致模糊，这意味着周围的像素也会受到影响，这通常对抗锯齿很有效。出于同样的原因，我增加了一个额外的 <code>std.Inflate</code>，尽管它通常对亮度平面比色度平面更有效。</p><p>更有趣和有用的蒙版是边缘蒙版和去烙印的特定蒙版。对于边缘蒙版，VapourSynth 用户有一个很大的优势，因为 <code>kgf.retinex_edgemask</code> 令人难以置信的准确，有着不可思议的结果。这个边缘遮罩获取源图像，使用 retinex 算法来提高黑暗区域的对比度和亮度，然后在 <code>Kirsch</code> 遮罩的基础上叠加一个 <code>TCanny</code> 遮罩。它的两个常见的用途是去色带和抗锯齿。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">retinex = kgf.retinex_edgemask(src)</span><br><span class="line">antialiasingmask = retinex.std.Binarize(<span class="number">65000</span>).std.Inflate()</span><br><span class="line">antialiasingmerge = core.std.MaskedMerge(src, antialiasing,antialiasingmask)</span><br><span class="line">debandmask = retinex.std.Binarize(<span class="number">7000</span>).std.Maximum().std.Inflate()</span><br><span class="line">merge = core.std.MaskedMerge(deband, src, debandmask)</span><br></pre></td></tr></table></figure><p>对于去色带，你通常希望从源文件中获取尽可能多的内容，以避免破坏细节，因此我们在低值处进行二值化，并用<code>std.Maximum</code> 和 <code>std.Inflate</code> 来增强蒙版。我们想用这个遮罩将源文件中的内容添加到去色带处理的片段中。我们可以用很多不同的方法来处理蒙版，比如把超过阈值的东西都乘以某个值 <code>(std.Expr(retinex, &quot;x 7000 &gt; x 10 * x ?&quot;)</code>，只让它最大化和膨胀，让它保持原样，或者你可以做任何想做的操作。</p><p>以一种非常不同但又相似的方式，抗锯齿通常只想应用于明显的边缘，因此我们在一个高值上进行二值化。<code>std.Inflate</code> 的调用就十分重要，它可以让我们获得应用抗锯齿的全部特效。在这里，我们想通过我们的遮罩将抗锯齿添加到源文件中。</p><p>其他有用的**边缘遮罩(edge mask)**包括：</p><ul><li><code>std.Prewitt</code></li><li><code>std.Sobel</code> 通常比Prewitt更准确，但如果不选择 <code>Kirsch</code> 或 <code>Retinex</code> 遮罩，建议同时测试这两种遮罩。</li><li><code>tcanny.TCanny</code> 这基本上是在一个模糊的片段上抛出了一个 <code>Sobel</code> 遮罩。</li><li><code>kgf.kirsch</code> 在明亮的场景中会产生与 <code>retinex_edgemask</code> 几乎相同的结果，因为其被包含其中。处理速度比其他的慢，但因它使用了更多的方法(directions)，会给你带来很好的结果。</li></ul><p>所有这些的比较可以在附录中的图24和25下找到。</p><p>虽然边缘遮罩对去色带很有帮助，但它们往往也会检测到色带本身的边缘，而且通常相当慢。很好的替代品包括 <code>GradFun3</code> 和 <code>debandmask</code>。 后者非常快，能得到更好的结果，但它经由膨胀处理。对于 <code>GradFun3</code>，你可以使用Frechdachs制作的 <code>Fag3kdb</code>。我建议尽可能使用 <code>debandmask</code>，但在较暗的场景中，边缘遮罩通常被证明能产生更好的结果，所以要做一些测试进行选择。要从 <code>GradFun3</code> 中得到一个蒙版输出，你可以这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mask = fvf.GradFun3(src, debug=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/(/img/AHDVEG-pics/Figure14.png" alt="Figure14"></p><p>图14：<code>GradFun3</code>（左上）、<code>debandmask</code>（右上）、<code>retinex_edgemask</code>（左下）和 <code>retinex_edgemask.std.Maximum().std.Inflate()</code>（右下）的比较</p><p>针对那些对使用和不使用遮罩的强力去色带之间的区别感到好奇的人，我们准备了附录中的图26作为参考，对比一个简单的边缘遮罩对去色带的影响。当使用亮度&#x2F;色度遮罩时，请不要忘记测试你是否应该在之前的遮罩上使用适当的边缘遮罩或去色带专用遮罩，因为简单的亮度遮罩会使边缘被破坏。附录中的图27和28有这方面的例子。</p><p>现在我们已经介绍了常见的蒙版，让我们继续介绍那些能帮助你操作的蒙版或创建你自己的蒙版。在这我只简单介绍，因为他们的文档写的非常详细。</p><ul><li><p><code>std.Maximum/Minimum</code>：用这个来放大或缩小你的蒙版，你可能还想应用 <code>coordinates=[0, 1, 2, 3, 4, 5, 6, 7]</code>，使用任何适宜的数值来指定周围像素的权重。</p></li><li><p><code>std.Inflate/Deflate</code>：与前面的函数类似，但它不是应用像素的最大值，而是将它们合并，这将使你得到一个轻微的边缘模糊。在大多数蒙版的末尾很有用，这样你可以在蒙版区域之间得到一个轻微的过渡。</p></li><li><p><code>std.Expr</code>：众所周知，这是一个非常复杂的函数。通过反向波兰语符号应用逻辑。如果你还不知道，可以去维基百科粗略了解。你可以用它做一些很酷的事情，比如让一些像素变亮，同时保持其他像素不变（而不是像 <code>std.Binarize</code> 那样让它们变暗）：<code>std.Expr(&quot;x 2000 &gt; x 10 * x ?&quot;)</code>。 这将使2000以上的每个值都乘以10，而其他的则保持不变。有一个很好的用例是，在数值之间：<code>std.Expr(&quot;x 10000 &gt; x 15000 &lt; and x &#123;&#125; = x 0 = ?&quot;.format(2**src.format.bits_per_sample - 1))</code>。<br>这使得10000和15000之间的每一个值都是位深所允许的最大值，其余置零，就像 <code>std.Binarize</code> 蒙版做的那样。几乎每一个函数都可以或者已经通过这种方式表达了。</p></li><li><p><code>std.MakeDiff</code> 与 <code>std.MergeDiff</code>：字如其名。用法可以是将一些东西应用于降噪的片段，然后将片段合并回来，正如在降噪部分所阐述的那样。</p></li><li><p><code>std.Convolution</code>：从本质上讲，对你的像素应用矩阵。其文档对此进行了很好的说明，如果没有理解，请仔细阅读。很多蒙版是通过卷积核定义的。 你可以用它来做很多事情，就像 <code>std.Expr</code> 一样。例如，如果你想平均一个像素周围的所有数值，那么使用 <code>std.Convolution([1, 1, 1, 1, 0, 1, 1, 1, 1])</code>。</p></li><li><p><code>std.Transpose</code>转置（即翻转）你的片段。</p></li><li><p><code>std.Turn180</code>：旋转180度。</p></li><li><p><code>std.BlankClip</code>：生成一帧纯色的画面。你可以用它来替换糟糕的背景，或者在整个影片中添加颗粒感但又不希望片尾字幕充满颗粒感的情况下使用。为了保持电视色彩范围，你可以对8-bit黑色使用 <code>std.BlankClip(src, color=[16, 128, 128])</code>。这个函数在制作基于区域的蒙版时也很有用。</p></li><li><p><code>std.Invert</code>：不言而喻。你也可以只交换通过蒙版合并片段，而不是这样做。</p></li><li><p><code>std.Limiter</code>：你可以用它将像素限制在某些数值。对维持电视色彩范围很有用（<code>std.Limiter(min=16, max=235)</code>）。</p></li><li><p><code>std.Median</code>：这将用其附近的中位值替换每个像素。大部分情况不会用到。</p></li><li><p><code>std.StackHorizontal</code> &#x2F; <code>std.StackVertical</code>：将片段上下&#x2F;左右拼叠</p></li><li><p><code>std.Merge</code>：这可以让你将两个具有给定权重的片段合并。权重为0将返回第一个片段，而1将返回第二个片段。你需要提供给函数一个片段列表和一个权重列表。下面是如何将第二个片段的色度平面合并到第一个片段的亮度平面中：<code>std.Merge([first, second], [0, 1])</code>。如果没有给出第三个值，第二个值将被应用于第三个平面。</p></li><li><p><code>std.MaskedMerge</code>：根据给定的蒙版，将第二个片段与第一个片段合并。</p></li><li><p><code>std.ShufflePlanes</code>：从一个片段中提取或合并平面。例如，你可以用 <code>std.ShufflePlanes(src, 0, vs.GRAY)</code> 获得亮度平面。</p></li></ul><p>如果你想只在某个区域应用某个东西，你可以使用封装好的函数 <code>rekt34</code> 或 <code>rekt_fast</code>。后者只将你的函数应用于给定的区域，这就加快了它的速度，对于抗锯齿和类似的慢速慢速滤镜相当有用。关于它的一些封装好的函数已经出世，比如用于抗锯齿的 <code>rektaa</code>。<code>rekt_fast lambda</code> 函数相关，所以你应该输入<code>rekt_fast(src, lambda x: core.f3kdb.Deband(x))</code>，而非 <code>core.f3kdb.Deband(src)</code>。</p><p>还有一个非常特别的函数是 <code>std.FrameEval</code>。它允许你对一个片段的每一帧进行评估，并应用一个特定于帧的函数。这很令人困惑，但在 VapourSynth 的文档中有<a href="http://www.vapoursynth.com/doc/functions/frameeval.html">一些不错的例子</a>。现在，除非你有兴趣写一个需要这样做的函数，否则你可能永远不会使用它。然而，许多函数都使用它，包括<code>kgf.adaptive_grain</code>、<code>awf.FrameInfo</code>、<code>fvf.AutoDeblock</code>、<code>TAAmbk</code>等。我能想到的一个例子是，根据帧的类型应用不同的去色带工具来展示这一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FrameTypeDeband</span>(<span class="params">n, clip</span>):</span><br><span class="line"><span class="keyword">if</span> clip.get_frame(n).props._PictType.decode() == <span class="string">&quot;B&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> core.f3kdb.Deband(clip, y=<span class="number">64</span>, cr=<span class="number">0</span>, cb=<span class="number">0</span>, grainy=<span class="number">64</span>, grainc=<span class="number">0</span>,keep_tv_range=<span class="literal">True</span>, dynamic_grain=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">elif</span> clip.get_frame(n).props._PictType.decode() == <span class="string">&quot;P&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> core.f3kdb.Deband(clip, y=<span class="number">48</span>, cr=<span class="number">0</span>, cb=<span class="number">0</span>, grainy=<span class="number">64</span>, grainc=<span class="number">0</span>,keep_tv_range=<span class="literal">True</span>, dynamic_grain=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> core.f3kdb.Deband(clip, y=<span class="number">32</span>, cr=<span class="number">0</span>, cb=<span class="number">0</span>, grainy=<span class="number">64</span>, grainc=<span class="number">0</span>,</span><br><span class="line">keep_tv_range=<span class="literal">True</span>, dynamic_grain=<span class="literal">False</span>)</span><br><span class="line">out = core.std.FrameEval(src, functools.partial(FrameTypeDeband, clip=src)</span><br></pre></td></tr></table></figure><p>如果你想了解更多，我建议阅读<a href="https://guide.encode.moe/encoding/masking-limiting-etc.html">Irrational Encoding Wizardry GitHub小组的指南</a> ，并阅读大多数你喜欢的 VapourSynth 和 Python 函数相关手册。几乎所有的优秀压制员都应该使用一些蒙版，或者针对特定的情况开发自己的蒙版。</p><h4 id="3-2-15-滤镜顺序"><a href="#3-2-15-滤镜顺序" class="headerlink" title="3.2.15 滤镜顺序"></a>3.2.15 滤镜顺序</h4><p>以错误的顺序使用滤镜会导致破坏性的或失败的过滤。正因为如此，建议使用以下顺序：</p><p><img src="/(/img/AHDVEG-pics/Figure15.png" alt="Figure15"></p><p>图15：推荐应用每个滤镜的顺序。在某些情况下，降噪可能必须先于调整大小前进行。</p><h4 id="3-2-16-脚本范例"><a href="#3-2-16-脚本范例" class="headerlink" title="3.2.16 脚本范例"></a>3.2.16 脚本范例</h4><p>Mirai (2018):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line">core = vs.get_core()</span><br><span class="line"><span class="keyword">import</span> fvsfunc <span class="keyword">as</span> fvf</span><br><span class="line"><span class="keyword">import</span> mvsfunc <span class="keyword">as</span> mvf</span><br><span class="line"><span class="keyword">import</span> kagefunc <span class="keyword">as</span> kgf</span><br><span class="line"><span class="keyword">import</span> vsTAAmbk <span class="keyword">as</span> taa</span><br><span class="line"><span class="keyword">import</span> havsfunc <span class="keyword">as</span> haf</span><br><span class="line"><span class="keyword">from</span> debandmask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rekt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> adptvgrnMod <span class="keyword">import</span> *</span><br><span class="line">src = core.ffms2.Source(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Going up to 16-bit, as I like to work in this depth.</span></span><br><span class="line">b16 = mvf.Depth(src, <span class="number">16</span>).std.Crop(top=<span class="number">20</span>, bottom=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filling the first row and filling the chroma of the first two rows.</span></span><br><span class="line">fb1 = core.fb.FillBorders(b16, top=<span class="number">1</span>)</span><br><span class="line">fb2 = core.fb.FillBorders(b16, top=<span class="number">2</span>)</span><br><span class="line">b16 = core.std.Merge(fb1, fb2, [<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Super light denoising. No point in BM3D for denoising this weak.</span></span><br><span class="line">b16 = core.knlm.KNLMeansCL(b16, a=<span class="number">3</span>, h=<span class="number">0.1</span>, d=<span class="number">2</span>, device_type=<span class="string">&#x27;gpu&#x27;</span>,</span><br><span class="line">device_id=<span class="number">0</span>, channels=<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">b16 = core.knlm.KNLMeansCL(b16, a=<span class="number">2</span>, h=<span class="number">0.2</span>, d=<span class="number">1</span>, device_type=<span class="string">&#x27;gpu&#x27;</span>,</span><br><span class="line">device_id=<span class="number">0</span>, channels=<span class="string">&#x27;UV&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Soft dehalo.</span></span><br><span class="line">b16 = haf.FineDehalo(b16, rx=<span class="number">2.0</span>, thmi=<span class="number">80</span>, thma=<span class="number">128</span>, thlimi=<span class="number">25</span>, thlima=<span class="number">100</span>,darkstr=<span class="number">0.5</span>, brightstr=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dirty lines during credits. Cleaning edges, then halos.</span></span><br><span class="line">cf = core.std.Crop(b16, left=<span class="number">94</span>, top=<span class="number">292</span>, right=<span class="number">1018</span>,bottom=<span class="number">290</span>).fb.FillBorders(top=<span class="number">1</span>, left=<span class="number">1</span>,</span><br><span class="line">bottom=<span class="number">1</span>).edgefixer.ContinuityFixer(left=[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], top=[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],right=<span class="number">2</span>, bottom= [<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>], radius=<span class="number">15</span>)</span><br><span class="line">fb = rekt_fast(b16, <span class="keyword">lambda</span> x: core.fb.FillBorders(x, left=<span class="number">2</span>, top=<span class="number">2</span>,right=<span class="number">1</span>, bottom=<span class="number">2</span>).std.Merge(cf, [<span class="number">1</span>,<span class="number">0</span>]), left=<span class="number">94</span>, top=<span class="number">292</span>, right=<span class="number">1018</span>,bottom=<span class="number">290</span>)</span><br><span class="line">dh = rekt_fast(fb, <span class="keyword">lambda</span> x: haf.FineDehalo(x, rx=<span class="number">2.0</span>, thmi=<span class="number">80</span>, thma=<span class="number">128</span>,thlimi=<span class="number">25</span>, thlima=<span class="number">100</span>, darkstr=<span class="number">0.5</span>, brightstr=<span class="number">2.3</span>), left=<span class="number">94</span>, top=<span class="number">292</span>,right=<span class="number">1018</span>, bottom=<span class="number">290</span>)</span><br><span class="line">sf = fvf.rfs(b16, dh, <span class="string">&quot;[1434 2296]&quot;</span>)</span><br><span class="line">cf = core.std.Crop(b16, left=<span class="number">94</span>, top=<span class="number">302</span>, right=<span class="number">1018</span>,bottom=<span class="number">300</span>).fb.FillBorders(left=<span class="number">1</span>).edgefixer.ContinuityFixer(left=[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], top=<span class="number">1</span>, right=<span class="number">1</span>, bottom= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], radius=<span class="number">5</span>)</span><br><span class="line">fb = rekt_fast(b16, <span class="keyword">lambda</span> x: core.fb.FillBorders(x, left=<span class="number">2</span>, top=<span class="number">1</span>,right=<span class="number">1</span>, bottom=<span class="number">2</span>).std.Merge(cf, [<span class="number">1</span>,<span class="number">0</span>]), left=<span class="number">94</span>, top=<span class="number">302</span>, right=<span class="number">1018</span>,bottom=<span class="number">300</span>)</span><br><span class="line">dh = rekt_fast(fb, <span class="keyword">lambda</span> x: haf.FineDehalo(x, rx=<span class="number">2.0</span>, thmi=<span class="number">80</span>, thma=<span class="number">128</span>,thlimi=<span class="number">25</span>, thlima=<span class="number">100</span>, darkstr=<span class="number">0.5</span>, brightstr=<span class="number">1.5</span>), left=<span class="number">94</span>, top=<span class="number">302</span>,right=<span class="number">1018</span>, bottom=<span class="number">300</span>)</span><br><span class="line">sf = fvf.rfs(sf, dh, <span class="string">&quot;[133711 135117] [135360 136057] [136143 137216] [137282 138288] [138377 138757] [138820 140782]&quot;</span>)</span><br><span class="line">cf = core.std.Crop(b16, left=<span class="number">94</span>, top=<span class="number">302</span>, right=<span class="number">1018</span>,bottom=<span class="number">300</span>).fb.FillBorders(left=<span class="number">1</span>).edgefixer.ContinuityFixer(left=[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], top=<span class="number">1</span>, right=<span class="number">1</span>, bottom= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], radius=<span class="number">5</span>)</span><br><span class="line">fb = rekt_fast(b16, <span class="keyword">lambda</span> x: core.fb.FillBorders(x, left=<span class="number">2</span>, top=<span class="number">1</span>,right=<span class="number">1</span>, bottom=<span class="number">2</span>).std.Merge(cf, [<span class="number">1</span>,<span class="number">0</span>]), left=<span class="number">94</span>, top=<span class="number">302</span>, right=<span class="number">1018</span>,bottom=<span class="number">300</span>)</span><br><span class="line">dh = rekt_fast(fb, <span class="keyword">lambda</span> x: haf.FineDehalo(x, rx=<span class="number">2.0</span>, thmi=<span class="number">80</span>, thma=<span class="number">128</span>,thlimi=<span class="number">25</span>, thlima=<span class="number">100</span>, darkstr=<span class="number">0.5</span>, brightstr=<span class="number">1.5</span>).f3kdb.Deband(y=<span class="number">48</span>,cb=<span class="number">0</span>, cr=<span class="number">0</span>, <span class="built_in">range</span>=<span class="number">5</span>, grainy=<span class="number">64</span>, grainc=<span class="number">32</span>, output_depth=<span class="number">16</span>,keep_tv_range=<span class="literal">True</span>), left=<span class="number">94</span>, top=<span class="number">302</span>, right=<span class="number">1018</span>, bottom=<span class="number">300</span>)</span><br><span class="line">sf = fvf.rfs(sf, dh, <span class="string">&quot;[135118 135296] [138305 138376]&quot;</span>)</span><br><span class="line">mask = core.std.ShufflePlanes(b16, <span class="number">0</span>, vs.GRAY).std.Trim(<span class="number">2400</span>, <span class="number">2401</span>) *src.num_frames</span><br><span class="line">mask = rekt(mask, core.std.BlankClip(b16, <span class="number">1920</span>, <span class="number">1038</span>, <span class="built_in">format</span>=vs.GRAY16),left=<span class="number">666</span>, top=<span class="number">292</span>, right=<span class="number">1114</span>, bottom=<span class="number">744</span>)</span><br><span class="line">dh_lim = core.std.MaskedMerge(dh, b16, mask)</span><br><span class="line">sf = fvf.rfs(sf, dh_lim, <span class="string">&quot;[2297 2329]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4:3 cropped scene. Replacing borders with my own black borders in order to keep them from having a different shade of black.</span></span><br><span class="line">crop = core.std.Crop(b16, left=<span class="number">254</span>, right=<span class="number">254</span>)</span><br><span class="line">fb = core.fb.FillBorders(crop, left=<span class="number">1</span>, right=<span class="number">1</span>).std.Merge(crop,[<span class="number">1</span>,<span class="number">0</span>]).edgefixer.ContinuityFixer(left=<span class="number">1</span>, right=<span class="number">1</span>, top=<span class="number">0</span>, bottom=<span class="number">0</span>,</span><br><span class="line">radius=<span class="number">50</span>).std.AddBorders(left=<span class="number">254</span>, right=<span class="number">254</span>, color=[<span class="number">4096</span>, <span class="number">32768</span>,<span class="number">32768</span>])</span><br><span class="line">sf = fvf.rfs(sf, fb, <span class="string">&quot;[33448 34196]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Placebo edgemask binarized so we only get the obvious edges, then</span></span><br><span class="line">inflated.</span><br><span class="line">mask = kgf.retinex_edgemask(b16).std.Binarize(<span class="number">65500</span>).std.Maximum().std.Inflate()</span><br><span class="line"><span class="comment"># Strong aliasing.</span></span><br><span class="line">aa = taa.TAAmbk(b16, aatype=<span class="number">2</span>, mtype=<span class="number">0</span>, opencl=<span class="literal">False</span>)</span><br><span class="line">aa = core.std.MaskedMerge(b16, aa, mask)</span><br><span class="line">sf = fvf.ReplaceFramesSimple(sf, aa, mappings=<span class="string">&quot;[4225 4727] [18340 18387] [129780 131148]&quot;</span>)</span><br><span class="line"><span class="comment"># Mild aliasing.</span></span><br><span class="line">aa = taa.TAAmbk(b16, aatype=<span class="number">3</span>, mtype=<span class="number">0</span>, opencl=<span class="literal">False</span>)</span><br><span class="line">aa = core.std.MaskedMerge(b16, aa, mask)</span><br><span class="line">sf = fvf.ReplaceFramesSimple(sf, aa, mappings=<span class="string">&quot;[55394 55451] [55649 55782] [120840 120901]&quot;</span>)</span><br><span class="line"><span class="comment"># Very strong aliasing.</span></span><br><span class="line">aa = taa.TAAmbk(b16, aatype=<span class="number">6</span>, mtype=<span class="number">0</span>, repair=<span class="number">16</span>)</span><br><span class="line">aa = core.std.MaskedMerge(b16, aa, mask)</span><br><span class="line">sf = fvf.ReplaceFramesSimple(sf, aa, mappings=<span class="string">&quot;[107405 107462]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Strong aliasing that I tried to fix with a terrible mask.</span></span><br><span class="line">mask = kgf.retinex_edgemask(b16).std.Binarize(<span class="number">65500</span>).std.Maximum().std.Minimum(coordinates=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]).std.Deflate().std.Deflate()</span><br><span class="line">aa = taa.TAAmbk(b16, aatype=<span class="number">6</span>, mtype=<span class="number">0</span>, opencl=<span class="literal">False</span>)</span><br><span class="line">aa = core.std.MaskedMerge(b16, aa, mask)</span><br><span class="line">sf = fvf.ReplaceFramesSimple(sf, aa, mappings=<span class="string">&quot;[55510 55580]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># I simply marked this, it would require a lot of work, so I just decidedagainst doing this.</span></span><br><span class="line"><span class="comment">#sf = fvf.rfs(sf, ?, &quot;[65880 66478]&quot;)</span></span><br><span class="line"><span class="comment">#sf = fvf.rfs(sf, ?, &quot;[120902 121051] [121790 121905] [122388 122528] [123038 123153] [126686 126812] [128740 128953]&quot;)  #Banding? [121063 121095] [121906 121968] [122530 122576]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Graining an area with no grain.</span></span><br><span class="line">gr = adptvgrnMod(b16, strength=<span class="number">2.5</span>, size=<span class="number">1.25</span>, sharp=<span class="number">35</span>, static=<span class="literal">False</span>,</span><br><span class="line">luma_scaling=<span class="number">3</span>, grain_chroma=<span class="literal">False</span>)</span><br><span class="line">sf = fvf.rfs(sf, gr, <span class="string">&quot;[120840 120901]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debanding with the standard debandmask. All of these debanding areas had almost no grain, so I added some on top.</span></span><br><span class="line">dbmask = debandmask(b16, lo=<span class="number">6144</span>, hi=<span class="number">12288</span>, lothr=<span class="number">320</span>, hithr=<span class="number">384</span>, mrad=<span class="number">2</span>)</span><br><span class="line">deband = core.f3kdb.Deband(b16, y=<span class="number">34</span>, cb=<span class="number">0</span>, cr=<span class="number">0</span>, <span class="built_in">range</span>=<span class="number">10</span>, grainy=<span class="number">16</span>,grainc=<span class="number">8</span>, output_depth=<span class="number">16</span>, keep_tv_range=<span class="literal">True</span>)</span><br><span class="line">merge = core.std.MaskedMerge(deband, b16, dbmask)</span><br><span class="line">merge = adptvgrnMod(merge, strength=<span class="number">2</span>, size=<span class="number">1.5</span>, sharp=<span class="number">25</span>, static=<span class="literal">False</span>,luma_scaling=<span class="number">5</span>, grain_chroma=<span class="literal">True</span>)</span><br><span class="line">sf = fvf.rfs(sf, merge, <span class="string">&quot;[3174 3254] [3540 3655] [7463 7749] [41056 41597] [63482 64106] [91033 91164]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debanding with retinex.</span></span><br><span class="line">mask = kgf.retinex_edgemask(b16).std.Maximum().std.Inflate().std.Maximum().std.Inflate()</span><br><span class="line">deband = core.f3kdb.Deband(b16, y=<span class="number">48</span>, cb=<span class="number">48</span>, cr=<span class="number">48</span>, <span class="built_in">range</span>=<span class="number">15</span>, grainy=<span class="number">16</span>, grainc=<span class="number">16</span>, output_depth=<span class="number">16</span>, keep_tv_range=<span class="literal">True</span>)</span><br><span class="line">merge = core.std.MaskedMerge(deband, b16, mask)</span><br><span class="line">merge = adptvgrnMod(merge, strength=<span class="number">2.2</span>, size=<span class="number">1.25</span>, sharp=<span class="number">15</span>, static=<span class="literal">False</span>,luma_scaling=<span class="number">5</span>, grain_chroma=<span class="literal">True</span>)</span><br><span class="line">sf = fvf.rfs(sf, merge, <span class="string">&quot;[77952 78034] [93358 93443]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debanding with gradfun3 mask.</span></span><br><span class="line">deband = Fag3kdb(b16, thry=<span class="number">54</span>, thrc=<span class="number">54</span>, radiusy=<span class="number">10</span>, radiusc=<span class="number">6</span>, grainy=<span class="number">32</span>, grainc=<span class="number">16</span>)</span><br><span class="line">sf = fvf.rfs(sf, deband, <span class="string">&quot;[25 263]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dithering back to 8-bit.</span></span><br><span class="line">final = mvf.Depth(sf, <span class="number">8</span>, dither=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replacing black areas with a simple black screen in order to keep slight variations from happening. Usually not necessary, though.</span></span><br><span class="line">blank = core.std.BlankClip(src.std.Crop(top=<span class="number">20</span>, bottom=<span class="number">22</span>), <span class="number">1920</span>, <span class="number">1038</span>, color=[<span class="number">16</span>, <span class="number">128</span>, <span class="number">128</span>])</span><br><span class="line">final = fvf.rfs(final, blank, <span class="string">&quot;[0 24] [1352 1433] [58945 59016] [75563 75633] [78351 78421] [81130 81141] [81261 81272] [93967 94062 [99889 99959] [118093 118147] [140928 140951]&quot;</span>)</span><br><span class="line"></span><br><span class="line">final.set_output()</span><br></pre></td></tr></table></figure><p>Sword Art Online: The Movie - Ordinal Scale (2017): </p><blockquote><p>Sword.Art.Online.The.Movie.Ordinal.Scale.2017.ITA.1080p.BluRay.AC3.x264.D-Z0N3</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line">core = vs.get_core()</span><br><span class="line"><span class="keyword">import</span> fvsfunc <span class="keyword">as</span> fvf</span><br><span class="line"><span class="keyword">import</span> kagefunc <span class="keyword">as</span> kgf</span><br><span class="line"><span class="keyword">import</span> havsfunc <span class="keyword">as</span> hvf</span><br><span class="line"><span class="keyword">import</span> vsTAAmbk <span class="keyword">as</span> taa</span><br><span class="line"><span class="keyword">import</span> fag3kdb</span><br><span class="line"><span class="keyword">import</span> nnedi3_rpow2 <span class="keyword">as</span> nnrp</span><br><span class="line"></span><br><span class="line">src = core.ffms2.Source(<span class="string">&quot;&quot;</span>)</span><br><span class="line">resize = src <span class="comment"># I called this and was too lazy to change it.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rescaling a flashback with grain.</span></span><br><span class="line">dn = core.knlm.KNLMeansCL(src, d=<span class="number">3</span>, a=<span class="number">1</span>, s=<span class="number">0</span>, h=<span class="number">1.5</span>, device_type=<span class="string">&quot;gpu&quot;</span>,</span><br><span class="line">device_id=<span class="number">1</span>, channels=<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">diff = core.std.MakeDiff(src, dn, planes=[<span class="number">0</span>])</span><br><span class="line">ds = fvf.Debicubic(dn, <span class="number">1280</span>, <span class="number">720</span>)</span><br><span class="line">us = nnrp.nnedi3_rpow2(ds, <span class="number">2</span>, <span class="number">1920</span>, <span class="number">1080</span>, kernel=<span class="string">&quot;Spline36&quot;</span>)</span><br><span class="line">merged = core.std.MergeDiff(us, diff, planes=[<span class="number">0</span>])</span><br><span class="line">src = fvf.ReplaceFramesSimple(resize, merged, mappings=<span class="string">&quot;[3418 3507] [3508 5145] [75916 76205] [76253 76323] [77720 77790]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rescaling a flashback without grain.</span></span><br><span class="line">ds = fvf.DescaleAA(dn, <span class="number">1280</span>, <span class="number">720</span>).std.MergeDiff(diff, planes=[<span class="number">0</span>])</span><br><span class="line">src = fvf.ReplaceFramesSimple(src, ds, mappings=<span class="string">&quot;[3298 3417]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Going to 16-bit. The above parts are in 8-bit because I was scared of performance issues.</span></span><br><span class="line">src = fvf.Depth(src, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># I like to establish a separate variable for 16-bit and leave src for 8-bit, but didn&#x27;t do that here. This is so I could copy-paste commands.</span></span><br><span class="line">b16 = src</span><br><span class="line"></span><br><span class="line"><span class="comment"># Anti-aliasing. As you might be able to tell, the crop and stacking could</span></span><br><span class="line">now be replaced by rekt_fast <span class="keyword">or</span> simply rektaa.</span><br><span class="line">aa = core.std.Crop(b16, left=<span class="number">400</span>, right=<span class="number">1006</span>)</span><br><span class="line">aa = taa.TAAmbk(aa, aatype=-<span class="number">3</span>, preaa=-<span class="number">1</span>, strength=<span class="number">0</span>, mtype=<span class="number">2</span>, opencl=<span class="literal">True</span>)</span><br><span class="line">left = core.std.Crop(b16, right=<span class="number">1920</span> - <span class="number">400</span>)</span><br><span class="line">right = core.std.Crop(b16, left=<span class="number">1920</span> - <span class="number">1006</span>)</span><br><span class="line">aa = core.std.StackHorizontal([left, aa, right]).std.Crop(top=<span class="number">208</span>, bottom=<span class="number">456</span>)</span><br><span class="line">top = core.std.Crop(b16, bottom=<span class="number">1080</span> - <span class="number">208</span>)</span><br><span class="line">bottom = core.std.Crop(b16, top=<span class="number">1080</span> - <span class="number">456</span>)</span><br><span class="line">aa = core.std.StackVertical([top, aa, bottom])</span><br><span class="line">sfaa = fvf.ReplaceFramesSimple(b16, aa, mappings=<span class="string">&quot;[42583 42813] [58812 59050] [65211 65281] [92132 92274]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debanding with a standard ass mask.</span></span><br><span class="line">db = b16.f3kdb.Deband( <span class="built_in">range</span>=<span class="number">15</span>, y=<span class="number">60</span>, cb=<span class="number">60</span>, cr=<span class="number">60</span>, grainy=<span class="number">22</span>, grainc=<span class="number">22</span>,</span><br><span class="line">output_depth=<span class="number">16</span>)</span><br><span class="line">mask = kgf.retinex_edgemask(b16).std.Inflate()</span><br><span class="line">merged = core.std.MaskedMerge(db, b16, mask)</span><br><span class="line">sfdb = fvf.ReplaceFramesSimple(sfaa, merged, mappings=<span class="string">&quot;[3508 3603] [17600 17706] [41865 42113] [76922 77488] [78444 78598] [81054 81280] [150853 150933] [152057 152288] [152324 152424] [152443 152508] [152521 152686] [171669 172433] [172561 172643] [170283 170557]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debanding values that were outside of the range of 10000-25000.</span></span><br><span class="line">db = b16.f3kdb.Deband(<span class="built_in">range</span>=<span class="number">10</span>, y=<span class="number">160</span>, cb=<span class="number">0</span>, cr=<span class="number">0</span>, grainy=<span class="number">28</span>, grainc=<span class="number">0</span>, output_depth=<span class="number">16</span>)</span><br><span class="line">mask = core.std.ShufflePlanes(b16, <span class="number">0</span>, vs.GRAY).std.Expr(<span class="string">&quot;x 10000 &lt; x 25000 &gt; or x 10 * x 10 / ?&quot;</span>)</span><br><span class="line">merged = core.std.MaskedMerge(db, b16, mask)</span><br><span class="line">sfdb = fvf.ReplaceFramesSimple(sfdb, merged, mappings=<span class="string">&quot; [96133 96273]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fixing dirty lines during credits. Again, rekt_fast would&#x27;ve been useful</span></span><br><span class="line">back then.</span><br><span class="line">bot = core.std.Crop(sfdb, top=<span class="number">1080</span> - <span class="number">330</span>)</span><br><span class="line">middle = core.std.Crop(sfdb, top=<span class="number">318</span>,bottom=<span class="number">330</span>).edgefixer.ContinuityFixer(top=<span class="number">1</span>, bottom=<span class="number">1</span>, left=<span class="number">0</span>, right=<span class="number">0</span>, radius=<span class="number">5</span>)</span><br><span class="line">fb = core.fb.FillBorders(middle, top=<span class="number">2</span>, bottom=<span class="number">2</span>)</span><br><span class="line">middle = core.std.Merge(fb, middle, [<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">top = core.std.Crop(sfdb, bottom=<span class="number">1080</span> - <span class="number">318</span>)</span><br><span class="line">merge = core.std.StackVertical([top, middle, bot])</span><br><span class="line">right = core.std.Crop(merge, left=<span class="number">1920</span> - <span class="number">134</span>)</span><br><span class="line">middle = core.std.Crop(merge, left=<span class="number">1018</span>, right=<span class="number">134</span>).edgefixer.ContinuityFixer(left=<span class="number">2</span>, right=<span class="number">2</span>, top=<span class="number">0</span>, bottom=<span class="number">0</span>, radius=<span class="number">5</span>)</span><br><span class="line">fb = core.fb.FillBorders(middle, left=<span class="number">2</span>, right=<span class="number">2</span>)</span><br><span class="line">middle = core.std.Merge(fb, middle, [<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">left = core.std.Crop(merge, right=<span class="number">1920</span> - <span class="number">1018</span>)</span><br><span class="line">merge = core.std.StackHorizontal([left, middle, right])</span><br><span class="line">sfc = fvf.ReplaceFramesSimple(sfdb, merge, mappings=<span class="string">&quot;[165067 167168] [167403 169466] [169842 170557] [170558 171041]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dithering the result back to 8-bit.</span></span><br><span class="line">final = fvf.Depth(sfc, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">final.set_output()</span><br></pre></td></tr></table></figure><p>BTS - Blood, Sweat and Tears (2016)</p><blockquote><p>BTS - Blood, Sweat &amp; Tears 2016 1080p ProRes FLAC 2.0 AVC x264 10-bit - A.R.M.Y</p></blockquote><p>对<code>bandmask</code>的快问快答：</p><p>边缘遮罩通过寻找梯度大的区域来工作，所以最简单的卷积是<br>$$<br>\left[ \begin{matrix} 0 &amp; 0 &amp; 0\ 1 &amp; 0 &amp; -1 \ 0 &amp; 0 &amp; 0\end{matrix} \right]<br>$$<br>意思是我们要检查左边的像素和右边的像素之间的差异。 我们可以移动减法，通过检查与原始像素的差异来识别没有颗粒的区域。<br>$$<br>\left[ \begin{matrix} 0 &amp; 0 &amp; 0\ 1 &amp; -1 &amp; 0 \ 0 &amp; 0 &amp; 0\end{matrix} \right]<br>$$<br>不过，这并不是这里发生的事情；我们是在卷积的多次迭代后进行减法，所以我们得到了更多像素的梯度。然后我们将其二值化，最小化以去除噪声(noise)，然后再次最大化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vapoursynth <span class="keyword">as</span> vs</span><br><span class="line">core = vs.get_core()</span><br><span class="line"><span class="keyword">import</span> fvsfunc <span class="keyword">as</span> fvf</span><br><span class="line"><span class="keyword">import</span> kagefunc <span class="keyword">as</span> kgf</span><br><span class="line"><span class="keyword">import</span> havsfunc <span class="keyword">as</span> hvf</span><br><span class="line"><span class="keyword">from</span> adptvgrnMod <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rekt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> bandmask <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load, go to high bit depth, and crop.</span></span><br><span class="line">src = core.ffms2.Source(<span class="string">&quot;Blood, Sweat &amp; Tears ����_BTS �����-187617728.mov&quot;</span>)</span><br><span class="line">hbd = fvf.Depth(src, <span class="number">16</span>)</span><br><span class="line">crp = hbd.std.Crop(top=<span class="number">134</span>, bottom=<span class="number">134</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># One scene has four lines missing at the bottom and dirty lines elsewhere.</span></span><br><span class="line"><span class="comment"># Every plane was fixed individually.</span></span><br><span class="line">acr = crp.std.Crop(bottom=<span class="number">4</span>)</span><br><span class="line">ycr = acr.std.ShufflePlanes(<span class="number">0</span>, vs.GRAY)</span><br><span class="line">ucr = acr.std.ShufflePlanes(<span class="number">1</span>, vs.GRAY)</span><br><span class="line">vcr = acr.std.ShufflePlanes(<span class="number">2</span>, vs.GRAY)</span><br><span class="line">ufx = rektlvls(ucr, [ucr.height - <span class="number">2</span>], [-<span class="number">6.5</span>], prot_val=<span class="number">0</span>).fb.FillBorders(top=<span class="number">1</span>, mode=<span class="string">&quot;fillmargins&quot;</span>).cf.ContinuityFixer(bottom=<span class="number">1</span>, radius=<span class="number">3</span>)</span><br><span class="line">vfx = vcr.cf.ContinuityFixer(bottom=<span class="number">3</span>, radius=<span class="number">5</span>).fb.FillBorders(bottom=<span class="number">2</span>, top=<span class="number">1</span>, mode=<span class="string">&quot;fillmargins&quot;</span>)</span><br><span class="line">lvl = rektlvls(ycr, [ycr.height - <span class="number">2</span>, ycr.height - <span class="number">3</span>], [-<span class="number">30</span>, -<span class="number">6</span>], prot_val=<span class="number">10</span>)</span><br><span class="line">fmg = lvl.cf.ContinuityFixer(bottom=<span class="number">2</span>, radius=<span class="number">3</span>).fb.FillBorders(bottom=<span class="number">1</span>, top=<span class="number">1</span>, mode=<span class="string">&quot;fillmargins&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Merge fixes and change subsampling to 4:2:0, then add borders.</span></span><br><span class="line">acr = core.std.ShufflePlanes([fmg, ufx, vfx], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], vs.YUV)</span><br><span class="line">rsz = acr.resize.Spline36(<span class="built_in">format</span>=vs.YUV420P16)</span><br><span class="line">adb = rsz.std.AddBorders(bottom=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rest of the video only has one line missing top and bottom. Fixed and subsampling changed.</span></span><br><span class="line">fmg = crp.fb.FillBorders(top=<span class="number">1</span>, bottom=<span class="number">1</span>, mode=<span class="string">&quot;fillmargins&quot;</span>)</span><br><span class="line">rsz = fmg.resize.Spline36(<span class="built_in">format</span>=vs.YUV420P16)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Spliced the fix in with the rest.</span></span><br><span class="line">trm = rsz.std.Trim(<span class="number">0</span>, <span class="number">5232</span>) + adb.std.Trim(<span class="number">5233</span>, <span class="number">5260</span>) + rsz.std.Trim(<span class="number">5261</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Luma debanding during a couple scenes with graining.</span></span><br><span class="line">dbn = trm.f3kdb.Deband(y=<span class="number">64</span>, cr=<span class="number">0</span>, cb=<span class="number">0</span>, <span class="built_in">range</span>=<span class="number">6</span>, grainy=<span class="number">0</span>, grainc=<span class="number">0</span>,</span><br><span class="line">output_depth=<span class="number">16</span>)</span><br><span class="line">msk = kgf.retinex_edgemask(trm).std.Binarize(<span class="number">11000</span>).std.Maximum().std.Inflate()</span><br><span class="line">mrg = dbn.std.MaskedMerge(trm, msk)</span><br><span class="line">grn = adptvgrnMod(mrg, size=<span class="number">1.4</span>, sharp=<span class="number">90</span>, luma_scaling=<span class="number">4</span>, grainer=<span class="keyword">lambda</span> x: core.grain.Add(x, var=<span class="number">1.6</span>, uvar=<span class="number">1.0</span>, constant=<span class="literal">False</span>))</span><br><span class="line">snf = fvf.rfs(trm, grn, <span class="string">&quot;[1612 1616] [7779 7794]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Some blocking was fixed with bandmask, since no edges were present.</span></span><br><span class="line">bmk = bandmask(trm, <span class="number">200</span>).std.Crop(top=<span class="number">500</span>).std.AddBorders(top=<span class="number">500</span>)</span><br><span class="line">grn = adptvgrnMod(dbn, size=<span class="number">1.3</span>, sharp=<span class="number">90</span>, luma_scaling=<span class="number">4</span>, grainer=<span class="keyword">lambda</span> x: core.grain.Add(x, var=<span class="number">.4</span>, uvar=<span class="number">.3</span>, constant=<span class="literal">False</span>))</span><br><span class="line">mrg = trm.std.MaskedMerge(grn, bmk)</span><br><span class="line">snf = fvf.rfs(snf, mrg, <span class="string">&quot;[7964 7980] [8009 8018]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># One scene has missing grain, so used bandmask and adptvgrnMod to fix this.</span></span><br><span class="line"><span class="comment"># I got frustrated and started copy pasting random Maximize/Inflate calls.</span></span><br><span class="line">bmk = bandmask(trm, thr=<span class="number">300</span>)</span><br><span class="line">lmk = trm.std.ShufflePlanes(<span class="number">0</span>,</span><br><span class="line">vs.GRAY).std.Binarize(<span class="number">55000</span>).std.Maximum().std.Maximum().std.Maximum().std.Maximum().std.Maximum()</span><br><span class="line">gmk = core.std.Expr([bmk, lmk], <span class="string">&quot;x y -&quot;</span>).std.Crop(bottom=<span class="number">225</span>,top=<span class="number">100</span>).std.AddBorders(bottom=<span class="number">225</span>, top=<span class="number">100</span>).std.Maximum().std.Inflate().std.Maximum().std.Inflate().std.Maximum().std.Maximum().std.Maximum().std.Maximum().std.Maximum().std.Maximum().std.Inflate().std.Inflate().std.Inflate().std.Inflate().std.Inflate().std.Inflate().std.Inflate()</span><br><span class="line">gmk = kgf.iterate(gmk, core.std.Maximum, <span class="number">3</span>)</span><br><span class="line">grn = adptvgrnMod(trm, size=<span class="number">1.2</span>, sharp=<span class="number">80</span>, luma_scaling=<span class="number">1</span>, grainer=<span class="keyword">lambda</span>  x: core.grain.Add(x, var=<span class="number">1.4</span>, uvar=<span class="number">1.0</span>, constant=<span class="literal">False</span>))</span><br><span class="line">mrg = core.std.MaskedMerge(trm, grn, gmk)</span><br><span class="line">snf = fvf.rfs(snf, mrg, <span class="string">&quot;[7579 7778]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dehalo on one scene.</span></span><br><span class="line">fdh = hvf.FineDehalo(trm)</span><br><span class="line">grn = adptvgrnMod(fdh, size=<span class="number">1.2</span>, sharp=<span class="number">80</span>, luma_scaling=<span class="number">8</span>, grainer=<span class="keyword">lambda</span> x: core.grain.Add(x, var=<span class="number">.8</span>, uvar=<span class="number">.5</span>, constant=<span class="literal">False</span>))</span><br><span class="line">snf = fvf.rfs(snf, grn, <span class="string">&quot;[6523 6591]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dither to output depth.</span></span><br><span class="line">out = fvf.Depth(snf, <span class="number">10</span>)</span><br><span class="line">out.set_output()</span><br></pre></td></tr></table></figure><p>其他可供阅读的有趣脚本：</p><ul><li><a href="https://gist.github.com/blaze077/9025d2c1a9a59d63f0168e5fd6f9cd31">https://gist.github.com/blaze077/9025d2c1a9a59d63f0168e5fd6f9cd31</a> Kaiji episode 1 by blaze077</li><li><a href="https://pastebin.com/q469qUcU">https://pastebin.com/q469qUcU</a> How to IVTC by eXmendiC</li><li><a href="https://github.com/Beatrice-Raws/encode-scripts">https://github.com/Beatrice-Raws/encode-scripts</a> Various scripts by BeatriceRaws</li><li><a href="https://github.com/LightArrowsEXE/Encoding-Projects">https://github.com/LightArrowsEXE/Encoding-Projects</a> Various scripts by LightArrowsEXE</li><li><a href="https://git.kageru.moe/kageru/vs-scripts/src/branch/master/abyss1.py">https://git.kageru.moe/kageru/vs-scripts/src/branch/master/abyss1.py</a> Made in Abyss episode 1 by kageru</li><li><a href="https://pastebin.com/JB8aEGgf">https://pastebin.com/JB8aEGgf</a> Something by Nginx from TnP</li><li><a href="https://github.com/Ichunjo/encode-scripts">https://github.com/Ichunjo/encode-scripts</a> - Various scripts by Vardë</li><li><a href="https://git.concertos.live/OpusGang/EncodeScripts">https://git.concertos.live/OpusGang/EncodeScripts</a> - Various crowdsourced scripts</li></ul><h4 id="3-2-17-论坛和博客文章"><a href="#3-2-17-论坛和博客文章" class="headerlink" title="3.2.17 论坛和博客文章"></a>3.2.17 论坛和博客文章</h4><p>公开：</p><ul><li>降低分辨率： <a href="https://guide.encode.moe/encoding/descaling.html">https://guide.encode.moe/encoding/descaling.html</a></li><li>遮罩： <a href="https://guide.encode.moe/encoding/masking-limiting-etc.html">https://guide.encode.moe/encoding/masking-limiting-etc.html</a></li><li>自适应加噪：<a href="https://blog.kageru.moe/legacy/adaptivegrain.html">https://blog.kageru.moe/legacy/adaptivegrain.html</a></li><li>Krisch和Retinex的边缘遮罩：<a href="https://blog.kageru.moe/legacy/edgemasks.html">https://blog.kageru.moe/legacy/edgemasks.html</a></li><li>降噪工具： <a href="https://blog.kageru.moe/legacy/edgemasks.html">https://blog.kageru.moe/legacy/edgemasks.html</a></li></ul><p>私藏：</p><ul><li>色带遮罩的解析：<a href="https://i.fiery.me/Atwjs.png">https://i.fiery.me/Atwjs.png</a></li><li><code>adptvgrnMod</code> 的噪点参数解析：<a href="https://i.fiery.me/bELRN.png">https://i.fiery.me/bELRN.png</a></li><li>自动去色带（不使用 <code>banddtct</code> 的情况下）： <a href="https://awesome-hd.me/forums.php?action=viewthread&threadid=27426&post=4#post20150336">https://awesome-hd.me/forums.php?action=viewthread&amp;threadid=27426&amp;post=4#post20150336</a></li><li>聚焦于**双范围(double range)**压缩：<a href="https://passthepopcorn.me/forums.php?action=viewthread&threadid=9197&postid=1622921#post1622921">https://passthepopcorn.me/forums.php?action=viewthread&amp;threadid=9197&amp;postid=1622921#post1622921</a></li><li>对何时与如何使用脏线修复的看法（使用<code>ContinuityFixer</code>）：<a href="https://passthepopcorn.me/forums.php?action=viewthread&threadid=35149&postid=1656050#post165605038h">https://passthepopcorn.me/forums.php?action=viewthread&amp;threadid=35149&amp;postid=1656050#post165605038h</a></li><li>运用<code>banddtct</code> 与 <code>dirtdtct</code>：<a href="https://git.concertos.live/AHD/awsmfunc/issues/13#issuecomment-62">https://git.concertos.live/AHD/awsmfunc/issues/13#issuecomment-62</a></li></ul><h3 id="3-3-x264与x265"><a href="#3-3-x264与x265" class="headerlink" title="3.3 x264与x265"></a>3.3 x264与x265</h3><p>我们推荐的两个主要视频编码器是x264和x265。x265作为较新的编码器，在技术上应该更胜一筹，不过两者也都各有优劣之处。</p><p>x264作为更成熟的编解码器，它更稳定(more consistent)，这意味着你不太可能遇到随机出现莫名其妙地看起来很糟糕的场景。它还具有更好的硬件支持，并且编码速度快得多。编码速度的差异通常至少是5倍。</p><p>从另一方面看，x265的优势在于它能够存储HDR信息，而且效率高得多，特别是类似低码率动漫这样的简单内容。</p><h4 id="3-3-1-8-bit-与-10-bit"><a href="#3-3-1-8-bit-与-10-bit" class="headerlink" title="3.3.1 8-bit 与 10-bit"></a>3.3.1 8-bit 与 10-bit</h4><p>我们建议考虑x264的两个位深是 8-bit 和 10-bit。如果你正在使用x265，就始终使用10-bit，因为它在各方面都更好。对于x264，8-bit有更多的硬件兼容性（10-bit几乎没有），而且速度明显更快。然而，10-bit x264通常能够节省相当多的空间，同时仍然比x265快。此外，10-bit编码在保留梯度方面要好得多（也就是说，你不必担心色带再次出现），这使得它在编码无噪点内容（比如动漫）方面非常受欢迎。</p><h4 id="3-3-2-x264参数设置"><a href="#3-3-2-x264参数设置" class="headerlink" title="3.3.2 x264参数设置"></a>3.3.2 x264参数设置</h4><p>来自于AHD指南的参数（需硬件兼容的用斜体字做标注，并有一部分修改）：</p><p><strong>通用参数设置</strong>：</p><ul><li><em><code>--level 4.1</code></em> <em>用于DVXA【译者注：DirectX Video Acceleration】</em></li><li><code>--b-adapt 2</code> 使用最好的（x264具有的）算法来决定B帧的插入位置。</li><li><code>--min-keyint</code> 通常应该是你的视频的帧率，例如，如果你是编码23.976帧的内容，那么你就使用24帧。这是设置I帧之间的最小间隔。</li><li><em><code>--vbv-bufsize 78124 --vbv-maxrate 62500</code></em> <em>用于DVXA（旧的指南使用较低的值来考虑将编码写入蓝光盘播放的可能性，但这不再需要考虑，因为其他设置破坏了这种兼容性。新的数值是 <code>--level 4.1</code> 可以做到的最大值，如果你的设备因此而损坏，那不是编码的问题，而是你的设备不符合DXVA规格）。</em></li><li><code>--rc-lookahead 250</code> 如果使用 mbtree，则为60或更高。这设置了x264可以提前多少帧查看，这对 mbtree 来说至关重要。你需要大量的内存来实现这一点。(就我个人而言，我现在只是把它放在250，因为它对内存使用的影响是2GB左右）。如果你在没有 mbtree 的情况下进行编码，并且在你的脚本中有很多 ReplaceFramesSimple 的调用，一定要调低这个值。</li><li><code>--me umh</code> 是你应该去的最低限度。如果你的CPU足够快，你可能需要忍受 <code>tesa</code> 带来的减速。<code>esa</code> 需要和 <code>tesa</code> 相同时长而没有任何好处，所以如果你想放慢你的编码来尝试捕捉更多的运动矢量，就使用 <code>tesa</code>，尽管这种增加并不一定总是值得。这并不是一个你需要测试的设置，但是如果你使用 <code>tesa</code>，你可能会从x264中挤出一些更多的性能。</li><li><code>--direct auto</code> 这将会自动选择预测模式(<code>spatial</code> &#x2F;  <code>temporal</code>)。</li><li><code>--subme 10</code> or <code>11</code> （就个人而言我会设置为11，他们的不同在于对编码速度有3-4%的影响）。</li><li><code>--trellis 2</code></li><li><code>--no-dct-decimate</code> 相反的是<code>dct-decimate</code>是牺牲质量换取速度。把它关掉好了，因为你的电脑很可能足以应付。</li><li><code>--preset veryslow</code> or <code>placebo</code> 尽管我们改变的参数会让 <code>veryslow</code> 变成 <code>placebo</code>，也无所谓了。</li></ul><p><strong>受源影响的参数设置：</strong></p><ul><li><p><code>--bitrate / --crf</code> 比特率【译者注：也称为码率】的单位是Kbps（千比特&#x2F;秒），CRF采用浮点数，越低质量越好。这是你掌握的最重要参数；如果码率不足，质量肯定会很次。如果码率过高，就会臃肿不堪(如果人们想下载大文件，他们会得到一个remux)。当然，码率的需求可以根据来源的不同而有很大的不同。</p></li><li><p><code>--deblock -3:-3 to 1:1</code> 对于真人电影，大多数人只是坚持使用-3:-3。对于动漫来说，通常取-3:-2和0:0之间的值，两个值之间的偏移量为1是正常的（一般取值为-1:0，0:-1，和-2:-1）。</p></li><li><p><code>--aq-mode 1 to 3:1</code> 在每一帧的基础上分配码率，2倾向于将更多的码率分配给前景，并且可以在小范围的帧中分配码率，3是2的修改版，试图将更多的比特分配给帧的暗部。要知道哪种模式最适合，唯一的办法是进行测试。但几乎每一个源最终都是用 <code>aq-mode 3</code> 时看起来最好。</p></li><li><p><code>--aq-strength 0.5 to 1.3</code> 0.5至1.3之间的值非常值得尝试。 更高的值有助于（避免？）色块(help with blocking)。<br>更低的值倾向于将更多码率分配至前景，与 <code>aq-mode 2</code> 所做的类似。当使用CRF进行编码时，此参数会极大地影响码率，因此如果您打算使用CRF进行最终编码，那么使用<code>2- pass</code>测试此参数可能是值得的。</p></li><li><p><code>--merange 24(能够使用的最低的值) to 64</code> 设置太高（超过128）可能有害，32或48对大多数编码来说都很好。一般来说，对于有大量运动的电影（如动作片），（使用 <code>umh</code> 时）将1080p设为32-48、720p为32有所成效。人物对话场景可以应用24这样的低值。对编码速度的影响是明显的但并不严重。个人而言，在使用 <code>umh</code> 时，我更喜欢将1080p设置为48，720p设置为32，或者使用 <code>tesa</code> 时，1080p为32，720p也为32。</p></li><li><p><code>--no-mbtree</code> 我强烈建议在启用和禁用 mbtree 的情况下进行测试，因为通常它会导致两种截然不同的编码结果。<strong>宏块树(mbtree)</strong> 基本上试图降低块而不是帧的质量，因此只有帧中不重要的部分被分配更低码率。要做到这一点，它需要知道一个块以后被引用的频率，这就是为什么 <code>rc-lookahead</code>  应该被设置为 250。这对有静态背景的视频很有用，比如动画片。或者在那些已经使用了高 <code>qcomp</code>（.75或以上）的视频，宏块树的影响较小。在测试宏块树开启与否哪种合适时，你可能需要重新测试每一个参数设置，特别是<code>qcomp</code>、<code>psy-rd</code> 和 <code>ipratio</code>。</p></li><li><p><code>--ipratio 1.15 to 1.40</code> 1.30是最常用的数值。此参数决定I帧和P帧之间比特率的分配比例。</p></li><li><p><code>--pbratio 1.05 to 1.30</code> 1.20是最常用的数值。此参数决定P帧和B帧之间的比特率分配比例。这个值应该总比 <code>-ipratio</code> 低0.10左右，所以在测试 <code>-ipratio</code> 的时别忘了降低它。如果你使用 <code>mbtree</code>，这个设置不会有任何影响，因为其由宏块树自身决定。</p></li><li><p><code>--psy-rd 0.40:0 to 1.15:0</code> 0.95:0到1.15:0适用于真人电影。第一个数值是 <code>psyrd</code> 强度，第二个是 <code>psy-rellis</code> 强度。这试图使x264不使事情变得模糊，而是保持复杂性。对于动画片来说，(0.40和1.00之间):0.00是通常选用。<code>psy-rellis</code> 通常会引入很多**振铃(ringing)**，但可以帮助保持抖动。 你可以为真人表演尝试0.00和0.15之间的值，为动画尝试高达0.50的值,如果你提高你的 <code>aq-strength</code> 的话，通常会得到更好的结果。</p></li><li><p><code>--bframes 6 to 16</code> 这是设置可以用B帧替换的连续P帧的最大数量。在你的第一次测试运行中使用16，并根据x264日志进行设置:</p><blockquote><p>x264 [info]: consecutive B-frames: 1.0% 0.0% 0.0% 0.0% 14.9% 23.8% 13.9% 15.8% 8.9% 9.9% 0.0% 11.9% 0.0% 0.0% 0.0% 0.0% 0.0%</p></blockquote></li></ul><p>  从第一个百分比为0开始计算，选择超过1%的最高数字，在这个例子中是11。(或者就把这个数字保持在16，因为允许更多的 bframes 不会损害你的编码，而且会帮助压缩，对速度的影响并不是那么巨大)。</p><ul><li><p><code>-ref</code> 设置每个P帧可以使用的前一帧的数量作为参考。如果你不关心硬件兼容性（和&#x2F;或正在进行10-bit编码），将其设置为16。这对性能的影响相当大，但在大多数时候是值得的。<em>计算你可以使用的数字，或者如果你使用本末提供的CLI输入，它将由x264为你计算。始终使用你可以使用的最大值。 最大的–参考值可以按以下方式计算：对于–级别4.1，根据H.264由于每一帧是以YV12格式存储的，或每像素1.5字节，一个1920x1088帧是1920×1088×1.5&#x3D;3133440字节&#x3D;3060千字节。请记住，在进行计算时，将两个维度四舍五入到mod16值，即使你没有进行mod16编码！让我们来计算一下1920x800。 1920 × 800 × 1.5 &#x3D; 2304000字节 &#x3D; 2250千字节。12，288÷2250千字节&#x3D;5.45777778，所以你最多可以使用5个参考帧 注意，这些转换使用基数2，所以1千字节&#x3D;&#x3D;1024字节。如果你把数学弄错了，那也没关系–如果你用的太多，x264会显示一个警告，所以你会知道你是否需要改变它。</em></p></li><li><p><code>--zones</code> 对去色带和区块相当有用，因为这些区域需要较大的比特率来保持透明度。其语法为：</p><p><code>--zones 0,100,crf=10/101,200,crf=15 </code> 或 <code>--zones 0,100,b=5/101,200,b=10</code> 在这种情况下，b是一个码率系数。你也可以用它来处理那些没有得到足够比特分配的区域。特别常见的区域是较暗的场景或有大量红色的场景。渐变也会受到码率缺失的影响，需要进行分区。也可以在片头时降低码率，以节省一点压制时间。</p></li><li><p><code>--output-depth 8 or 10</code> 取决于你想编码的格式</p></li><li><p><code>--output-csp i444</code> 仅在编码4:4:4时需要，否则无需此参数。</p></li></ul><p>3.3.3 x265 参数</p><p>这里的文档已经足够好了，所以我只需要介绍一下推荐值：</p><p><strong>与源无关的参数设置：</strong></p><ul><li><code>--preset veryslow</code> or <code>slower</code></li><li><code>--no-rect</code> 对于较慢的电脑。有些许可能被证明是有用的，但很可能并不值得。</li><li><code>--no-amp</code> 与 <code>rect</code> 相似，尽管它看起来稍微更有效。</li><li><code>--no-open-gop</code></li><li><code>--no-cutree</code> 因为这似乎是一个很糟糕的mbtree实现（应用）。</li><li><code>--no-rskip rskip</code> 会牺牲一些质量来换取加速，所以对于差点的cpu来说，它值得考虑。</li><li><code>--no-sao</code> 因为 <code>sao</code> 是x265中最愚蠢的实现（设置）之一。</li><li><code>--ctu 64</code></li><li><code>--min-cu-size 8</code></li><li><code>--rdoq-level 2</code></li><li><code>--max-merge 5</code></li><li><code>--rc-lookahead 60</code> 虽然并不相关，但只要大于 min-keyint。</li><li><code>--ref</code> 好cpu用6，差点的用4。</li><li><code>--bframes 16</code> 或者取决于最终的 bframes 日志输出的值。</li><li><code>--rd 3</code> or <code>4</code> (目前是效果一致的)</li><li><code>--subme 5</code> 你也可以把它改成7，但众所周知这会导致锐化。</li><li><code>--merange 57</code> 只要不要低于32，就不会有问题。</li><li><code>--high-tier</code></li><li><code>--range limited</code></li><li><code>--aud</code></li><li><code>--repeat-headers</code></li></ul><p><strong>受源影响（依赖于源）的参数设置:</strong></p><ul><li><p><code>--colorprim X</code> (X代表数值) HDR设为9，SDR设为1。</p></li><li><p><code>--colormatrix X</code> (X代表数值) HDR设为9，SDR设为1。</p></li><li><p><code>--transfer X</code> (X代表数值) HDR设为16，SDR设为1。</p></li><li><p><code>--hdr10</code> 仅HDR需要。</p></li><li><p><code>--hdr10-opt</code> 适用于4:2:0 HDR，<code>--no-hdr10-opt</code> 适用于 4:4:4 HDR 和 SDR。</p></li><li><p><code>--master-display &quot;G(8500,39850)B(6550,2300)R(35400,14600)WP(15635,16450)L(10000000,20)&quot;</code> </p><p>L的值取自于源的媒体信息(with the values for L coming from your source’s MediaInfo output)。</p></li><li><p><code>--max-cll &quot;711,617&quot;</code> 同样来自于源的媒体信息。</p></li><li><p><code>--cbqpoffs</code> 和 <code>--crqpoffs</code> 通常应该在-3和0之间。它设置了应用于亮度和色度平面的比特率之间的偏移量(This sets an offset between the bitrate applied to the luma and the chroma planes)。</p></li><li><p><code>--qcomp  0.60 to 0.80</code></p></li><li><p><code>--aq-mode 4, 3, 2, 1</code> or <code>--hevc-aq</code> 4和3通常是两个最佳的选择。</p></li><li><p><code>--aq-strength  0.80 to 1.50</code></p></li><li><p><code>--deblock -4:-4 to 0:0</code> 与x264相同。真正使用时你可以用默认的 -3:-3。</p></li><li><p><code>--ipratio</code> and <code>--pbratio</code> 与x264相同。</p></li><li><p><code>--psy-rd 0.50 to 2.00</code> 与x264相似。</p></li><li><p><code>--psy-rdoq</code> 通常从0.00到2.00不等。</p></li><li><p><code>--no-strong-intra-smoothing</code> 用于锐化&#x2F;噪点的内容。对于模糊不清的内容，可以把这个选项打开，因为这是一个额外的模糊，有助于避免色带。</p></li><li><p><code>--output-depth 10</code> 10-bit输出。</p></li></ul><p><strong>实验性质的参数（设置）：</strong></p><ul><li><code>--scenecut-aware-qp</code></li><li><code>--scenecut-window 550</code></li><li><code>--max-qp-delta 2</code></li><li><code>--hist-scenecut</code></li><li><code>--hist-threshold 0.02</code></li></ul><h3 id="3-4-测试参数设置"><a href="#3-4-测试参数设置" class="headerlink" title="3.4 测试参数设置"></a>3.4 测试参数设置</h3><p>首先，你要选择一个较小的视频文件区域作为参考，因为对整个文件进行测试会花费很多时间。推荐的方法是通过使用 <strong>awsmfunc</strong>的<code>SelectRangeEvery</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> awsmfunc <span class="keyword">as</span> awf</span><br><span class="line">out = awf.SelectRangeEvery(clip, every=<span class="number">15000</span>, length=<span class="number">250</span>, offset=[<span class="number">1000</span>,<span class="number">5000</span>])</span><br></pre></td></tr></table></figure><p>这里，第一个数字是各部分之间的偏移量，第二个数字是各部分的长度，偏移数组内为开始和结束的偏移量。 你要使用一个相当长的片段（通常是几千帧），包括黑暗、明亮、静态和动作场景，但是，这些场景应该大致上在整个视频中一样平均分布。 </p><p>当测试参数时，你应该一直使用2-pass编码，因为许多参数会大大改变 CRF 得到的比特率。对于最终的编码，两者都很好，尽管 CRF 更快一些。</p><p>要找出怎么设置是最好的，就需要把它们都与源文件相互比较。你可以通过单独交错或通过 <strong>awsmfunc</strong> 将文件夹内所有内容进行交错来达成比较。通常还需要给它们贴上标签，这样你就能知道你在看哪个片段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load the files before this</span></span><br><span class="line">src = awf.FrameInfo(src, <span class="string">&quot;Source&quot;</span>)</span><br><span class="line">test1 = awf.FrameInfo(test1, <span class="string">&quot;Test 1&quot;</span>)</span><br><span class="line">test2 = awf.FrameInfo(test2, <span class="string">&quot;Test 2&quot;</span>)</span><br><span class="line">out = core.std.Interleave([src, test1, test2])</span><br><span class="line"><span class="comment"># You can also place them all in the same folder and do</span></span><br><span class="line">src = awf.FrameInfo(src, <span class="string">&quot;Source&quot;</span>)</span><br><span class="line">folder = <span class="string">&quot;/path/to/settings_folder&quot;</span></span><br><span class="line">out = awf.InterleaveDir(src, folder, PrintInfo=<span class="literal">True</span>, first=extract,</span><br><span class="line">repeat=<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>如果你使用 yuuno，你可以使用下面的 iPython Magic ，通过悬停在预览屏幕上让预览在两个源之间切换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%vspreview --diff</span><br><span class="line">clip_A = core.ffms2.Source(<span class="string">&quot;settings/crf/17.0&quot;</span>)</span><br><span class="line">clip_A.set_output()</span><br><span class="line">clip_B = core.ffms2.Source(<span class="string">&quot;settings/crf/17.5&quot;</span>)</span><br><span class="line">clip_B.set_output(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>通常情况下，你会想先测试一下码率。只要在几个不同的CRF下编码，并与源画面进行比较，找到与源码无差别的最高CRF值。现在，将该值四舍五入，最好是向下，然后切换到2-pass。对于标准测试，测试<code>qcomp</code>（步进为0.05）、<code>aq-modes</code>、<code>aq-strength</code>（步进为0.05）<code>merange</code>（32、48或64）、psy-rd（步进为0.05）、<code>ipratio</code>&#x2F;<code>pbratio</code>（步进为0.05，并保持两者间0.10的差值），然后<code>deblock</code>（步进为1）。如果你认为 mbtree 有帮助（即你在对动画进行编码），在打开 mbtree 的情况下重新进行这个过程。你可能不会想太多地改变顺序，但当然也可以这样做。</p><p>对于x265，测试调整顺序应该是<code>qcomp</code>、<code>aq-mode</code>、<code>aq-strength</code>、<code>psy-rd</code>、<code>psy-rdoq</code>、<code>ipratio</code> 和 <code>pbratio</code>，最后 <code>deblock</code>。</p><p>如果你想要提高一点额外的效率，你可以在你最终决定的每个设置的数值周围用较小的步进再次进行测试。建议在你已经对每个设置做了一次测试之后再做，因为它们都会对彼此产生轻微的影响。</p><p> 一旦你完成了对2-pass设置的测试，就切换回CRF，重复寻找视觉无损的 CRF 值过程。</p><h2 id="4-音频"><a href="#4-音频" class="headerlink" title="4 音频"></a>4 音频</h2><h3 id="4-1-SoX"><a href="#4-1-SoX" class="headerlink" title="4.1 SoX"></a>4.1 SoX</h3><p>如果你的源音频是高清晰度(hi-res)的（24位或&gt;48kHz），你可能要考虑改变它以节省空间，因为如果转换能够恰当的完成的话，高解析度音频对消费者来说很大程度上只是心理作用。为了做到这一点，我们推荐SoX。如果你想转换为16-bit 48 kHz，你可以使用以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sox foo.wav -G -b 16 bar.wav -v -L 48000 dither -s -f gesemann</span></span><br></pre></td></tr></table></figure><p>如果你的源音频的采样率是48kHz的倍数（如96kHz），就使用这个。对于44.1kHz的倍数，你可以简单地把48000换成44100。</p><p>我们建议对编码进行这些转换，因为更高的采样率通常比其他任何方法更具破坏性，24-bit和正确处理后的16-bit之间的差异是如此之小，以至于只有在极高的音量下才会注意到。</p><h3 id="4-2-有损编码"><a href="#4-2-有损编码" class="headerlink" title="4.2 有损编码"></a>4.2 有损编码</h3><h4 id="4-2-1-Opus"><a href="#4-2-1-Opus" class="headerlink" title="4.2.1 Opus"></a>4.2.1 Opus</h4><p>Opus，虽然是最高效的编解码器，也是音乐会(Concertos)上首选的有损编解码器，但几乎没有硬件兼容性。这对使用HTPC、台式机、笔记本电脑甚至手机的人来说都不是问题，但试图使用蓝光播放器播放的用户就无法解决了。由于我们不那么关心硬件兼容性，这可能是最简单的方法了。</p><p>除了是最有效的编解码器，它也是完全开源的，就像FLAC一样，在每个操作系统上都能完美运行。</p><p>为了对 Opus 进行编码，你需要安装 opus-tools，从那里开始，你只需要:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opusenc foo.wav bar.opus</span><br></pre></td></tr></table></figure><p>此外，如果你不想使用（公认较低）默认值，你可以指定 <code>-- bitrate</code>，尽管Opus会自动检测它的最佳目标比特率。</p><h4 id="4-2-2-qAAC-和-fdkaac"><a href="#4-2-2-qAAC-和-fdkaac" class="headerlink" title="4.2.2 qAAC 和 fdkaac"></a>4.2.2 qAAC 和 fdkaac</h4><p>作为在效率方面紧随 Opus 之后的 qAAC，也是一个可行的选择。与 Opus 不同，AAC 有更好的硬件兼容性，特别是在立体声方面。它也没有有序章节的问题。然而，qAAC 需要 iTunes，在 Unix 下需要 Wine。为了编码最高质量的 qAAC，你将要输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qaac.exe -V 127 foo.wav bar.m4a</span><br></pre></td></tr></table></figure><p><code>-V</code> 指定质量，数字越大越好，最大值是127。</p><h4 id="4-2-3-杜比声-又名AC3"><a href="#4-2-3-杜比声-又名AC3" class="headerlink" title="4.2.3 杜比声 又名AC3"></a>4.2.3 杜比声 又名AC3</h4><p>硬件兼容性之王是AC-3。由于它是DVD的首选编解码器，所以它在大多数播放设备上有非常好的支持。然而，它的效率比MP3还差。如果你想在家里编码以实现硬件兼容（例如，你想为AHD&#x2F;HDB&#x2F;等压制组工作），推荐的方法是通过 Sound Forge（Windows）或 Dolby Media Producer（OS X）。</p><p>为了用 Sound Forge 对 AC-3 进行编码，打开文件（w64格式），等待它建立索引，然后进入另存为选项。从这里，选择Dolby Digital AC-3 Pro。然后，选择以下选项（从AHD的指南中复制）。</p><ul><li>Bitstream mode: Main audio service: Complete main</li><li>Audio coding mode: 3&#x2F;2 (L, C, R, Ls, Rs) with LFE enabled</li><li>Sample rate: 48 kHz</li><li>Data rate: 640 kbps</li><li>Dialog normalization: -32 dB</li><li>Do not select Save data in Intel byte order</li><li>Center mix level: -3 dB</li><li>Surround mix level: -3 dB</li><li>Do not set copyright bit</li><li>do not mark as original bitstream</li><li>Do not include audio production information</li><li>Do not enable extended bitstream information</li><li>Do not enable digital de-emphasis</li><li>Enable DC high-pass flter</li><li>Enable Bandwidth low-pass flter</li><li>Enable LFE low-pass flter</li><li>Do not enable 90-degree phase shift</li><li>Do not enable 3 dB attenuation</li><li>Line mode profle: None</li><li>RF mode profle: None</li><li>Do not enable RF overmodulation protection</li></ul><p>新的E-AC-3编解码器正异军突起。这带来的是对 Atmos 与更多通道的支持。然而，EAC3编码器的唯一缺陷是并不包括对 Atmos 的支持，其效率与AC-3相同，因为它只是在其基础上封装了另一层。 由于这些原因，我们觉得除了说明需要 Dolby Media Producer 外，没有必要详细说明它是如何编码的。</p><h4 id="4-2-4-DTS"><a href="#4-2-4-DTS" class="headerlink" title="4.2.4 DTS"></a>4.2.4 DTS</h4><p>这种编解码器在1080p的PT编码中十分常见。坦率地说，这只是因为臃肿的比特率(bloated bitrate)。DTS 实际上在1509 kbps时比 AC-3 在448 kbps时更糟。就不要用这个了。考虑它的唯一原因是偷懒，因为几乎每个电影源都会有一个DTS核心音轨，可以直接套用。</p><h3 id="4-3-无损编码"><a href="#4-3-无损编码" class="headerlink" title="4.3 无损编码"></a>4.3 无损编码</h3><h4 id="4-3-1-FLAC"><a href="#4-3-1-FLAC" class="headerlink" title="4.3.1 FLAC"></a>4.3.1 FLAC</h4><p>它是免费、开源的，兼容性极佳，压缩效率最佳的。如果你是立体声或单声道，它在硬件兼容性方面应该没有问题。否则，它可能对一些接收器有问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flac --compression-level-8 foo.wav bar.flac</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-TrueHD"><a href="#4-3-2-TrueHD" class="headerlink" title="4.3.2 TrueHD"></a>4.3.2 TrueHD</h4><p>由于硬件支持较差，这种编解码器不如 DTS-HD MA 流行，但它的压缩率更高一些，特别是在低比特率的情况下，DTS核心的臃肿并不会使比特率膨胀。遗憾的是，由于其较差的硬件兼容性，很多小组坚持再封装一条单独的AC-3兼容音轨。在交响音乐会(Concertos)制作中，我们希望您不要这样做，但我们理解这可能是上传其他地方所必须的，或者仅仅是您为了硬件兼容性所做的妥协。</p><h4 id="4-3-3-DTS-HD-MA"><a href="#4-3-3-DTS-HD-MA" class="headerlink" title="4.3.3 DTS-HD MA"></a>4.3.3 DTS-HD MA</h4><p>由于更好地支持使用核心(DTS-core)作为后备，这种编解码器在环绕声重合中相当受欢迎。你可以将你的音轨提取为多个wavs，每个通道一个，然后将它们拖入编码套件，并点击大的红色编码按钮来进行编码。在交响音乐会(concertos)中，我们并不关心这种编解码器，我们更喜欢使用 TrueHD 或 FLAC。</p><h2 id="5-混流"><a href="#5-混流" class="headerlink" title="5 混流"></a>5 混流</h2><h3 id="5-1-追加文件"><a href="#5-1-追加文件" class="headerlink" title="5.1  追加文件"></a>5.1  追加文件</h3><p>有时，你的编码会崩溃，或者你想编辑某个编码的一小部分。在这样的情况下，我们可以 mkvtoolnix 中方便地追加文件。如果你只是想在另一个文件后添加一些东西，只需在 mkvtoolnix 的源文件分区中右击该文件即可。 </p><p>对于视频内的编辑，首先在结尾处找到适当的I帧，这样你就真正编码够了，然后编码你的片段，在 mkvtoolnix 中打开每个文件，在输出标签中进入分割选项，然后为视频的一部分设置帧。请记住，这里的计数从1开始，而不是像 Python 那样从0开始。对你想添加变化的部分进行这样的处理，然后像以前一样追加。你也可以这样做来创建一个混合视频的Remux。 </p><p>确保在混音后检查文件包含所有必要的帧，因为如果你不注意的话，很容易导致使用错误的I帧或由于错误的修剪而导致帧数不正确。</p><h3 id="5-2-无缝衔接"><a href="#5-2-无缝衔接" class="headerlink" title="5.2 无缝衔接"></a>5.2 无缝衔接</h3><p>推荐阅读这篇文章： <a href="https://forums.animesuki.com/showthread.php?t=66444%E3%80%82">https://forums.animesuki.com/showthread.php?t=66444。</a> 在这没什么需要补充的。</p><h2 id="6-推荐的教程和资源"><a href="#6-推荐的教程和资源" class="headerlink" title="6 推荐的教程和资源"></a>6 推荐的教程和资源</h2><ul><li>Irrational Encoding Wizardry’s fansubbing guide: <a href="https://guide.encode.moe/">https://guide.encode.moe</a></li><li>Kageru’s blog: <a href="https://kageru.moe/blog/">https://kageru.moe/blog/</a></li><li>eXmendiC’s filtering guide: <a href="https://iamscum.wordpress.com/_test1/_test2/">https://iamscum.wordpress.com/_test1/_test2/</a></li><li>AHD Guides</li></ul><h2 id="7-贡献者们（以字母表排名）"><a href="#7-贡献者们（以字母表排名）" class="headerlink" title="7  贡献者们（以字母表排名）"></a>7  贡献者们（以字母表排名）</h2><ul><li>Aicha @ D-Z0N3, NSDAB, REEEEEEEE </li><li>Anon @ Concertos, NSDAB</li><li>Q2KTyrant @ Concertos</li><li>Ryuu @ Concertos, NSDAB</li><li>Scrooge @ Concertos, COC, FidelityTM</li><li>xCreamEnte @ EPSiLON, HDBEE, SiGMA</li></ul><h2 id="8-附录"><a href="#8-附录" class="headerlink" title="8 附录"></a>8 附录</h2><p><img src="/(/img/AHDVEG-pics/Figure16.png" alt="Figure16"></p><p>图16：不同降低分辨率函数的效果比较。将源从1080p缩小到720p，然后被裁剪。所有参数都保留默认值。</p><p><img src="/(/img/AHDVEG-pics/Figure17.png" alt="Figure17"></p><p>图17：放大以后的大小。来自于Commie压制的《你的名字》（Your Name (2016)），相较于源进行了裁剪，然后被放大了2倍。</p><p><img src="/(/img/AHDVEG-pics/Figure18.png" alt="Figure18"></p><p>图18：不同参数的双三次(bicubic)放大比较。记住，这些只是视频的小片段，双三次放大总是会导致伪影，特别是锯齿。尖锐的双三次曲线(b&#x3D;0, c&#x3D;1)特别容易产生锯齿伪影。</p><p><img src="/(/img/AHDVEG-pics/Figure19.png" alt="Figure19"></p><p>图19：缩小并放大到原始分辨率的调整器比较。所有内容都被缩小到源分辨率的一半，然后使用<code>nnedi3_rpow2</code>放大回去。所有参数都保留默认值。</p><p><img src="/(/img/AHDVEG-pics/Figure20.png" alt="Figure20"></p><p>图20：缩小并放大到原始分辨率的调整器比较。所有内容都被缩小到源分辨率的一半，然后用相同的调整器放大回去。所有参数都保留默认值。</p><p><img src="/(/img/AHDVEG-pics/Figure21.png" alt="Figure21"></p><p>图21：抖动类型的比较。输入源为8-bit视频，向上抖动并用 <code>f3kdb</code> 去色带，输出为16-bit，然后抖动至8-bit。</p><p><img src="/(/img/AHDVEG-pics/Figure22.png" alt="Figure22"></p><p>图22：一个说明为什么不适当的对角边界fx是个坏主意的例子。上面是源，下面是Geek使用边缘遮罩后的。来自Geek压制的《精灵旅社2》（Hotel Transylvania 2 (2015))。</p><p><img src="/(/img/AHDVEG-pics/Figure23.png" alt="Figure23"></p><p>图23：在16-bit（右)和8-bit（左)分别进行伽马修复(gamma bug fix)的比较</p><p><img src="/(/img/AHDVEG-pics/Figure24.png" alt="Figure24"></p><p>图24：不同**边缘遮罩(edgemask)**的比较。从左上角到右下角：source,  <code>Prewitt</code>, <code>Sobel</code>, <code>Kirsch</code>, <code> TCanny</code>，和<code>retinex_edgemask</code>。所有设置都保留默认值。</p><p><img src="/(/img/AHDVEG-pics/Figure25.png" alt="Figure25"><br>图25：更精确的边缘遮罩(edgemask)的比较。从左上角到右下角：source, <code>retinex_edgemask</code>, <code>Kirsch</code>, <code>Sobel</code>。请注意，这是在质量极差且场景灯光昏暗的源上进行对比，因此 <code>retinex_edgemask</code> 和 <code>Kirsch</code> 两种遮罩的区别比常规情况更大。</p><p><img src="/(/img/AHDVEG-pics/Figure26.png" alt="Figure26"></p><p>图26：去色带时使用与不使用边缘遮罩(edgemask)的比较。从左上到右下分别是：源，源中裁剪区域标记，裁剪区域，裁剪区域上的遮罩（<code>kgf.retinex_edgemask(src).std. binated(5000).std. maximum ().std.Inflate()</code>），无蒙版去色带（<code>f3kdb.Deband(y=90, grainy=32,grainc=16)</code>），和蒙版去色带。通过平滑级别，伽马值提高了50%。</p><p><img src="/(/img/AHDVEG-pics/Figure27.png" alt="Figure27"></p><p>图27： 一个例子说明为什么简单的 <strong>亮度遮罩(luma mask)</strong> 往往是不够的。取自1080p的O2STK对《了不起的狐狸爸爸 》（Fantastic Mr. Fox (2009)）进行了编码。O2STK使用了 <code>GradFun3</code> 和一个亮度遮罩。 标记为 Masked 的截图是 <code>f3kdb</code>用RGB截图的简单<code>Sobel</code>遮罩。</p><p><img src="/(/img/AHDVEG-pics/Figure28.png" alt="Figure28"></p><p>图28：来自Geek的《Hotel Transylvania 2》压制作品：另一个例子说明了为什么在没有正确屏蔽的情况下，你应该始终警惕细节是否平滑甚至遭到破坏。<br>虽然我们不能确定这里是否使用了遮罩，但这很可能是未使用遮罩的 <code>f3kdb</code> 的结果。 <em>sunnighty似乎更常使用 <code>GradFun3</code> 蒙版，这在这个案例中可能有很大帮助。不知道这里发生了什么。但我猜测他们在蒙版遇到了非故意的情况从而产生了问题。</em></p><h2 id="9-【译者注】"><a href="#9-【译者注】" class="headerlink" title="9 【译者注】"></a>9 【译者注】</h2><p>本文翻译主要基于<a href="https://www.deepl.com/translator">DeepL翻译器</a>，在此基础上大量参考<a href="https://github.com/typing-more/encode_guide/blob/master/%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97.md">typing-more&#x2F;高清视频转码进阶指南.md</a>，在此表示由衷感谢！</p><p>部分名词解释借鉴 VCB-Studio、Encode Mystery，一并感谢！</p><p>对翻译错误或不足的地方欢迎指正；翻译不易，若需转载请指明出处，谢谢配合！</p><p>​——2021.12.27</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说明：并非所有内容都是正确的，部分内容仍待完善。&lt;/p&gt;
&lt;p&gt;最新的原文地址在&lt;a href=&quot;https://silentaperture.gitlab.io/mdbook-guide/introduction.html&quot;&gt;https://silentaperture.</summary>
      
    
    
    
    <category term="6.etc" scheme="http://fxxs.github.io/categories/6-etc/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux工具</title>
    <link href="http://fxxs.github.io/2.Tools/Linux/"/>
    <id>http://fxxs.github.io/2.Tools/Linux/</id>
    <published>2024-10-30T13:37:05.544Z</published>
    <updated>2024-10-06T09:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要提供一些可以在 Linux 下使用的工具，但实际很少完全在 Linux 下工作，所以仅供参考</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><a href="https://github.com/gzycode39/docker-vapoursynth-yuuno/">https://github.com/gzycode39/docker-vapoursynth-yuuno/</a></p><h1 id="Info"><a href="#Info" class="headerlink" title="Info"></a>Info</h1><h2 id="BDInfoCLI-ng"><a href="#BDInfoCLI-ng" class="headerlink" title="BDInfoCLI-ng"></a>BDInfoCLI-ng</h2><p><a href="https://github.com/zoffline/BDInfoCLI-ng">https://github.com/zoffline/BDInfoCLI-ng</a></p><p><code>docker run --rm -it -v &lt;BD_PATH&gt;:/mnt/bd -v &lt;REPORT_DEST&gt;:/mnt/report zoffline/bdinfocli-ng /mnt/bd /mnt/report</code> (iso需要挂载后再扫)</p><h1 id="Demux-x2F-Remux"><a href="#Demux-x2F-Remux" class="headerlink" title="Demux&#x2F;Remux"></a>Demux&#x2F;Remux</h1><h2 id="tsMuxer"><a href="#tsMuxer" class="headerlink" title="tsMuxer"></a>tsMuxer</h2><p><a href="https://github.com/justdan96/tsMuxer">https://github.com/justdan96/tsMuxer</a></p><h2 id="mkvtoolnix"><a href="#mkvtoolnix" class="headerlink" title="mkvtoolnix"></a>mkvtoolnix</h2><p><a href="https://mkvtoolnix.download/downloads.html">https://mkvtoolnix.download/downloads.html</a><br>注意章节编辑器名称模板改成英文 <code>Chapter &lt;NUM:2&gt;</code></p><h2 id="DGDemux"><a href="#DGDemux" class="headerlink" title="DGDemux"></a>DGDemux</h2><p><a href="http://rationalqm.us/dgdemux/dgdemux.html">http://rationalqm.us/dgdemux/dgdemux.html</a></p><h1 id="Encode"><a href="#Encode" class="headerlink" title="Encode"></a>Encode</h1><h2 id="FFmpeg"><a href="#FFmpeg" class="headerlink" title="FFmpeg"></a>FFmpeg</h2><p><a href="https://ffmpeg.org/ffmpeg-all.html">https://ffmpeg.org/ffmpeg-all.html</a></p><p>范例</p><p><code>ffmpeg -i 1.dts -c:a flac -compression_level 8 1.flac</code></p><p><code>ffmpeg -i 1.mkv -map 0:1  -c:a flac -compression_level 8 chi.flac</code></p><p><code>ffmpeg  -v quiet -ss 00:23:00 -i file  -vcodec png -vframes 1 -pix_fmt rgb24 -y ~/filename.png</code></p><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>cutP.py</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要提供一些可以在 Linux 下使用的工具，但实际很少完全在 Linux 下工作，所以仅供参考&lt;/p&gt;
&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="2.Tools" scheme="http://fxxs.github.io/categories/2-Tools/"/>
    
    
  </entry>
  
  <entry>
    <title>字幕相关</title>
    <link href="http://fxxs.github.io/4.Audio&amp;sub/%E5%AD%97%E5%B9%95%E5%88%B6%E4%BD%9C/"/>
    <id>http://fxxs.github.io/4.Audio&amp;sub/%E5%AD%97%E5%B9%95%E5%88%B6%E4%BD%9C/</id>
    <published>2024-09-28T09:37:21.408Z</published>
    <updated>2024-09-28T09:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇内容都作为 Optional</p><h1 id="字幕调轴"><a href="#字幕调轴" class="headerlink" title="字幕调轴"></a>字幕调轴</h1><p>一般来说不少字幕都可以通过平移来解决不同步问题。<br>但还有相当多的会因为源的帧率不同导致同步问题。</p><p>此时应确认原字幕匹配的视频文件的帧率，以及目标视频文件的视频帧率</p><p>以 Blonde and Blonder 2007 举例，现有的都是DVD的字幕，需要制作1080p AMZN web(25fps)的字幕。</p><p>DVD是NTSC的，也就是传说中的5烂2</p><p><strong>Attention</strong> NTSC 的相关事项建议查下资料以作了解。虽然DVD源是29.970 fps，但实际应使用压制处理后的分辨率23.976 fps。</p><p>然后对字幕做帧率转换，大部分的字幕软件都支持，除此之外还可以使用Potplayer</p><p>范例</p><p>对于 Blonde and Blonder 2007 的字幕，帧率由 23.976 fps 转为 25 fps,之后整体向前平移 12s 即可匹配</p><h2 id="字幕轴替换"><a href="#字幕轴替换" class="headerlink" title="字幕轴替换"></a>字幕轴替换</h2><p>有些情况下帧率调整没法解决问题，这种情况下可以完全的调轴(还有些可能就是制作字幕的人造成了一些错误)</p><p>比如你有一个轴不对的中文字幕，找到一条完全匹配的英文字幕。</p><p>你可以使用 Sutittle Edit 的 point sync via other subtitle 功能</p><p>还可以打开拥有正确时间轴的字幕，选所有行，右键，Column, delete text, 然后从其他字幕导入文本，最好再检查下有没有错行</p><h2 id="精调"><a href="#精调" class="headerlink" title="精调"></a>精调</h2><p>Sutittle Edit 不但可以加载画面，甚至可以读取音轨波形，可以通过听以及观察波形来精调。</p><p>就是应该会有点累</p><h1 id="双语合并"><a href="#双语合并" class="headerlink" title="双语合并"></a>双语合并</h1><p>使用srtedit即可，可以自己点点点研究一下就行。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>Sutittle Edit 处理ass会导致一些样式丢失</li><li>HDR字幕(包括srt)白颜色下会过亮(与软件可能也有一定关系)，请注意转换成暗色</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇内容都作为 Optional&lt;/p&gt;
&lt;h1 id=&quot;字幕调轴&quot;&gt;&lt;a href=&quot;#字幕调轴&quot; class=&quot;headerlink&quot; title=&quot;字幕调轴&quot;&gt;&lt;/a&gt;字幕调轴&lt;/h1&gt;&lt;p&gt;一般来说不少字幕都可以通过平移来解决不同步问题。&lt;br&gt;但还有相当多的会因为</summary>
      
    
    
    
    <category term="4.Audio&amp;sub" scheme="http://fxxs.github.io/categories/4-Audio-sub/"/>
    
    
  </entry>
  
  <entry>
    <title>Progressive segmented frame</title>
    <link href="http://fxxs.github.io/6.etc/PsF/"/>
    <id>http://fxxs.github.io/6.etc/PsF/</id>
    <published>2024-09-22T13:24:28.282Z</published>
    <updated>2024-09-22T13:28:24.744Z</updated>
    
    <content type="html"><![CDATA[<p>写作 interlace, 实际是为了塞p的视频</p><p><a href="https://en.wikipedia.org/wiki/Progressive_segmented_frame">https://en.wikipedia.org/wiki/Progressive_segmented_frame</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写作 interlace, 实际是为了塞p的视频&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_segmented_frame&quot;&gt;https://en.wikipedia.org/wiki/Progres</summary>
      
    
    
    
    <category term="6.etc" scheme="http://fxxs.github.io/categories/6-etc/"/>
    
    
  </entry>
  
  <entry>
    <title>基本概念</title>
    <link href="http://fxxs.github.io/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://fxxs.github.io/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2024-09-20T17:09:29.845Z</published>
    <updated>2024-12-25T03:48:06.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h1><h2 id="本文大部分参考以及直接引用"><a href="#本文大部分参考以及直接引用" class="headerlink" title="本文大部分参考以及直接引用"></a>本文大部分参考以及直接引用</h2><p><a href="http://vcb-s.com/archives/2726">http://vcb-s.com/archives/2726</a></p><p><a href="https://help.aliyun.com/document_detail/99380.html">https://help.aliyun.com/document_detail/99380.html</a></p><h2 id="视频的基础参数"><a href="#视频的基础参数" class="headerlink" title="视频的基础参数"></a>视频的基础参数</h2><h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>视频是由连续的图像构成的。每一张图像，我们称为一 <strong>帧(frame)</strong> 。图像则是由像素(pixel)构成的。一张图像有多少像素，称为这个图像的 <strong>分辨率</strong>。比如说1920×1080的图像，说明它是由横纵1920×1080个像素点构成。视频的分辨率就是每一帧图像的分辨率。</p><h3 id="帧率"><a href="#帧率" class="headerlink" title="帧率"></a>帧率</h3><p>一个视频，每一秒由多少图像构成，称为这个视频的 <strong>帧率(frame-rate)</strong> 。常见的帧率有24000&#x2F;1001&#x3D;23.976, 30000&#x2F;1001&#x3D;29.970, 60000&#x2F;1001&#x3D;59.940, 25.000, 50.000等等。这个数字是一秒钟内闪过的图像的数量。比如23.976，就是1001秒内，有24000张图像。视频的帧率是可以是恒定的(cfr, Const Frame-Rate)，也可以是变化的(vfr, Variable Frame-Rate)</p><h3 id="码率"><a href="#码率" class="headerlink" title="码率"></a>码率</h3><p><strong>码率</strong> 的定义是视频文件体积除以时间。单位一般是Kbps(Kbit&#x2F;s)或者Mbps(Mbit&#x2F;s)。注意1B(Byte)&#x3D;8b(bit)。所以一个24分钟，900MB的视频：</p><p>体积：900MB &#x3D; 900MByte &#x3D; 7200Mbit</p><p>时间：24min &#x3D; 1440s</p><p>码率：7200&#x2F;1440  &#x3D; 5000 Kbps &#x3D; 5Mbps</p><p>当视频文件的时间基本相同的时候（比如现在一集番大概是24分钟），码率和体积基本上是等价的，都是用来描述视频大小的参数。长度分辨率都相同的文件，体积不同，实际上就是码率不同。</p><p>码率也可以解读为单位时间内，用来记录视频的数据总量。码率越高的视频，意味着用来记录视频的数据量越多，潜在的解读就是视频可以拥有更好的质量。（注意，仅仅是潜在，后文我们会分析为什么高码率不一定等于高画质）</p><h3 id="码率控制方法"><a href="#码率控制方法" class="headerlink" title="码率控制方法"></a>码率控制方法</h3><p>码率控制是指视频编码中决定输出码率的过程，常用的码率控制方法有：</p><h4 id="VBR-Variable-Bitrate"><a href="#VBR-Variable-Bitrate" class="headerlink" title="VBR(Variable Bitrate)"></a>VBR(Variable Bitrate)</h4><p>动态比特率，也就是没有固定的比特率，音视频压缩软件在压缩时根据音视频数据的复杂程度即时确定使用什么比特率，这是以质量为前提兼顾文件大小的方式。</p><p>相对于CBR来说<br>适用场景：VBR适用于那些对带宽和编码速度不太限制，但是对质量有很高要求的场景。特别是在运动的复杂场景下也可以保持比较高的清晰度且输出质量比较稳定，适合对延时不敏感的点播，录播或者存储系统。<br>特点：</p><ul><li>码率不稳定，质量基本稳定且非常高；</li><li>编码速度一般比较慢，点播、下载和存储系统可以优先使用，不适合低延时、直播系统；</li><li>这种模型完全不考虑输出的视频带宽，为了质量，需要多少码率就占用多少，也不太考虑编码速度；</li></ul><h4 id="CQP-Constant-QP"><a href="#CQP-Constant-QP" class="headerlink" title="CQP(Constant QP)"></a>CQP(Constant QP)</h4><p>应该算编码器实现VBR的方式<br>固定QP，最简单的码率控制方式，每帧图像都按照一个特定的QP来编码，每帧编码后的数据量有多大是未知的，既不是码率优先模型也不是质量优先模型，不过是实现最简单的模型；</p><p>适用场景：一般不建议使用这种方式，因为这种方式不考虑编码内容的复杂性，用相同的压缩比处理每一帧。出来的视频质量和码率都不固定。个人觉得只有那种非常简单的场景，比如静止不变的场景运动量很小的场景可以尝试用，一遇到复杂场景，码率波动就非常大。或者在算法研究或者验证可以使用。</p><p>特点：</p><ul><li>瞬时码率会随场景复杂度波动；</li><li>编码速度快，调控最简单,每帧的QP值相同；</li></ul><h4 id="CRF-Constant-Rate-Factor"><a href="#CRF-Constant-Rate-Factor" class="headerlink" title="CRF(Constant Rate Factor)"></a><strong>CRF(Constant Rate Factor)</strong></h4><p>应该算编码器实现VBR的方式<br>恒定码率系数。把某一个”视觉质量”作为输出目标。通过降低那些耗费码率但是又难以用肉眼察觉的帧（高速运动或者纹理丰富）的质量提升那些静态帧的码率来达到此目的。</p><p>特点：帧间QP变化，帧内宏块的QP变化，输出码率未知，各帧输出的视觉质量基本恒定，这种方式相当于固定质量模式+限制码率峰值的方式。</p><p>适用场景：适用于对视频质量有一定要求的场合，CRF值可以简单理解为对视频质量期望的一个输出固定值，希望无论是在运动复杂场景下还是在静止简单情况下，都希望有一个稳定的主观视频质量可以选择该模式，该模式是视频质量优先模型。视频质量可以简单理解为视频的清晰度，像素的细腻程度和视频的流畅度。</p><p>特点：</p><ul><li>与恒定QP类似，但追求主观感知到的质量恒定，瞬时码率也会随场景复杂度波动，视频帧之间或者内部宏块之间的QP值都不一样；</li><li>对于快速运动或细节丰富的场景会适当增大量化失真（因为人眼不敏感），反之对于静止或平坦区域则减少量化失真；</li></ul><h4 id="CBR-Constant-Bitrate"><a href="#CBR-Constant-Bitrate" class="headerlink" title="CBR(Constant Bitrate)"></a>CBR(Constant Bitrate)</h4><p>固定比特率，指文件从头到尾都是一种位速率。相对于VBR和ABR来讲，它压缩出来的文件体积很大，而且视频质量相对于VBR和ABR不会有明显的提高。</p><p>特点：</p><ul><li>码率稳定，但是质量不稳定，带宽有效利用率不高，特别当该值设置不合理，在复杂运动场景下，画面非常模糊，非常影响观看体验；</li><li>但是输出视频码率基本稳定，便于计算视频体积大小；</li></ul><h4 id="ABR-Average-Bitrate"><a href="#ABR-Average-Bitrate" class="headerlink" title="ABR(Average Bitrate)"></a>ABR(Average Bitrate)</h4><p>平均比特率，是VBR的一种插值参数。LAME针对CBR不佳的文件体积比和VBR生成文件大小不定的特点独创了这种编码模式。ABR在指定的文件大小内，以每50帧（30帧约1秒）为一段，低频和不敏感频率使用相对低的流量，高频和大动态表现时使用高流量，可以做为VBR和CBR的一种折衷选择。</p><p>ABR在一定的时间范围内达到设定的码率，但是局部码率峰值可以超过设定的码率，平均码率恒定。ABR是VBR的改良版，能确保输出平均码率在合理范围，且在这个范围内，还是动态根据复杂度编码，</p><p>适用场景：ABR在直播和低延时系统用的比较多<br>特点：</p><ul><li>视频质量整体可控，同时兼顾了视频码率和速度，是一个折中方案，实际用的比较多；</li><li>使用过程一般要让调用方设置，最低码率、最高码率和平均码率，这些值要尽可能设置合理点；</li></ul><h2 id="图像的表示方法"><a href="#图像的表示方法" class="headerlink" title="图像的表示方法"></a>图像的表示方法</h2><h3 id="RGB模型"><a href="#RGB模型" class="headerlink" title="RGB模型"></a>RGB模型</h3><p>光的三原色是红(Red)、绿(Green)、蓝(Blue)。现代的显示器技术就是通过组合不同强度的三原色，来达成任何一种可见光的颜色。图像储存中，通过记录每个像素红绿蓝强度，来记录图像的方法，称为RGB模型 (RGB Model)</p><p>常见的图片格式中，PNG和BMP这两种就是基于RGB模型的。</p><p>比如说原图：</p><p><img src="/(/img/Video/Source.webp" alt="原图"></p><p>分别只显示R G B通道的强度，效果如下：</p><p><img src="/(/img/Video/R.webp" alt="RGB-R"></p><p><img src="/(/img/Video/G.webp" alt="RGB-G"></p><p><img src="/(/img/Video/B.webp" alt="RGB-B"></p><p>三个通道下，信息量和细节程度不一定是均匀分布的。比如说可以注意南小鸟脸上的红晕，在3个平面上的区分程度就不同——红色平面下几乎无从区分，造成区别的主要是绿色和蓝色的平面。外围白色的脸颊，三色都近乎饱和；但是红晕部分，只有红色饱和，绿色和蓝色不饱和。这是造成红色凸显的原因。</p><h2 id="YUV模型"><a href="#YUV模型" class="headerlink" title="YUV模型"></a>YUV模型</h2><p>除了RGB模型，还有一种广泛采用的模型，称为YUV模型，又被称为亮度-色度模型（Luma-Chroma）。它是通过数学转换，将RGB三个通道，转换为一个代表亮度的通道(Y,又称为Luma)，和两个代表色度的通道(UV，并成为Chroma)。</p><p>YUV模型干的是类似的事儿。通过对RGB数据的合理转换，得到另一种表示方式。YUV模型下，还有不同的实现方式。举个用的比较多的YCbCr模型：它把RGB转换成一个亮度(Y)，和 蓝色色度(Cb) 以及 红色色度(Cr)。转换背后复杂的公式大家不需要了解，只需要看看效果：</p><p>只有亮度通道：</p><p><img src="/(/img/Video/Y.webp" alt="YUV-Y"></p><p>只有蓝色色度：</p><p><img src="/(/img/Video/Cb.webp" alt="YUV-Cb"></p><p>只有红色色度：</p><p><img src="/(/img/Video/Cr.webp" alt="YUV-Cr"></p><p>在图像视频的加工与储存中，YUV格式一般更受欢迎，理由如下：</p><ol><li><p>人眼对亮度的敏感度远高于色度，因此人眼看到的有效信息主要来自于亮度。YUV模型可以将绝大多数的有效信息分配到Y通道。UV通道相对记录的信息少的多。相对于RGB模型较为平均的分配，YUV模型将多数有效信息集中在Y通道，不但减少了冗余信息量，还为压缩提供了便利</p></li><li><p>保持了对黑白显示设备的向下兼容</p></li><li><p>图像编辑中，调节亮度和颜色饱和度，在YUV模型下更方便。</p></li></ol><p>几乎所有的视频格式，以及广泛使用的JPEG图像格式，都是基于YCbCr模型的。播放的时候，播放器需要将YCbCr的信息，通过计算，转换为RGB。这个步骤称为渲染（Rendering）</p><p>每个通道的记录，通常是用整数来表示。比如RGB24，就是RGB各8个bit，用0~255 (8bit的二进制数范围)来表示某个颜色的强弱。YUV模型也不例外，也是用整数来表示每个通道的高低。</p><h2 id="色深"><a href="#色深" class="headerlink" title="色深"></a>色深</h2><p>色深(bit-depth)，就是我们通常说的8bit和10bit，是指每个通道的精度。8bit就是每个通道用一个8bit整数<code>(0~255)</code>代表，10bit就是用10bit整数<code>(0~1023)</code>来显示。16bit则是<code>0~65535</code></p><p>(注意，上文的表述是不严谨的，视频在编码的时候，并非一定能用到<code>0~255</code>的所有范围，而是可能有所保留，只用到一部分，比如<code>16~235</code>。这我们就不详细展开了)</p><p>你的显示器是8bit的，代表它能显示RGB每个通道0~255所有强度。但是视频的色深是YUV的色深，播放的时候，YUV需要通过计算转换到RGB。因此，10bit的高精度是间接的，它使得运算过程中精度增加，以让最后的颜色更细腻。</p><p>如何理解8bit显示器，播放10bit是有必要的呢：</p><p>一个圆的半径是12.33m, 求它的面积，保留两位小数。</p><p>半径的精度给定两位小数，结果也要求两位小数，那么圆周率精度需要给多高呢？也只要两位小数么？</p><p>取pi&#x3D;3.14, 面积算出来是477.37平方米</p><p>取pi&#x3D;3.1416，面积算出来是477.61平方米</p><p>取pi精度足够高，面积算出来是477.61平方米。所以取pi&#x3D;3.1416是足够的，但是3.14就不够了。</p><p>换言之，即便最终输出的精度要求较低，也不意味着参与运算的数字，以及运算过程，可以保持较低的精度。在最终输出是8bit RGB的前提下，10bit YUV比起8bit YUV依旧具有精度优势的原因就在这里。事实上，8bit YUV转换后，覆盖的精度大概相当于8bit RGB的26%，而10bit转换后的精度大约可以覆盖97%——你想让你家8bit显示器发挥97%的细腻度么？看10bit吧。</p><p>8bit精度不足，主要表现在亮度较低的区域，容易形成色带</p><p><img src="/(/img/Video/8bit.webp" alt="色带"></p><p>注意这图右边那一圈圈跟波浪一样的效果。这就是颜色精度不足的表现。</p><p>10bit的优势不只在于显示精度的提高，在提高视频压缩率，减少失真方面，相对8bit也有优势。这方面就不展开了。</p><h2 id="帧、帧的类型V"><a href="#帧、帧的类型V" class="headerlink" title="帧、帧的类型V"></a>帧、帧的类型V</h2><p>电影是由多个“图片”连续播放组成的，每个“图片”被称为<em><strong>帧</strong></em>，电影单位时间内播放的帧的数目称为<em><strong>帧率</strong></em>，常见帧率数值有：<strong>23.97、24、29.97</strong>等等</p><p>相邻连续帧主要部分基本相同，画面中只有部分内容发生运动改变，因此可以对于相似帧只保存变换的内容，用于储存节约空间。</p><p>根据帧储存性质，可以分为3类：</p><p><strong>I帧(Intracoded帧)</strong>:此帧是一个独立的帧，它不使用其前后的帧中的任何信息。一般作为参考帧的基础架构，储存完整的帧信息，占用空间较大。</p><p><strong>P帧（Predicted帧）</strong>:P帧又称帧间预测编码帧，需要参考前面的I帧才能进行编码。表示的是当前帧画面与前一帧（前一帧可能是I帧也可能是P帧）的差别。解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。与I帧相比，P帧通常占用更少的空间。</p><p><strong>B帧（Bi-predictive帧）</strong>:B帧又称双向预测编码帧，也就是B帧记录的是本帧与前后帧的差别。也就是说要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是对解码性能要求较高。</p><p><img src="/(/img/I_P_and_B_frames.png" alt="I_P_and_B_frames"></p><p>不同编码根据自己算法，对于一个视频进行压缩编码，不同的编码方式，对于不同帧处理方式不同，有着自己的标准。</p><h2 id="GOP（关键帧间隔）"><a href="#GOP（关键帧间隔）" class="headerlink" title="GOP（关键帧间隔）"></a>GOP（关键帧间隔）</h2><p>GOP（Group of Pictures）是一组以 MPEG 编码的影片或视讯串流内部的连续图像，以 I 帧开头，到下一个 I 帧结束。一个 GOP 包含如下图像类型：</p><p>I 帧（Intra Coded Picture）：又称帧内编码帧，为关键帧，是一种自带全部信息的独立帧，无需参考其他图像便可独立进行解码，可以简单理解为一张静态画面。视频序列中的第一个帧始终都是I 帧，每个 GOP 由I 帧开始。<br>P 帧（Predictive Coded Picture）：又称帧间预测编码帧，需要参考前面的I帧才能进行编码。表示的是当前帧画面与前一帧（前一帧可能是I帧也可能是P帧）的差别。解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。与I帧相比，P帧通常占用更少的数据位，但不足是，由于P帧对前面的P和I参考帧有着复杂的依赖性，因此对传输错误非常敏感。<br>B 帧（Bidirectionally Predictive Coded Pictures）：又称双向预测编码帧，也就是B帧记录的是本帧与前后帧的差别。也就是说要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是对解码性能要求较高。<br>GOP值表示关键帧的间隔（即两个关键帧之间的帧数），也就是两个IDR帧之间的距离，一个帧组的最大帧数。一般而言，每一秒视频至少需要使用 1 个关键帧。增加关键帧个数可改善视频质量，但会同时增加带宽和网络负载。GOP值（帧数）除以帧率即为时间间隔，如阿里云视频点播默认的GOP值为250帧，帧率为25fps，则时间间隔为10秒。</p><p>GOP值需要控制在合理范围，以平衡视频质量、文件大小（网络带宽）和seek效果（拖动、快进的响应速度）等：</p><p>加大GOP值有利于减小视频文件大小，但也不宜设置过大，太大则会导致GOP后部帧的画面失真，影响视频质量。<br>GOP值也是影响视频seek响应速度的关键因素，seek时播放器需要定位到离指定位置最近的前一个关键帧，如果GOP太大意味着距离指定位置可能越远（需要解码的预测帧就越多）、seek响应的时间（缓冲时间）也越长。<br>由于P、B帧的复杂度大于I帧，GOP值过大，过多的P、B帧会影响编码效率，使编码效率降低。<br>但如果设置过小的GOP值，则需要提高视频的输出码率，以确保画面质量不会降低，故会增加网络带宽。</p><h2 id="IDR-帧对齐"><a href="#IDR-帧对齐" class="headerlink" title="IDR 帧对齐"></a>IDR 帧对齐</h2><p>IDR帧（Instantaneous Decoding Refresh Picture），即时解码刷新帧，是 I 帧的一种。与普通 I 帧的区别在于，一个 IDR 帧之后的所有帧都不能引用该 IDR 帧之前的帧的内容；相反，对于普通的 I 帧，其后的 P 帧和 B 帧可以引用该普通 I 帧之前的其他 I 帧。在编码和解码中为了方便，将首个I帧和其他I帧区别开，称为IDR，这样就方便控制编码和解码流程。</p><p>IDR帧的作用是立刻刷新，使错误不致传播，从IDR帧开始，重新算一个新的序列开始编码。而普通I帧不具有随机访问的能力，这个功能是由IDR承担。视频播放时，播放器一般都支持随机seek（拖动）到指定位置，而播放器直接选择到指定位置附近的 IDR 帧进行播放最为便捷，因为可以明确知道该 IDR 帧之后的所有帧都不会引用其之前的其他 I 帧，从而避免较为复杂的反向解析。</p><p>在对同一个视频进行多码率转码时，如果指定 IDR 帧对齐（IDR Frame Alignment），则意味着所有输出视频的 IDR 帧在时间点、帧内容方面都保持精确同步，此时播放器便可实现多码率视频平滑切换，从而不会出现较为明显的切换卡顿。</p><h2 id="色度半采样"><a href="#色度半采样" class="headerlink" title="色度半采样"></a>色度半采样</h2><p>在YUV模型的应用中，Y和UV的重要性是不等同的。图像视频的实际储存和传输中，通常将Y以全分辨率记录，UV以减半甚至1&#x2F;4的分辨率记录。这个手段被称为色度半采样(Chroma Sub-Sampling)。色度半采样可以有效减少传输带宽，和加大UV平面的压缩率，但是不可避免的会损失UV平面的有效信息。</p><p>我们平常的视频，最常见的是420采样。配合YUV格式，常常被写作yuv420。这种采样是Y保留全部，UV只以(1&#x2F;2) x (1&#x2F;2)的分辨率记录。比如说1920×1080的视频，其实只有亮度平面是1920×1080。两个色度平面都只有960×540的分辨率。</p><p>当然了，你也可以选择不做缩减。这种称为444采样，或者yuv444。YUV三个平面全是满分辨率。</p><p>在做YUV-&gt;RGB的时候，首先需要将缩水的UV分辨率拉升到Y的分辨率（madVR中允许自定义算法，在Chroma Upscaling当中），然后再转换到RGB。做RGB-&gt;YUV的转换，也是先转换到444（YUV的分辨率相同），再将UV分辨率降低。</p><p>一般能拿到的片源，包括所有蓝光原盘，都是420采样的。所以成品一般也保留420采样。所以yuv420就表示这个视频是420采样的yuv格式。</p><p>将420做成444格式，需要自己手动将UV分辨率拉升2×2倍。在今天madVR等渲染器可以很好地拉升UV平面的情况下，这种做法无异于毫无必要的拉升DVD做成伪高清。</p><p>当然了，有时候也需要在444&#x2F;RGB平面下做处理和修复，常见的比如视频本身RGB平面不重叠（比如摩卡少女樱），这种修复过程首先要将UV分辨率拉升，然后转RGB，做完修复再转回YUV。修复后的结果相当于全新构图，这种情况下保留444格式就是有理由，有必要的。</p><p>H264格式编码444格式，需要High 4:4:4 Predictive Profile（简称Hi444pp）。所以看到Hi444pp&#x2F;yuv444 之类的标示，你就需要去找压制者的陈述，为什么他要做这么个拉升。如果找不到有效的理由，你应该默认作者是在瞎做。</p><h2 id="清晰度与画质简述"><a href="#清晰度与画质简述" class="headerlink" title="清晰度与画质简述"></a>清晰度与画质简述</h2><p>经常看到的说法：“这个视频清晰度是1080p的”。其实看过上文你就应该知道，1080p只是视频的分辨率，它不能直接代表清晰度——比如说，我可以把一个480p的dvd视频拉升到1080p，那又怎样呢？它的清晰度难道就提高了么？</p><p>视频的画质，是由以下几点共同决定的</p><ol><li><h6>源的画质。</h6></li></ol><p>俗话说的好，上梁不正下梁歪。如果源的画质本身很差，那么再如何折腾都别指望画质好到哪去。所以压制者往往会选择更好的源进行压制——举个栗子，BDRip一般都比TVRip来的好，哪怕是720p。蓝光也分销售地区，一般日本销售的日版，画质上比美版、台版、港版啥的都来得好，所以同样是BDRip，选取更好的源，就能做到画质上优先一步。</p><ol start="2"><li><h6>播放条件。</h6></li></ol><p>观众是否用了足矣支持高画质播放的硬件和软件。这就是为啥我们在发布Rip的同时大力普及好的播放器；有时候一个好的播放器胜过多少在制作方面的精力投入。</p><ol start="3"><li><h6>码率投入vs编码复杂度。</h6></li></ol><p>视频的时间和空间复杂度，并称为编码复杂度。编码复杂度高的视频，往往细节多，动态高（比如《魔法少女小圆剧场版 叛逆的物语》），这样的视频天生需要较高的码率去维持一个优秀的观看效果。</p><p>相反，有些视频编码复杂度低（比如《请问今天要来点兔子么》，动态少，线条细节柔和），这种视频就是比较节省码率的。</p><ol start="4"><li><h6>码率分配的效率和合理度。</h6></li></ol><p>同样多的码率，能起到怎样好的效果，被称为效率。比如H264就比之前的RealVideo效率高；10bit比8bit效率高；编码器先进，参数设置的比较合理，编码器各种高端参数全开（通常以编码时间作为代价），码率效率就高。</p><p>合理度就是码率在时空分配方面合理与否，合理的分配，给观众的观看效果就比较统一协调。 码率分配的效率和合理度，是对制作者的要求，要求制作者对片源分析，参数设置有比较到位的理解。</p><p>码率分配和合理度做的好，就常常能做出低码率高画质的良心作品。</p><ol start="5"><li><p>编码前的预处理。预处理分三种：</p></li><li><p>客观修复。强调修复片源固有的瑕疵，比如锯齿，色带，晕轮等等。</p></li><li><p>主观调整，强调将片源调整的更适合人眼观看，比如适度的锐化，调色（有时候你是可以通过科学方法判定片源的颜色有问题，然后针对的做修复的）。</p></li><li><p>移除无效高频信息，比如降噪，避免码率浪费在无效的噪点上</p></li></ol><p> 预处理做的好，往往能达到画质上超越片源，或是在几乎不牺牲清晰度的前提下，节省码率开销。</p><p> 但是预处理是一把双刃剑，优化的同时，可能引入副效果。降噪、抗锯齿、去晕轮等操作会不可避免的损失一些有效细节（或多或少，取决于制作者水准）；主观调整很可能 会引入副效果（比如过度锐化会导致锯齿和晕轮），或是变成了作者的自我满足，形成对观众的欺骗。</p><p>综上，一个优秀的画质，是由片源、制作者、观看者共同决定的；码率高低也只是部分因素，并非决定性的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;视频格式&quot;&gt;&lt;a href=&quot;#视频格式&quot; class=&quot;headerlink&quot; title=&quot;视频格式&quot;&gt;&lt;/a&gt;视频格式&lt;/h1&gt;&lt;h2 id=&quot;本文大部分参考以及直接引用&quot;&gt;&lt;a href=&quot;#本文大部分参考以及直接引用&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="1.基础知识" scheme="http://fxxs.github.io/categories/1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>常见报错</title>
    <link href="http://fxxs.github.io/6.etc/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://fxxs.github.io/6.etc/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2024-08-28T12:36:37.847Z</published>
    <updated>2024-09-22T13:13:32.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x265-crash"><a href="#x265-crash" class="headerlink" title="x265 crash"></a>x265 crash</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[2022-01-07][21:18:15] WARNING: Input process exited with error (code: 1), your encode might be *incomplete* !!!</span><br><span class="line">[2022-01-07][21:18:15] </span><br><span class="line">[2022-01-07][21:18:15] FATAL ERROR: The encoder process has *crashed* -&gt; your encode probably is *incomplete* !!!</span><br><span class="line">[2022-01-07][21:18:15] Note that this indicates a bug in the current encoder, *not* in Simple x264/x265 Launcher.</span><br><span class="line">[2022-01-07][21:18:15] </span><br><span class="line">[2022-01-07][21:18:15] PROCESS EXITED WITH ERROR CODE: -1073741795</span><br></pre></td></tr></table></figure><p>注意检查CPU指令集，默认使用的是AVX2,有部分CPU不支持，LIKE E5-2690 0</p><p>这种情况下弄个CPU-Z看看就知道了</p><p>另外还有错误的参数可能会导致问题</p><h1 id="压制程序退出"><a href="#压制程序退出" class="headerlink" title="压制程序退出"></a>压制程序退出</h1><p>生成文件被占用或不可写入会导致报错，例如 vs 预览会导致文件被占用。</p><h1 id="Dgdemux-不显示界面"><a href="#Dgdemux-不显示界面" class="headerlink" title="Dgdemux 不显示界面"></a>Dgdemux 不显示界面</h1><p>DGDemux.ini 里有一行 Window_Position 删掉就好了，或者整个ini删掉也行</p><h1 id="大小核调度问题"><a href="#大小核调度问题" class="headerlink" title="大小核调度问题"></a>大小核调度问题</h1><p>管理员模式运行cmd，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">powercfg -attributes SUB_PROCESSOR 7f2f5cfa-f10c-4823-b5e1-e93ae85f46b5 -ATTRIB_HIDE</span><br><span class="line">powercfg -attributes SUB_PROCESSOR 93b8b6dc-0698-4d1c-9ee4-0644e900c85d -ATTRIB_HIDE</span><br><span class="line">powercfg -attributes SUB_PROCESSOR bae08b81-2d5e-4688-ad6a-13243356654b -ATTRIB_HIDE</span><br><span class="line">powercfg -attributes SUB_PROCESSOR b28a6829-c5f7-444e-8f61-10e24e85c532 -ATTRIB_HIDE</span><br></pre></td></tr></table></figure><p>高级电源设置里”异类线程调度策略”改成”所有处理器”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;x265-crash&quot;&gt;&lt;a href=&quot;#x265-crash&quot; class=&quot;headerlink&quot; title=&quot;x265 crash&quot;&gt;&lt;/a&gt;x265 crash&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="6.etc" scheme="http://fxxs.github.io/categories/6-etc/"/>
    
    
    <category term="Issue" scheme="http://fxxs.github.io/tags/Issue/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://fxxs.github.io/3.Code/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://fxxs.github.io/3.Code/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C/</id>
    <published>2023-07-16T11:12:11.011Z</published>
    <updated>2023-07-16T11:09:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为平时注意力不集中，所以这些可能是碎片化的，有空可能会整理。<br>另外人菜，请批判性的理解</p><p>（水平问题，自己的脚本就不放出来了）</p><p><a href="https://git.concertos.live/OpusGang/EncodeScripts/src/branch/master/Jin.Roh.1999/SDR.720P-ZQ.vpy">https://git.concertos.live/OpusGang/EncodeScripts/src/branch/master/Jin.Roh.1999/SDR.720P-ZQ.vpy</a></p><p>22行开始 对(luma平面 - Y)先降噪。然后STPresso对噪点进行处理之后再打回来。</p><hr><p>对帧的一些操作</p><p><a href="https://git.concertos.live/OpusGang/EncodeScripts/src/branch/master/A.Silent.Voice.2016/SDR.1080p.D-Z0N3.vpy">https://git.concertos.live/OpusGang/EncodeScripts/src/branch/master/A.Silent.Voice.2016/SDR.1080p.D-Z0N3.vpy</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为平时注意力不集中，所以这些可能是碎片化的，有空可能会整理。&lt;br&gt;另外人菜，请批判性的理解&lt;/p&gt;
&lt;p&gt;（水平问题，自己的脚本就不放出来了）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://git.concertos.live/OpusGang/EncodeScrip</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://fxxs.github.io/Scrips/Readme/"/>
    <id>http://fxxs.github.io/Scrips/Readme/</id>
    <published>2023-02-16T10:22:20.874Z</published>
    <updated>2023-02-16T07:24:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里的脚本 flac.bat、opus.bat、cutPicture.py 都需要使用ffmpeg,请确保其位于同级目录或者环境变量中。</p><p>cutPicture.py 来自 <a href="https://github.com/weijiadongyy/videoTool%EF%BC%8C%E4%BD%86%E6%9C%89%E5%BE%88%E5%A4%A7%E7%9A%84%E4%BF%AE%E6%94%B9%E3%80%82">https://github.com/weijiadongyy/videoTool，但有很大的修改。</a> 会需要使用 ffprobe、oxipng，并且如路径或文件名包含全角字符，可能会没法使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的脚本 flac.bat、opus.bat、cutPicture.py 都需要使用ffmpeg,请确保其位于同级目录或者环境变量中。&lt;/p&gt;
&lt;p&gt;cutPicture.py 来自 &lt;a href=&quot;https://github.com/weijiadongyy/vid</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2.0/1.0 音轨比较说明</title>
    <link href="http://fxxs.github.io/4.Audio&amp;sub/2.01.0%E9%9F%B3%E8%BD%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://fxxs.github.io/4.Audio&amp;sub/2.01.0%E9%9F%B3%E8%BD%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2022-11-25T10:31:58.108Z</published>
    <updated>2024-09-22T14:17:36.099Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说2.0是存在24bit音轨的，但是如potplayer默认就会转换成16bit输出。并且24bit音轨通常非常大，在flac格式下，接近16bit的两倍(不过存在假24bit音轨)</p><p>另外DTS 2.0(core,不是DTS-HD MA 2.0)为有损，24bit的DTS 码率(768kbps) &gt; 16 bit Flac(测试的是448 kb&#x2F;s) 后者只是某部影片转换的出来的参考值 （实际中不要这么操作，因为这里是有损算法转无损算法，不做down16的情况码率一般会上升）</p><p>通常压制2.0&#x2F;1.0只建议使用Flac,如感觉flac码率过高，可以转为16bit<br><img src="/../Picture/down16.png" alt="down16"></p><p>相反DD&#x2F;AC3因为压缩效率差，并且因为是固定码率转换，码率给低了效果差，高了很可能比flac还要大(特别是以前有不少AC3 2.0 给640kbps的)</p><p>AAC的话，参考下面那些情况，AAC的每条轨道并不建议超过100kbps，200kpbs在某些情况下已经接近flac</p><p>以The Asphalt Jungle 1950说明(注意这是1轨道)</p><p>原盘</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1:English 1.0ch LPCM Audio @ 1152 kbps</span><br></pre></td></tr></table></figure><p>Remux (24bit FLAC)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Audio #1</span><br><span class="line">ID : 2</span><br><span class="line">Format : FLAC</span><br><span class="line">Format/Info : Free Lossless Audio Codec</span><br><span class="line">Codec ID : A_FLAC</span><br><span class="line">Duration : 1 h 52 min</span><br><span class="line">Bit rate mode : Variable</span><br><span class="line">Bit rate : 492 kb/s</span><br><span class="line">Channel(s) : 1 channel</span><br><span class="line">Channel layout : C</span><br><span class="line">Sampling rate : 48.0 kHz</span><br><span class="line">Frame rate : 11.719 FPS (4096 SPF)</span><br><span class="line">Bit depth : 24 bits</span><br><span class="line">Compression mode : Lossless</span><br><span class="line">Stream size : 396 MiB (2%)</span><br><span class="line">Title : FLAC Audio / 1.0 / 48 kHz / 492 kbps / 24-bit</span><br><span class="line">Writing library : libFLAC 1.3.1 (UTC 2014-11-25)</span><br><span class="line">Language : English</span><br><span class="line">Default : Yes</span><br><span class="line">Forced : No</span><br></pre></td></tr></table></figure><p>Encode(16bit FLAC)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">General</span><br><span class="line">Complete name               : D:\Seed\The.Asphalt.Jungle.1955.CC.Bluray.1080p.x265.10bit.MNHD-FRDS\The.Asphalt.Jungle.1955.CC.Bluray.1080p.x265.10bit.MNHD-FRDS.mkv_2eng.flac</span><br><span class="line">Format                      : FLAC</span><br><span class="line">Format/Info                 : Free Lossless Audio Codec</span><br><span class="line">File size                   : 160 MiB</span><br><span class="line">Duration                    : 1 h 52 min</span><br><span class="line">Overall bit rate mode       : Variable</span><br><span class="line">Overall bit rate            : 198 kb/s</span><br><span class="line">Track name                  : The Asphalt Jungle</span><br><span class="line">Writing application         : Lavf58.35.102</span><br><span class="line"></span><br><span class="line">Audio</span><br><span class="line">Format                      : FLAC</span><br><span class="line">Format/Info                 : Free Lossless Audio Codec</span><br><span class="line">Duration                    : 1 h 52 min</span><br><span class="line">Bit rate mode               : Variable</span><br><span class="line">Bit rate                    : 198 kb/s</span><br><span class="line">Channel(s)                  : 1 channel</span><br><span class="line">Channel layout              : C</span><br><span class="line">Sampling rate               : 48.0 kHz</span><br><span class="line">Bit depth                   : 16 bits</span><br><span class="line">Compression mode            : Lossless</span><br><span class="line">Stream size                 : 160 MiB (100%)</span><br><span class="line">Writing library             : libFLAC 1.2.1 (UTC 2007-09-17)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是16bit 2.0音轨的码率</p><p>以Jin.Bi.Tong.AKA.The.Kid.with.The.Golden.Arm.1979.1080p.Blu-ray.Remux.AVC.DTS-HD.MA.2.0-KRaLiMaRKo举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Audio</span><br><span class="line">ID                          : 2</span><br><span class="line">Format                      : DTS XLL</span><br><span class="line">Format/Info                 : Digital Theater Systems</span><br><span class="line">Commercial name             : DTS-HD Master Audio</span><br><span class="line">Codec ID                    : A_DTS</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Bit rate mode               : Variable</span><br><span class="line">Bit rate                    : 632 kb/s</span><br><span class="line">Channel(s)                  : 2 channels</span><br><span class="line">Channel layout              : L R</span><br><span class="line">Sampling rate               : 48.0 kHz</span><br><span class="line">Frame rate                  : 93.750 FPS (512 SPF)</span><br><span class="line">Bit depth                   : 16 bits</span><br><span class="line">Compression mode            : Lossless</span><br><span class="line">Stream size                 : 384 MiB (2%)</span><br><span class="line">Title                       : Mandarin</span><br><span class="line">Language                    : Chinese</span><br><span class="line">Default                     : Yes</span><br><span class="line">Forced                      : No</span><br></pre></td></tr></table></figure><p>转换为WAV&#x2F;PCM</p><p>(PCM为raw数据，WAV为未经任何压缩的音频格式，PCM因为未封装，故看不到mediainfo信息)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">General</span><br><span class="line">Complete name               : \Jin.Bi.Tong.AKA.The.Kid.with.The.Golden.Arm.1979.1080p.Blu-ray.Remux.AVC.DTS-HD.MA.2.0-KRaLiMaRKo\Jin.Bi.Tong.AKA.The.Kid.with.The.Golden.Arm.1979.1080p.Blu-ray.Remux.AVC.DTS-HD.MA.2.0-KRaLiMaRKo.mkv_2eng.wav</span><br><span class="line">Format                      : Wave</span><br><span class="line">File size                   : 934 MiB</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Overall bit rate mode       : Constant</span><br><span class="line">Overall bit rate            : 1 536 kb/s</span><br><span class="line"></span><br><span class="line">Audio</span><br><span class="line">Format                      : PCM</span><br><span class="line">Format settings             : Little / Signed</span><br><span class="line">Codec ID                    : 00000001-0000-0010-8000-00AA00389B71</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Bit rate mode               : Constant</span><br><span class="line">Bit rate                    : 1 536 kb/s</span><br><span class="line">Channel(s)                  : 2 channels</span><br><span class="line">Channel layout              : L R</span><br><span class="line">Sampling rate               : 48.0 kHz</span><br><span class="line">Bit depth                   : 16 bits</span><br><span class="line">Stream size                 : 934 MiB (100%)</span><br></pre></td></tr></table></figure><p>PCM体积933 MB (978,888,704 字节) 与WAV一致</p><p>转换为FLAC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">General</span><br><span class="line">Complete name               : Jin.Bi.Tong.AKA.The.Kid.with.The.Golden.Arm.1979.1080p.Blu-ray.Remux.AVC.DTS-HD.MA.2.0-KRaLiMaRKo\Jin.Bi.Tong.AKA.The.Kid.with.The.Golden.Arm.1979.1080p.Blu-ray.Remux.AVC.DTS-HD.MA.2.0-KRaLiMaRKo.mkv_2chi.flac</span><br><span class="line">Format                      : FLAC</span><br><span class="line">Format/Info                 : Free Lossless Audio Codec</span><br><span class="line">File size                   : 144 MiB</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Overall bit rate mode       : Variable</span><br><span class="line">Overall bit rate            : 236 kb/s</span><br><span class="line"></span><br><span class="line">Audio</span><br><span class="line">Format                      : FLAC</span><br><span class="line">Format/Info                 : Free Lossless Audio Codec</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Bit rate mode               : Variable</span><br><span class="line">Bit rate                    : 236 kb/s</span><br><span class="line">Channel(s)                  : 2 channels</span><br><span class="line">Channel layout              : L R</span><br><span class="line">Sampling rate               : 48.0 kHz</span><br><span class="line">Bit depth                   : 16 bits</span><br><span class="line">Compression mode            : Lossless</span><br><span class="line">Stream size                 : 144 MiB (100%)</span><br><span class="line">Writing library             : libFLAC 1.3.3 (UTC 2019-08-04)</span><br></pre></td></tr></table></figure><p>用qaac转换 (-V 99)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">General</span><br><span class="line">Unique ID                   : 181232920087942023197824205628061447959 (0x885830D657BDCC069935FFFCF8CEF717)</span><br><span class="line">Complete name               : Jin.Bi.Tong.AKA.The.Kid.with.The.Golden.Arm.1979.1080p.Blu-ray.Remux.AVC.DTS-HD.MA.2.0-KRaLiMaRKo.mkv_2eng.mka</span><br><span class="line">Format                      : Matroska</span><br><span class="line">Format version              : Version 4</span><br><span class="line">File size                   : 55.8 MiB</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Overall bit rate            : 91.8 kb/s</span><br><span class="line">Encoded date                : UTC 2022-01-06 06:36:30</span><br><span class="line">Writing application         : mkvmerge v63.0.0 (&#x27;Everything&#x27;) 64-bit</span><br><span class="line">Writing library             : libebml v1.4.2 + libmatroska v1.6.4</span><br><span class="line"></span><br><span class="line">Audio</span><br><span class="line">ID                          : 1</span><br><span class="line">Format                      : AAC LC</span><br><span class="line">Format/Info                 : Advanced Audio Codec Low Complexity</span><br><span class="line">Codec ID                    : A_AAC-2</span><br><span class="line">Duration                    : 1 h 24 min</span><br><span class="line">Bit rate                    : 90.5 kb/s</span><br><span class="line">Channel(s)                  : 2 channels</span><br><span class="line">Channel layout              : L R</span><br><span class="line">Sampling rate               : 48.0 kHz</span><br><span class="line">Frame rate                  : 46.875 FPS (1024 SPF)</span><br><span class="line">Compression mode            : Lossy</span><br><span class="line">Stream size                 : 55.0 MiB (99%)</span><br><span class="line">Language                    : Armenian</span><br><span class="line">Default                     : Yes</span><br><span class="line">Forced                      : No</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般来说2.0是存在24bit音轨的，但是如potplayer默认就会转换成16bit输出。并且24bit音轨通常非常大，在flac格式下，接近16bit的两倍(不过存在假24bit音轨)&lt;/p&gt;
&lt;p&gt;另外DTS 2.0(core,不是DTS-HD MA 2.0)为有损，</summary>
      
    
    
    
    <category term="4.Audio&amp;sub" scheme="http://fxxs.github.io/categories/4-Audio-sub/"/>
    
    
  </entry>
  
  <entry>
    <title>对比</title>
    <link href="http://fxxs.github.io/6.etc/Compare/"/>
    <id>http://fxxs.github.io/6.etc/Compare/</id>
    <published>2022-10-24T10:51:16.908Z</published>
    <updated>2024-09-20T14:53:52.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="psy-rd-amp-psy-rdoq"><a href="#psy-rd-amp-psy-rdoq" class="headerlink" title="psy-rd &amp; psy-rdoq"></a>psy-rd &amp; psy-rdoq</h1><p>第一次的对比图，当时发现 psy-rdoq 的提高会大幅度增加码率，psy-rd调高起了反效果，故淘汰<br><a href="https://slow.pics/c/mW5NI4v1">https://slow.pics/c/mW5NI4v1</a></p><p>加了一组psy-rd 1.5 psy-rdoq 5 的 然后发现画面反而好了些<br><a href="https://slow.pics/c/1xLeXz7P">https://slow.pics/c/1xLeXz7P</a></p><p>然后再加了一个通常参数 crf开到 19 码率差不多的<br><a href="https://slow.pics/c/0RJZoJyW">https://slow.pics/c/0RJZoJyW</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>有问题调crf就完了，psy-rd 开到2,高码下会起反作用。(主要之前看人说高码要开2，如果18Mbps都不算高码的话当我没说)<br>rdoq 开高也不太有必要，画面会有些浮肿</p><h2 id="–crf-20-0-–psy-rd-1-50-–psy-rdoq-1-16053-14-kb-x2F-s"><a href="#–crf-20-0-–psy-rd-1-50-–psy-rdoq-1-16053-14-kb-x2F-s" class="headerlink" title="–crf 20.0 –psy-rd 1.50 –psy-rdoq 1 16053.14 kb&#x2F;s"></a>–crf 20.0 –psy-rd 1.50 –psy-rdoq 1 16053.14 kb&#x2F;s</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[2022-05-26][09:57:18] Simple x264 Launcher (Build #1216), built 2021-12-08</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Job started at 2022-05-26, 09:57:18.</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Source file :  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ.vpy</span><br><span class="line">[2022-05-26][09:57:18] Output file :  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ.hevc</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] --- SYSTEMINFO ---</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Binary Path : C:\x264_launcher</span><br><span class="line">[2022-05-26][09:57:18] Avisynth    : No</span><br><span class="line">[2022-05-26][09:57:18] VapourSynth : Yes</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] --- SETTINGS ---</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Encoder : x265 (HEVC/H.265), 64-Bit (x64), 10-Bit</span><br><span class="line">[2022-05-26][09:57:18] Source  : VapourSynth (vpy)</span><br><span class="line">[2022-05-26][09:57:18] RC Mode : CRF</span><br><span class="line">[2022-05-26][09:57:18] Preset  : placebo</span><br><span class="line">[2022-05-26][09:57:18] Tuning  : &lt;None&gt;</span><br><span class="line">[2022-05-26][09:57:18] Profile : &lt;Unrestricted&gt;</span><br><span class="line">[2022-05-26][09:57:18] Custom  : --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 1.50 --psy-rdoq 1.00 --cbqpoffs -2 --crqpoffs -2</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] --- CHECK VERSION ---</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Detect video encoder version:</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Creating process:</span><br><span class="line">[2022-05-26][09:57:18] C:\x264_launcher\toolset\x64\x265_x64.exe --version</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-26][09:57:18] x265 [info]: build info [Windows][MSVC 1931][64 bit] 8bit+10bit+12bit</span><br><span class="line">[2022-05-26][09:57:18] x265 [info]: using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Detect video source version:</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Creating process:</span><br><span class="line">[2022-05-26][09:57:18] C:\x264_launcher\extra\VapourSynth-64\vspipe.exe --version</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] VapourSynth Video Processing Library</span><br><span class="line">[2022-05-26][09:57:18] Copyright (c) 2012-2021 Fredrik Mellbin</span><br><span class="line">[2022-05-26][09:57:18] Core R58</span><br><span class="line">[2022-05-26][09:57:18] API R4.0</span><br><span class="line">[2022-05-26][09:57:18] API R3.6</span><br><span class="line">[2022-05-26][09:57:18] Options: -</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] &gt; x265 version: 3.5+36</span><br><span class="line">[2022-05-26][09:57:18] &gt; VapourSynth version: r58 (API r3)</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] --- GET SOURCE INFO ---</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:18] Creating process:</span><br><span class="line">[2022-05-26][09:57:18] C:\x264_launcher\extra\VapourSynth-64\vspipe.exe --info  \come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq.vpy -</span><br><span class="line">[2022-05-26][09:57:18] </span><br><span class="line">[2022-05-26][09:57:20] Width: 1476</span><br><span class="line">[2022-05-26][09:57:20] Height: 1080</span><br><span class="line">[2022-05-26][09:57:20] Frames: 205659</span><br><span class="line">[2022-05-26][09:57:20] FPS: 24000/1001 (23.976 fps)</span><br><span class="line">[2022-05-26][09:57:20] Format Name: YUV420P10</span><br><span class="line">[2022-05-26][09:57:20] Color Family: YUV</span><br><span class="line">[2022-05-26][09:57:20] Alpha: No</span><br><span class="line">[2022-05-26][09:57:20] Sample Type: Integer</span><br><span class="line">[2022-05-26][09:57:20] Bits: 10</span><br><span class="line">[2022-05-26][09:57:20] SubSampling W: 1</span><br><span class="line">[2022-05-26][09:57:20] SubSampling H: 1</span><br><span class="line">[2022-05-26][09:57:20] </span><br><span class="line">[2022-05-26][09:57:20] Resolution: 1476 x 1080</span><br><span class="line">[2022-05-26][09:57:20] Frame Rate: 24000/1001</span><br><span class="line">[2022-05-26][09:57:20] No. Frames: 205659</span><br><span class="line">[2022-05-26][09:57:20] </span><br><span class="line">[2022-05-26][09:57:20] --- ENCODING VIDEO ---</span><br><span class="line">[2022-05-26][09:57:20] </span><br><span class="line">[2022-05-26][09:57:20] Creating input process:</span><br><span class="line">[2022-05-26][09:57:20] C:\x264_launcher\extra\VapourSynth-64\vspipe.exe --y4m  \come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq.vpy -</span><br><span class="line">[2022-05-26][09:57:20] </span><br><span class="line">[2022-05-26][09:57:20] Creating encoder process:</span><br><span class="line">[2022-05-26][09:57:20] C:\x264_launcher\toolset\x64\x265_x64.exe -D 10 --crf 20.0 --preset placebo --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 1.50 --psy-rdoq 1.00 --cbqpoffs -2 --crqpoffs -2 --output Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ.hevc --frames 205659 --y4m -</span><br><span class="line">[2022-05-26][09:57:20] </span><br><span class="line">[2022-05-26][09:57:21] y4m [info]: 1476x1080 fps 24000/1001 i420p10 unknown frame count</span><br><span class="line">[2022-05-26][09:57:22] raw [info]: output file:  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ.hevc</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: build info [Windows][MSVC 1931][64 bit] 10bit</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Main 10 profile, Level-5.1 (High tier)</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Thread pool 0 using 16 threads on numa nodes 0</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Thread pool 1 using 16 threads on numa nodes 1</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Slices : 1</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: frame threads / pool features : 5 / wpp(34 rows)+pmode</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Coding QT: max CU size, min CU size : 32 / 8</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Residual QT: max TU size, max depth : 32 / 4 inter / 4 intra</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: ME / range / subpel / merge : star / 57 / 7 / 5</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Keyframe min / max / scenecut / bias : 1 / 250 / 40 / 5.00</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Cb/Cr QP Offset : -2 / -2</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Lookahead / bframes / badapt : 100 / 8 / 2</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: b-pyramid / weightp / weightb : 1 / 1 / 1</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: References / ref-limit cu / depth : 5 / off / off</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: AQ: mode / str / qg-size / cu-tree : 1 / 1.0 / 8 / 0</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: Rate Control / qCompress : CRF-20.0 / 0.65</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: VBV/HRD buffer / max-rate / init : 160000 / 160000 / 0.900</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: tools: rd=4 psy-rd=1.50 rdoq=2 psy-rdoq=1.00 tskip signhide tmvp</span><br><span class="line">[2022-05-26][09:57:22] x265 [info]: tools: b-intra deblock(tC=-3:B=-3)</span><br><span class="line">[2022-05-27][09:18:31] x265 [info]: frame I: 1045, Avg QP:19.53 kb/s: 27441.65</span><br><span class="line">[2022-05-27][09:18:31] x265 [info]: frame P: 31113, Avg QP:20.69 kb/s: 21685.32</span><br><span class="line">[2022-05-27][09:18:31] x265 [info]: frame B: 173501, Avg QP:21.98 kb/s: 14974.56</span><br><span class="line">[2022-05-27][09:18:31] x265 [info]: Weighted P-Frames: Y:22.0% UV:4.4%</span><br><span class="line">[2022-05-27][09:18:31] x265 [info]: Weighted B-Frames: Y:19.0% UV:2.2%</span><br><span class="line">[2022-05-27][09:18:31] x265 [info]: consecutive B-frames: 4.4% 0.9% 1.6% 14.4% 8.3% 21.7% 10.6% 17.7% 20.4%</span><br><span class="line">[2022-05-27][09:18:31] encoded 205659 frames in 84069.87s (2.45 fps), 16053.14 kb/s, Avg QP:21.77</span><br><span class="line">[2022-05-27][09:18:32] vpyp [info]: Deprecated option --y4m specified, use -c y4m instead</span><br><span class="line">[2022-05-27][09:18:32] vpyp [info]: Output 205659 frames in 84057.14 seconds (2.45 fps)</span><br><span class="line">[2022-05-27][09:18:32] Final file size is 16.0 GB bytes.</span><br><span class="line">[2022-05-27][09:18:32] </span><br><span class="line">[2022-05-27][09:18:32] --- COMPLETED ---</span><br><span class="line">[2022-05-27][09:18:32] </span><br><span class="line">[2022-05-27][09:18:32] Job finished at 2022-05-27, 09:18:32. Process took 1401 minutes, 14 seconds.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Video</span><br><span class="line">Format                      : HEVC</span><br><span class="line">Format/Info                 : High Efficiency Video Coding</span><br><span class="line">Format profile              : Main 10@L5.1@High</span><br><span class="line">Width                       : 1 476 pixels</span><br><span class="line">Height                      : 1 080 pixels</span><br><span class="line">Display aspect ratio        : 4:3</span><br><span class="line">Frame rate                  : 23.976 (24000/1001) FPS</span><br><span class="line">Color space                 : YUV</span><br><span class="line">Chroma subsampling          : 4:2:0</span><br><span class="line">Bit depth                   : 10 bits</span><br><span class="line">Writing library             : x265 3.5+36-9b59d4554:[Windows][MSVC 1931][64 bit] 10bit</span><br><span class="line">Encoding settings           : cpuid=1049583 / frame-threads=5 / numa-pools=16,16 / wpp / pmode / no-pme / no-psnr / no-ssim / log-level=2 / input-csp=1 / input-res=1476x1080 / interlace=0 / total-frames=205659 / level-idc=51 / high-tier=1 / uhd-bd=0 / ref=5 / no-allow-non-conformance / no-repeat-headers / annexb / no-aud / no-eob / no-eos / no-hrd / info / hash=0 / no-temporal-layers / no-open-gop / min-keyint=1 / keyint=250 / gop-lookahead=0 / bframes=8 / b-adapt=2 / b-pyramid / bframe-bias=0 / rc-lookahead=100 / lookahead-slices=0 / scenecut=40 / no-hist-scenecut / radl=0 / no-splice / no-intra-refresh / ctu=32 / min-cu-size=8 / no-rect / no-amp / max-tu-size=32 / tu-inter-depth=4 / tu-intra-depth=4 / limit-tu=0 / rdoq-level=2 / dynamic-rd=0.00 / no-ssim-rd / signhide / tskip / nr-intra=0 / nr-inter=0 / no-constrained-intra / no-strong-intra-smoothing / max-merge=5 / limit-refs=0 / no-limit-modes / me=3 / subme=7 / merange=57 / temporal-mvp / no-frame-dup / no-hme / weightp / weightb / no-analyze-src-pics / deblock=-3:-3 / no-sao / no-sao-non-deblock / rd=4 / selective-sao=0 / no-early-skip / no-rskip / no-fast-intra / no-tskip-fast / no-cu-lossless / b-intra / no-splitrd-skip / rdpenalty=0 / psy-rd=1.50 / psy-rdoq=1.00 / no-rd-refine / no-lossless / cbqpoffs=-2 / crqpoffs=-2 / rc=crf / crf=20.0 / qcomp=0.65 / qpstep=4 / stats-write=0 / stats-read=0 / vbv-maxrate=160000 / vbv-bufsize=160000 / vbv-init=0.9 / min-vbv-fullness=50.0 / max-vbv-fullness=80.0 / crf-max=0.0 / crf-min=0.0 / ipratio=1.30 / pbratio=1.20 / aq-mode=1 / aq-strength=1.00 / no-cutree / zone-count=0 / no-strict-cbr / qg-size=8 / no-rc-grain / qpmax=69 / qpmin=0 / no-const-vbv / sar=0 / overscan=0 / videoformat=5 / range=0 / colorprim=1 / transfer=1 / colormatrix=1 / chromaloc=0 / display-window=0 / cll=0,0 / min-luma=0 / max-luma=1023 / log2-max-poc-lsb=8 / vui-timing-info / vui-hrd-info / slices=1 / no-opt-qp-pps / no-opt-ref-list-length-pps / no-multi-pass-opt-rps / scenecut-bias=0.05 / hist-threshold=0.03 / no-opt-cu-delta-qp / no-aq-motion / no-hdr10 / no-hdr10-opt / no-dhdr10-opt / no-idr-recovery-sei / analysis-reuse-level=0 / analysis-save-reuse-level=0 / analysis-load-reuse-level=0 / scale-factor=0 / refine-intra=0 / refine-inter=0 / refine-mv=1 / refine-ctu-distortion=0 / no-limit-sao / ctu-info=0 / no-lowpass-dct / refine-analysis-type=0 / copy-pic=1 / max-ausize-factor=1.0 / no-dynamic-refine / no-single-sei / no-hevc-aq / no-svt / no-field / qp-adaptation-range=1.00 / scenecut-aware-qp=0conformance-window-offsets / right=0 / bottom=0 / decoder-max-rate=0 / no-vbv-live-multi-pass</span><br><span class="line">Color range                 : Limited</span><br><span class="line">Color primaries             : BT.709</span><br><span class="line">Transfer characteristics    : BT.709</span><br><span class="line">Matrix coefficients         : BT.709</span><br></pre></td></tr></table></figure><h2 id="–crf-20-0-–psy-rd-2-–psy-rdoq-1-00-16477-59-kb-x2F-s"><a href="#–crf-20-0-–psy-rd-2-–psy-rdoq-1-00-16477-59-kb-x2F-s" class="headerlink" title="–crf 20.0 –psy-rd 2 –psy-rdoq 1.00 16477.59 kb&#x2F;s"></a>–crf 20.0 –psy-rd 2 –psy-rdoq 1.00 16477.59 kb&#x2F;s</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[2022-05-27][11:52:26] Simple x264 Launcher (Build #1216), built 2021-12-08</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Job started at 2022-05-27, 11:52:26.</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Source file :  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_Rerip.vpy</span><br><span class="line">[2022-05-27][11:52:26] Output file :  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_Rerip.hevc</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] --- SYSTEMINFO ---</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Binary Path : C:\x264_launcher</span><br><span class="line">[2022-05-27][11:52:26] Avisynth    : No</span><br><span class="line">[2022-05-27][11:52:26] VapourSynth : Yes</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] --- SETTINGS ---</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Encoder : x265 (HEVC/H.265), 64-Bit (x64), 10-Bit</span><br><span class="line">[2022-05-27][11:52:26] Source  : VapourSynth (vpy)</span><br><span class="line">[2022-05-27][11:52:26] RC Mode : CRF</span><br><span class="line">[2022-05-27][11:52:26] Preset  : placebo</span><br><span class="line">[2022-05-27][11:52:26] Tuning  : &lt;None&gt;</span><br><span class="line">[2022-05-27][11:52:26] Profile : &lt;Unrestricted&gt;</span><br><span class="line">[2022-05-27][11:52:26] Custom  : --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 2 --psy-rdoq 1.00 --cbqpoffs -2 --crqpoffs -2</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] --- CHECK VERSION ---</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Detect video encoder version:</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Creating process:</span><br><span class="line">[2022-05-27][11:52:26] C:\x264_launcher\toolset\x64\x265_x64.exe --version</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-27][11:52:26] x265 [info]: build info [Windows][MSVC 1931][64 bit] 8bit+10bit+12bit</span><br><span class="line">[2022-05-27][11:52:26] x265 [info]: using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Detect video source version:</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Creating process:</span><br><span class="line">[2022-05-27][11:52:26] C:\x264_launcher\extra\VapourSynth-64\vspipe.exe --version</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] VapourSynth Video Processing Library</span><br><span class="line">[2022-05-27][11:52:26] Copyright (c) 2012-2021 Fredrik Mellbin</span><br><span class="line">[2022-05-27][11:52:26] Core R58</span><br><span class="line">[2022-05-27][11:52:26] API R4.0</span><br><span class="line">[2022-05-27][11:52:26] API R3.6</span><br><span class="line">[2022-05-27][11:52:26] Options: -</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] &gt; x265 version: 3.5+36</span><br><span class="line">[2022-05-27][11:52:26] &gt; VapourSynth version: r58 (API r3)</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] --- GET SOURCE INFO ---</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:26] Creating process:</span><br><span class="line">[2022-05-27][11:52:26] C:\x264_launcher\extra\VapourSynth-64\vspipe.exe --info  \come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_rerip.vpy -</span><br><span class="line">[2022-05-27][11:52:26] </span><br><span class="line">[2022-05-27][11:52:28] Width: 1476</span><br><span class="line">[2022-05-27][11:52:28] Height: 1080</span><br><span class="line">[2022-05-27][11:52:28] Frames: 205659</span><br><span class="line">[2022-05-27][11:52:28] FPS: 24000/1001 (23.976 fps)</span><br><span class="line">[2022-05-27][11:52:28] Format Name: YUV420P10</span><br><span class="line">[2022-05-27][11:52:28] Color Family: YUV</span><br><span class="line">[2022-05-27][11:52:28] Alpha: No</span><br><span class="line">[2022-05-27][11:52:28] Sample Type: Integer</span><br><span class="line">[2022-05-27][11:52:28] Bits: 10</span><br><span class="line">[2022-05-27][11:52:28] SubSampling W: 1</span><br><span class="line">[2022-05-27][11:52:28] SubSampling H: 1</span><br><span class="line">[2022-05-27][11:52:28] </span><br><span class="line">[2022-05-27][11:52:28] Resolution: 1476 x 1080</span><br><span class="line">[2022-05-27][11:52:28] Frame Rate: 24000/1001</span><br><span class="line">[2022-05-27][11:52:28] No. Frames: 205659</span><br><span class="line">[2022-05-27][11:52:28] </span><br><span class="line">[2022-05-27][11:52:28] --- ENCODING VIDEO ---</span><br><span class="line">[2022-05-27][11:52:28] </span><br><span class="line">[2022-05-27][11:52:28] Creating input process:</span><br><span class="line">[2022-05-27][11:52:28] C:\x264_launcher\extra\VapourSynth-64\vspipe.exe --y4m  \come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_rerip.vpy -</span><br><span class="line">[2022-05-27][11:52:28] </span><br><span class="line">[2022-05-27][11:52:28] Creating encoder process:</span><br><span class="line">[2022-05-27][11:52:28] C:\x264_launcher\toolset\x64\x265_x64.exe -D 10 --crf 20.0 --preset placebo --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 2 --psy-rdoq 1.00 --cbqpoffs -2 --crqpoffs -2 --output  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_Rerip.hevc --frames 205659 --y4m -</span><br><span class="line">[2022-05-27][11:52:28] </span><br><span class="line">[2022-05-27][11:52:29] y4m [info]: 1476x1080 fps 24000/1001 i420p10 unknown frame count</span><br><span class="line">[2022-05-27][11:52:29] raw [info]: output file:  \Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_Rerip.hevc</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: build info [Windows][MSVC 1931][64 bit] 10bit</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Main 10 profile, Level-5.1 (High tier)</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Thread pool 0 using 16 threads on numa nodes 0</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Thread pool 1 using 16 threads on numa nodes 1</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Slices : 1</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: frame threads / pool features : 5 / wpp(34 rows)+pmode</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Coding QT: max CU size, min CU size : 32 / 8</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Residual QT: max TU size, max depth : 32 / 4 inter / 4 intra</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: ME / range / subpel / merge : star / 57 / 7 / 5</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Keyframe min / max / scenecut / bias : 1 / 250 / 40 / 5.00</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Cb/Cr QP Offset : -2 / -2</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Lookahead / bframes / badapt : 100 / 8 / 2</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: b-pyramid / weightp / weightb : 1 / 1 / 1</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: References / ref-limit cu / depth : 5 / off / off</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: AQ: mode / str / qg-size / cu-tree : 1 / 1.0 / 8 / 0</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: Rate Control / qCompress : CRF-20.0 / 0.65</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: VBV/HRD buffer / max-rate / init : 160000 / 160000 / 0.900</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: tools: rd=4 psy-rd=2.00 rdoq=2 psy-rdoq=1.00 tskip signhide tmvp</span><br><span class="line">[2022-05-27][11:52:29] x265 [info]: tools: b-intra deblock(tC=-3:B=-3)</span><br><span class="line">[2022-05-28][11:15:27] x265 [info]: frame I: 1045, Avg QP:19.53 kb/s: 27758.79</span><br><span class="line">[2022-05-28][11:15:27] x265 [info]: frame P: 31113, Avg QP:20.69 kb/s: 22161.89</span><br><span class="line">[2022-05-28][11:15:27] x265 [info]: frame B: 173501, Avg QP:21.98 kb/s: 15390.31</span><br><span class="line">[2022-05-28][11:15:27] x265 [info]: Weighted P-Frames: Y:22.0% UV:4.4%</span><br><span class="line">[2022-05-28][11:15:27] x265 [info]: Weighted B-Frames: Y:19.0% UV:2.2%</span><br><span class="line">[2022-05-28][11:15:27] x265 [info]: consecutive B-frames: 4.4% 0.9% 1.6% 14.4% 8.3% 21.7% 10.6% 17.7% 20.4%</span><br><span class="line">[2022-05-28][11:15:27] encoded 205659 frames in 84178.02s (2.44 fps), 16477.59 kb/s, Avg QP:21.78</span><br><span class="line">[2022-05-28][11:15:27] vpyp [info]: Deprecated option --y4m specified, use -c y4m instead</span><br><span class="line">[2022-05-28][11:15:27] vpyp [info]: Output 205659 frames in 84164.51 seconds (2.44 fps)</span><br><span class="line">[2022-05-28][11:15:27] Final file size is 16.5 GB bytes.</span><br><span class="line">[2022-05-28][11:15:27] </span><br><span class="line">[2022-05-28][11:15:27] --- COMPLETED ---</span><br><span class="line">[2022-05-28][11:15:27] </span><br><span class="line">[2022-05-28][11:15:27] Job finished at 2022-05-28, 11:15:27. Process took 1403 minutes, 2 seconds.</span><br></pre></td></tr></table></figure><h2 id="–crf-20-0-–psy-rd-2-–psy-rdoq-5-00-18741-22-kb-x2F-s"><a href="#–crf-20-0-–psy-rd-2-–psy-rdoq-5-00-18741-22-kb-x2F-s" class="headerlink" title="–crf 20.0 –psy-rd 2 –psy-rdoq 5.00 18741.22 kb&#x2F;s"></a>–crf 20.0 –psy-rd 2 –psy-rdoq 5.00 18741.22 kb&#x2F;s</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[2022-05-27][11:53:22] Simple x264 Launcher (Build #1216), built 2021-12-08</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Job started at 2022-05-27, 11:53:22.</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Source file : Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_High RDOP.vpy</span><br><span class="line">[2022-05-27][11:53:22] Output file : Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_High RDOP.hevc</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] --- SYSTEMINFO ---</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Binary Path : Z:\MediaTool\x264_launcher</span><br><span class="line">[2022-05-27][11:53:22] Avisynth    : No</span><br><span class="line">[2022-05-27][11:53:22] VapourSynth : Yes</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] --- SETTINGS ---</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Encoder : x265 (HEVC/H.265), 64-Bit (x64), 10-Bit</span><br><span class="line">[2022-05-27][11:53:22] Source  : VapourSynth (vpy)</span><br><span class="line">[2022-05-27][11:53:22] RC Mode : CRF</span><br><span class="line">[2022-05-27][11:53:22] Preset  : placebo</span><br><span class="line">[2022-05-27][11:53:22] Tuning  : &lt;None&gt;</span><br><span class="line">[2022-05-27][11:53:22] Profile : &lt;Unrestricted&gt;</span><br><span class="line">[2022-05-27][11:53:22] Custom  : --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 2 --psy-rdoq 5.00 --cbqpoffs -2 --crqpoffs -2</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] --- CHECK VERSION ---</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Detect video encoder version:</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Creating process:</span><br><span class="line">[2022-05-27][11:53:22] Z:\MediaTool\x264_launcher\toolset\x64\x265_x64.exe --version</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-27][11:53:22] x265 [info]: build info [Windows][MSVC 1931][64 bit] 8bit+10bit+12bit</span><br><span class="line">[2022-05-27][11:53:22] x265 [info]: using cpu capabilities: MMX2 SSE2Fast LZCNT SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Detect video source version:</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:22] Creating process:</span><br><span class="line">[2022-05-27][11:53:22] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --version</span><br><span class="line">[2022-05-27][11:53:22] </span><br><span class="line">[2022-05-27][11:53:24] VapourSynth Video Processing Library</span><br><span class="line">[2022-05-27][11:53:24] Copyright (c) 2012-2021 Fredrik Mellbin</span><br><span class="line">[2022-05-27][11:53:24] Core R58</span><br><span class="line">[2022-05-27][11:53:24] API R4.0</span><br><span class="line">[2022-05-27][11:53:24] API R3.6</span><br><span class="line">[2022-05-27][11:53:24] Options: -</span><br><span class="line">[2022-05-27][11:53:24] </span><br><span class="line">[2022-05-27][11:53:24] &gt; x265 version: 3.5+36</span><br><span class="line">[2022-05-27][11:53:24] &gt; VapourSynth version: r58 (API r3)</span><br><span class="line">[2022-05-27][11:53:24] </span><br><span class="line">[2022-05-27][11:53:24] --- GET SOURCE INFO ---</span><br><span class="line">[2022-05-27][11:53:24] </span><br><span class="line">[2022-05-27][11:53:24] Creating process:</span><br><span class="line">[2022-05-27][11:53:24] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --info &quot;Z:\Rip\come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_high rdop.vpy&quot; -</span><br><span class="line">[2022-05-27][11:53:24] </span><br><span class="line">[2022-05-27][11:53:26] Width: 1476</span><br><span class="line">[2022-05-27][11:53:26] Height: 1080</span><br><span class="line">[2022-05-27][11:53:26] Frames: 205659</span><br><span class="line">[2022-05-27][11:53:26] FPS: 24000/1001 (23.976 fps)</span><br><span class="line">[2022-05-27][11:53:26] Format Name: YUV420P10</span><br><span class="line">[2022-05-27][11:53:26] Color Family: YUV</span><br><span class="line">[2022-05-27][11:53:26] Alpha: No</span><br><span class="line">[2022-05-27][11:53:26] Sample Type: Integer</span><br><span class="line">[2022-05-27][11:53:26] Bits: 10</span><br><span class="line">[2022-05-27][11:53:26] SubSampling W: 1</span><br><span class="line">[2022-05-27][11:53:26] SubSampling H: 1</span><br><span class="line">[2022-05-27][11:53:26] </span><br><span class="line">[2022-05-27][11:53:26] Resolution: 1476 x 1080</span><br><span class="line">[2022-05-27][11:53:26] Frame Rate: 24000/1001</span><br><span class="line">[2022-05-27][11:53:26] No. Frames: 205659</span><br><span class="line">[2022-05-27][11:53:26] </span><br><span class="line">[2022-05-27][11:53:26] --- ENCODING VIDEO ---</span><br><span class="line">[2022-05-27][11:53:26] </span><br><span class="line">[2022-05-27][11:53:26] Creating input process:</span><br><span class="line">[2022-05-27][11:53:26] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --y4m &quot;Z:\Rip\come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_high rdop.vpy&quot; -</span><br><span class="line">[2022-05-27][11:53:26] </span><br><span class="line">[2022-05-27][11:53:26] Creating encoder process:</span><br><span class="line">[2022-05-27][11:53:26] Z:\MediaTool\x264_launcher\toolset\x64\x265_x64.exe -D 10 --crf 20.0 --preset placebo --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 2 --psy-rdoq 5.00 --cbqpoffs -2 --crqpoffs -2 --output &quot;Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_High RDOP.hevc&quot; --frames 205659 --y4m -</span><br><span class="line">[2022-05-27][11:53:26] </span><br><span class="line">[2022-05-27][11:53:28] y4m [info]: 1476x1080 fps 24000/1001 i420p10 unknown frame count</span><br><span class="line">[2022-05-27][11:53:28] raw [info]: output file: Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_High RDOP.hevc</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: build info [Windows][MSVC 1931][64 bit] 10bit</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: using cpu capabilities: MMX2 SSE2Fast LZCNT SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Main 10 profile, Level-5.1 (High tier)</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Thread pool 0 using 20 threads on numa nodes 0</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Thread pool 1 using 20 threads on numa nodes 1</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Slices : 1</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: frame threads / pool features : 5 / wpp(34 rows)+pmode</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Coding QT: max CU size, min CU size : 32 / 8</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Residual QT: max TU size, max depth : 32 / 4 inter / 4 intra</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: ME / range / subpel / merge : star / 57 / 7 / 5</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Keyframe min / max / scenecut / bias : 1 / 250 / 40 / 5.00</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Cb/Cr QP Offset : -2 / -2</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Lookahead / bframes / badapt : 100 / 8 / 2</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: b-pyramid / weightp / weightb : 1 / 1 / 1</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: References / ref-limit cu / depth : 5 / off / off</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: AQ: mode / str / qg-size / cu-tree : 1 / 1.0 / 8 / 0</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: Rate Control / qCompress : CRF-20.0 / 0.65</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: VBV/HRD buffer / max-rate / init : 160000 / 160000 / 0.900</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: tools: rd=4 psy-rd=2.00 rdoq=2 psy-rdoq=5.00 tskip signhide tmvp</span><br><span class="line">[2022-05-27][11:53:28] x265 [info]: tools: b-intra deblock(tC=-3:B=-3)</span><br><span class="line">[2022-05-28][02:45:38] x265 [info]: frame I: 1045, Avg QP:19.53 kb/s: 31431.55</span><br><span class="line">[2022-05-28][02:45:38] x265 [info]: frame P: 31113, Avg QP:20.68 kb/s: 25418.25</span><br><span class="line">[2022-05-28][02:45:38] x265 [info]: frame B: 173501, Avg QP:21.95 kb/s: 17467.43</span><br><span class="line">[2022-05-28][02:45:38] x265 [info]: Weighted P-Frames: Y:22.0% UV:4.4%</span><br><span class="line">[2022-05-28][02:45:38] x265 [info]: Weighted B-Frames: Y:19.0% UV:2.2%</span><br><span class="line">[2022-05-28][02:45:38] x265 [info]: consecutive B-frames: 4.4% 0.9% 1.6% 14.4% 8.3% 21.7% 10.6% 17.7% 20.4%</span><br><span class="line">[2022-05-28][02:45:38] encoded 205659 frames in 53530.68s (3.84 fps), 18741.22 kb/s, Avg QP:21.74</span><br><span class="line">[2022-05-28][02:45:39] vpyp [info]: Deprecated option --y4m specified, use -c y4m instead</span><br><span class="line">[2022-05-28][02:45:39] vpyp [info]: Output 205659 frames in 53523.37 seconds (3.84 fps)</span><br><span class="line">[2022-05-28][02:45:39] Final file size is 18.7 GB bytes.</span><br><span class="line">[2022-05-28][02:45:39] </span><br><span class="line">[2022-05-28][02:45:39] --- COMPLETED ---</span><br><span class="line">[2022-05-28][02:45:39] </span><br><span class="line">[2022-05-28][02:45:39] Job finished at 2022-05-28, 02:45:39. Process took 892 minutes, 16 seconds.</span><br></pre></td></tr></table></figure><h2 id="–crf-20-–psy-rd-1-5-–psy-rdoq-5-00-18293-03-kb-x2F-s"><a href="#–crf-20-–psy-rd-1-5-–psy-rdoq-5-00-18293-03-kb-x2F-s" class="headerlink" title="–crf 20 –psy-rd 1.5 –psy-rdoq 5.00 18293.03 kb&#x2F;s"></a>–crf 20 –psy-rd 1.5 –psy-rdoq 5.00 18293.03 kb&#x2F;s</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[2022-05-30][10:55:04] Simple x264 Launcher (Build #1216), built 2021-12-08</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Job started at 2022-05-30, 10:55:04.</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Source file : Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_rd1.5_RDOq5.vpy</span><br><span class="line">[2022-05-30][10:55:04] Output file : Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_rd1.5_RDOq5.hevc</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] --- SYSTEMINFO ---</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Binary Path : Z:\MediaTool\x264_launcher</span><br><span class="line">[2022-05-30][10:55:04] Avisynth    : No</span><br><span class="line">[2022-05-30][10:55:04] VapourSynth : Yes</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] --- SETTINGS ---</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Encoder : x265 (HEVC/H.265), 64-Bit (x64), 10-Bit</span><br><span class="line">[2022-05-30][10:55:04] Source  : VapourSynth (vpy)</span><br><span class="line">[2022-05-30][10:55:04] RC Mode : CRF</span><br><span class="line">[2022-05-30][10:55:04] Preset  : placebo</span><br><span class="line">[2022-05-30][10:55:04] Tuning  : &lt;None&gt;</span><br><span class="line">[2022-05-30][10:55:04] Profile : &lt;Unrestricted&gt;</span><br><span class="line">[2022-05-30][10:55:04] Custom  : --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 1.5 --psy-rdoq 5.00 --cbqpoffs -2 --crqpoffs -2</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] --- CHECK VERSION ---</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Detect video encoder version:</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Creating process:</span><br><span class="line">[2022-05-30][10:55:04] Z:\MediaTool\x264_launcher\toolset\x64\x265_x64.exe --version</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-30][10:55:04] x265 [info]: build info [Windows][MSVC 1931][64 bit] 8bit+10bit+12bit</span><br><span class="line">[2022-05-30][10:55:04] x265 [info]: using cpu capabilities: MMX2 SSE2Fast LZCNT SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Detect video source version:</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:04] Creating process:</span><br><span class="line">[2022-05-30][10:55:04] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --version</span><br><span class="line">[2022-05-30][10:55:04] </span><br><span class="line">[2022-05-30][10:55:07] VapourSynth Video Processing Library</span><br><span class="line">[2022-05-30][10:55:07] Copyright (c) 2012-2021 Fredrik Mellbin</span><br><span class="line">[2022-05-30][10:55:07] Core R58</span><br><span class="line">[2022-05-30][10:55:07] API R4.0</span><br><span class="line">[2022-05-30][10:55:07] API R3.6</span><br><span class="line">[2022-05-30][10:55:07] Options: -</span><br><span class="line">[2022-05-30][10:55:07] </span><br><span class="line">[2022-05-30][10:55:07] &gt; x265 version: 3.5+36</span><br><span class="line">[2022-05-30][10:55:07] &gt; VapourSynth version: r58 (API r3)</span><br><span class="line">[2022-05-30][10:55:07] </span><br><span class="line">[2022-05-30][10:55:07] --- GET SOURCE INFO ---</span><br><span class="line">[2022-05-30][10:55:07] </span><br><span class="line">[2022-05-30][10:55:07] Creating process:</span><br><span class="line">[2022-05-30][10:55:07] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --info Z:\Rip\come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_rd1.5_rdoq5.vpy -</span><br><span class="line">[2022-05-30][10:55:07] </span><br><span class="line">[2022-05-30][10:55:09] Width: 1476</span><br><span class="line">[2022-05-30][10:55:09] Height: 1080</span><br><span class="line">[2022-05-30][10:55:09] Frames: 205659</span><br><span class="line">[2022-05-30][10:55:09] FPS: 24000/1001 (23.976 fps)</span><br><span class="line">[2022-05-30][10:55:09] Format Name: YUV420P10</span><br><span class="line">[2022-05-30][10:55:09] Color Family: YUV</span><br><span class="line">[2022-05-30][10:55:09] Alpha: No</span><br><span class="line">[2022-05-30][10:55:09] Sample Type: Integer</span><br><span class="line">[2022-05-30][10:55:09] Bits: 10</span><br><span class="line">[2022-05-30][10:55:09] SubSampling W: 1</span><br><span class="line">[2022-05-30][10:55:09] SubSampling H: 1</span><br><span class="line">[2022-05-30][10:55:09] </span><br><span class="line">[2022-05-30][10:55:09] Resolution: 1476 x 1080</span><br><span class="line">[2022-05-30][10:55:09] Frame Rate: 24000/1001</span><br><span class="line">[2022-05-30][10:55:09] No. Frames: 205659</span><br><span class="line">[2022-05-30][10:55:09] </span><br><span class="line">[2022-05-30][10:55:09] --- ENCODING VIDEO ---</span><br><span class="line">[2022-05-30][10:55:09] </span><br><span class="line">[2022-05-30][10:55:09] Creating input process:</span><br><span class="line">[2022-05-30][10:55:09] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --y4m Z:\Rip\come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_rd1.5_rdoq5.vpy -</span><br><span class="line">[2022-05-30][10:55:09] </span><br><span class="line">[2022-05-30][10:55:09] Creating encoder process:</span><br><span class="line">[2022-05-30][10:55:09] Z:\MediaTool\x264_launcher\toolset\x64\x265_x64.exe -D 10 --crf 20.0 --preset placebo --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 1.5 --psy-rdoq 5.00 --cbqpoffs -2 --crqpoffs -2 --output Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_rd1.5_RDOq5.hevc --frames 205659 --y4m -</span><br><span class="line">[2022-05-30][10:55:09] </span><br><span class="line">[2022-05-30][10:55:10] y4m [info]: 1476x1080 fps 24000/1001 i420p10 unknown frame count</span><br><span class="line">[2022-05-30][10:55:10] raw [info]: output file: Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_rd1.5_RDOq5.hevc</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: build info [Windows][MSVC 1931][64 bit] 10bit</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: using cpu capabilities: MMX2 SSE2Fast LZCNT SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Main 10 profile, Level-5.1 (High tier)</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Thread pool 0 using 20 threads on numa nodes 0</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Thread pool 1 using 20 threads on numa nodes 1</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Slices : 1</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: frame threads / pool features : 5 / wpp(34 rows)+pmode</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Coding QT: max CU size, min CU size : 32 / 8</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Residual QT: max TU size, max depth : 32 / 4 inter / 4 intra</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: ME / range / subpel / merge : star / 57 / 7 / 5</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Keyframe min / max / scenecut / bias : 1 / 250 / 40 / 5.00</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Cb/Cr QP Offset : -2 / -2</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Lookahead / bframes / badapt : 100 / 8 / 2</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: b-pyramid / weightp / weightb : 1 / 1 / 1</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: References / ref-limit cu / depth : 5 / off / off</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: AQ: mode / str / qg-size / cu-tree : 1 / 1.0 / 8 / 0</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: Rate Control / qCompress : CRF-20.0 / 0.65</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: VBV/HRD buffer / max-rate / init : 160000 / 160000 / 0.900</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: tools: rd=4 psy-rd=1.50 rdoq=2 psy-rdoq=5.00 tskip signhide tmvp</span><br><span class="line">[2022-05-30][10:55:10] x265 [info]: tools: b-intra deblock(tC=-3:B=-3)</span><br><span class="line">[2022-05-31][01:44:22] x265 [info]: frame I: 1045, Avg QP:19.53 kb/s: 31136.56</span><br><span class="line">[2022-05-31][01:44:22] x265 [info]: frame P: 31113, Avg QP:20.68 kb/s: 25051.83</span><br><span class="line">[2022-05-31][01:44:22] x265 [info]: frame B: 173501, Avg QP:21.94 kb/s: 17003.65</span><br><span class="line">[2022-05-31][01:44:22] x265 [info]: Weighted P-Frames: Y:22.0% UV:4.4%</span><br><span class="line">[2022-05-31][01:44:22] x265 [info]: Weighted B-Frames: Y:19.0% UV:2.2%</span><br><span class="line">[2022-05-31][01:44:22] x265 [info]: consecutive B-frames: 4.4% 0.9% 1.6% 14.4% 8.3% 21.7% 10.6% 17.7% 20.4%</span><br><span class="line">[2022-05-31][01:44:22] encoded 205659 frames in 53351.98s (3.85 fps), 18293.03 kb/s, Avg QP:21.74</span><br><span class="line">[2022-05-31][01:44:23] vpyp [info]: Deprecated option --y4m specified, use -c y4m instead</span><br><span class="line">[2022-05-31][01:44:23] vpyp [info]: Output 205659 frames in 53344.60 seconds (3.86 fps)</span><br><span class="line">[2022-05-31][01:44:23] Final file size is 18.3 GB bytes.</span><br><span class="line">[2022-05-31][01:44:23] </span><br><span class="line">[2022-05-31][01:44:23] --- COMPLETED ---</span><br><span class="line">[2022-05-31][01:44:23] </span><br><span class="line">[2022-05-31][01:44:23] Job finished at 2022-05-31, 01:44:23. Process took 889 minutes, 18 seconds.</span><br></pre></td></tr></table></figure><h2 id="–crf-19-–psy-rd-1-50-–psy-rdoq-1-00-18464-78-kb-x2F-s"><a href="#–crf-19-–psy-rd-1-50-–psy-rdoq-1-00-18464-78-kb-x2F-s" class="headerlink" title="–crf 19 –psy-rd 1.50 –psy-rdoq 1.00 18464.78 kb&#x2F;s"></a>–crf 19 –psy-rd 1.50 –psy-rdoq 1.00 18464.78 kb&#x2F;s</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[2022-06-03][21:20:50] Simple x264 Launcher (Build #1216), built 2021-12-08</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Job started at 2022-06-03, 21:20:50.</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Source file : Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_crf19.vpy</span><br><span class="line">[2022-06-03][21:20:50] Output file : Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_crf19.hevc</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] --- SYSTEMINFO ---</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Binary Path : Z:\MediaTool\x264_launcher</span><br><span class="line">[2022-06-03][21:20:50] Avisynth    : No</span><br><span class="line">[2022-06-03][21:20:50] VapourSynth : Yes</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] --- SETTINGS ---</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Encoder : x265 (HEVC/H.265), 64-Bit (x64), 10-Bit</span><br><span class="line">[2022-06-03][21:20:50] Source  : VapourSynth (vpy)</span><br><span class="line">[2022-06-03][21:20:50] RC Mode : CRF</span><br><span class="line">[2022-06-03][21:20:50] Preset  : placebo</span><br><span class="line">[2022-06-03][21:20:50] Tuning  : &lt;None&gt;</span><br><span class="line">[2022-06-03][21:20:50] Profile : &lt;Unrestricted&gt;</span><br><span class="line">[2022-06-03][21:20:50] Custom  : --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 1.50 --psy-rdoq 1.00 --cbqpoffs -2 --crqpoffs -2</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] --- CHECK VERSION ---</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Detect video encoder version:</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Creating process:</span><br><span class="line">[2022-06-03][21:20:50] Z:\MediaTool\x264_launcher\toolset\x64\x265_x64.exe --version</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-06-03][21:20:50] x265 [info]: build info [Windows][MSVC 1931][64 bit] 8bit+10bit+12bit</span><br><span class="line">[2022-06-03][21:20:50] x265 [info]: using cpu capabilities: MMX2 SSE2Fast LZCNT SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Detect video source version:</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:50] Creating process:</span><br><span class="line">[2022-06-03][21:20:50] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --version</span><br><span class="line">[2022-06-03][21:20:50] </span><br><span class="line">[2022-06-03][21:20:54] VapourSynth Video Processing Library</span><br><span class="line">[2022-06-03][21:20:54] Copyright (c) 2012-2021 Fredrik Mellbin</span><br><span class="line">[2022-06-03][21:20:54] Core R58</span><br><span class="line">[2022-06-03][21:20:54] API R4.0</span><br><span class="line">[2022-06-03][21:20:54] API R3.6</span><br><span class="line">[2022-06-03][21:20:54] Options: -</span><br><span class="line">[2022-06-03][21:20:54] </span><br><span class="line">[2022-06-03][21:20:54] &gt; x265 version: 3.5+36</span><br><span class="line">[2022-06-03][21:20:54] &gt; VapourSynth version: r58 (API r3)</span><br><span class="line">[2022-06-03][21:20:54] </span><br><span class="line">[2022-06-03][21:20:54] --- GET SOURCE INFO ---</span><br><span class="line">[2022-06-03][21:20:54] </span><br><span class="line">[2022-06-03][21:20:54] Creating process:</span><br><span class="line">[2022-06-03][21:20:54] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --info Z:\Rip\come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_crf19.vpy -</span><br><span class="line">[2022-06-03][21:20:54] </span><br><span class="line">[2022-06-03][21:20:55] Width: 1476</span><br><span class="line">[2022-06-03][21:20:55] Height: 1080</span><br><span class="line">[2022-06-03][21:20:55] Frames: 205659</span><br><span class="line">[2022-06-03][21:20:55] FPS: 24000/1001 (23.976 fps)</span><br><span class="line">[2022-06-03][21:20:55] Format Name: YUV420P10</span><br><span class="line">[2022-06-03][21:20:55] Color Family: YUV</span><br><span class="line">[2022-06-03][21:20:55] Alpha: No</span><br><span class="line">[2022-06-03][21:20:55] Sample Type: Integer</span><br><span class="line">[2022-06-03][21:20:55] Bits: 10</span><br><span class="line">[2022-06-03][21:20:55] SubSampling W: 1</span><br><span class="line">[2022-06-03][21:20:55] SubSampling H: 1</span><br><span class="line">[2022-06-03][21:20:55] </span><br><span class="line">[2022-06-03][21:20:55] Resolution: 1476 x 1080</span><br><span class="line">[2022-06-03][21:20:55] Frame Rate: 24000/1001</span><br><span class="line">[2022-06-03][21:20:55] No. Frames: 205659</span><br><span class="line">[2022-06-03][21:20:55] </span><br><span class="line">[2022-06-03][21:20:55] --- ENCODING VIDEO ---</span><br><span class="line">[2022-06-03][21:20:55] </span><br><span class="line">[2022-06-03][21:20:55] Creating input process:</span><br><span class="line">[2022-06-03][21:20:55] Z:\MediaTool\x264_launcher\extra\VapourSynth-64\vspipe.exe --y4m Z:\Rip\come.and.see.1985.fra.bluray.remux.1080p.avc.flac.1.0-zq_crf19.vpy -</span><br><span class="line">[2022-06-03][21:20:55] </span><br><span class="line">[2022-06-03][21:20:55] Creating encoder process:</span><br><span class="line">[2022-06-03][21:20:55] Z:\MediaTool\x264_launcher\toolset\x64\x265_x64.exe -D 10 --crf 19.3 --preset placebo --level-idc 5.1 --ctu 32 --rd 4 --subme 7 --ref 5 --merange=57 --me 3 --qg-size 8 --weightb --pmode --no-rect --no-amp --rskip 0 --tu-intra-depth 4 --tu-inter-depth 4 --range limited --no-open-gop --no-sao --no-early-skip --min-keyint=1 --rc-lookahead 100 --no-cutree --bframes 8 --vbv-bufsize 160000 --vbv-maxrate 160000 --colorprim bt709 --transfer bt709 --colormatrix bt709 --deblock -3:-3 --no-strong-intra-smoothing --ipratio 1.3 --pbratio 1.2 --qcomp 0.65 --aq-mode 1 --aq-strength 1 --psy-rd 1.50 --psy-rdoq 1.00 --cbqpoffs -2 --crqpoffs -2 --output Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_crf19.hevc --frames 205659 --y4m -</span><br><span class="line">[2022-06-03][21:20:55] </span><br><span class="line">[2022-06-03][21:20:57] y4m [info]: 1476x1080 fps 24000/1001 i420p10 unknown frame count</span><br><span class="line">[2022-06-03][21:20:57] raw [info]: output file: Z:\Rip\Come.and.See.1985.FRA.BluRay.Remux.1080p.AVC.FLAC.1.0-ZQ_crf19.hevc</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: HEVC encoder version 3.5+36-9b59d4554</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: build info [Windows][MSVC 1931][64 bit] 10bit</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: using cpu capabilities: MMX2 SSE2Fast LZCNT SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Main 10 profile, Level-5.1 (High tier)</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Thread pool 0 using 20 threads on numa nodes 0</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Thread pool 1 using 20 threads on numa nodes 1</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Slices : 1</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: frame threads / pool features : 5 / wpp(34 rows)+pmode</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Coding QT: max CU size, min CU size : 32 / 8</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Residual QT: max TU size, max depth : 32 / 4 inter / 4 intra</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: ME / range / subpel / merge : star / 57 / 7 / 5</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Keyframe min / max / scenecut / bias : 1 / 250 / 40 / 5.00</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Cb/Cr QP Offset : -2 / -2</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Lookahead / bframes / badapt : 100 / 8 / 2</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: b-pyramid / weightp / weightb : 1 / 1 / 1</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: References / ref-limit cu / depth : 5 / off / off</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: AQ: mode / str / qg-size / cu-tree : 1 / 1.0 / 8 / 0</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: Rate Control / qCompress : CRF-19.3 / 0.65</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: VBV/HRD buffer / max-rate / init : 160000 / 160000 / 0.900</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: tools: rd=4 psy-rd=1.50 rdoq=2 psy-rdoq=1.00 tskip signhide tmvp</span><br><span class="line">[2022-06-03][21:20:57] x265 [info]: tools: b-intra deblock(tC=-3:B=-3)</span><br><span class="line">[2022-06-04][12:11:18] x265 [info]: frame I: 1045, Avg QP:18.83 kb/s: 30681.34</span><br><span class="line">[2022-06-04][12:11:18] x265 [info]: frame P: 31113, Avg QP:19.99 kb/s: 24513.25</span><br><span class="line">[2022-06-04][12:11:18] x265 [info]: frame B: 173501, Avg QP:21.28 kb/s: 17306.56</span><br><span class="line">[2022-06-04][12:11:18] x265 [info]: Weighted P-Frames: Y:22.0% UV:4.4%</span><br><span class="line">[2022-06-04][12:11:18] x265 [info]: Weighted B-Frames: Y:19.0% UV:2.2%</span><br><span class="line">[2022-06-04][12:11:18] x265 [info]: consecutive B-frames: 4.4% 0.9% 1.6% 14.4% 8.3% 21.7% 10.6% 17.7% 20.4%</span><br><span class="line">[2022-06-04][12:11:18] encoded 205659 frames in 53421.58s (3.85 fps), 18464.78 kb/s, Avg QP:21.08</span><br><span class="line">[2022-06-04][12:11:19] vpyp [info]: Deprecated option --y4m specified, use -c y4m instead</span><br><span class="line">[2022-06-04][12:11:19] vpyp [info]: Output 205659 frames in 53414.14 seconds (3.85 fps)</span><br><span class="line">[2022-06-04][12:11:19] Final file size is 18.4 GB bytes.</span><br><span class="line">[2022-06-04][12:11:19] </span><br><span class="line">[2022-06-04][12:11:19] --- COMPLETED ---</span><br><span class="line">[2022-06-04][12:11:19] </span><br><span class="line">[2022-06-04][12:11:19] Job finished at 2022-06-04, 12:11:19. Process took 890 minutes, 29 seconds.</span><br></pre></td></tr></table></figure><h2 id="调低-psy-rd-到-0-5-的对比"><a href="#调低-psy-rd-到-0-5-的对比" class="headerlink" title="调低 psy-rd 到 0.5 的对比"></a>调低 psy-rd 到 0.5 的对比</h2><p><a href="https://shoot.photo/images/2022/06/14/Pzd1s.png">https://shoot.photo/images/2022/06/14/Pzd1s.png</a><br><a href="https://shoot.photo/images/2022/06/14/PzMdJ.png">https://shoot.photo/images/2022/06/14/PzMdJ.png</a><br><a href="https://shoot.photo/images/2022/06/14/PznuV.png">https://shoot.photo/images/2022/06/14/PznuV.png</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;psy-rd-amp-psy-rdoq&quot;&gt;&lt;a href=&quot;#psy-rd-amp-psy-rdoq&quot; class=&quot;headerlink&quot; title=&quot;psy-rd &amp;amp; psy-rdoq&quot;&gt;&lt;/a&gt;psy-rd &amp;amp; psy-rdoq&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Compare" scheme="http://fxxs.github.io/categories/Compare/"/>
    
    
    <category term="Compare" scheme="http://fxxs.github.io/tags/Compare/"/>
    
  </entry>
  
  <entry>
    <title>封装格式(MP4/MKV…)、编码格式(H.264/H.265/AC3/AAC…)、编码器(x265/x264/SVT-AV1)</title>
    <link href="http://fxxs.github.io/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A0%81%E3%80%81%E7%BC%96%E7%A0%81%E5%99%A8%E4%B8%8E%E5%B0%81%E8%A3%85%E6%A0%BC%E5%BC%8F/"/>
    <id>http://fxxs.github.io/1.%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A0%81%E3%80%81%E7%BC%96%E7%A0%81%E5%99%A8%E4%B8%8E%E5%B0%81%E8%A3%85%E6%A0%BC%E5%BC%8F/</id>
    <published>2022-10-24T10:51:14.892Z</published>
    <updated>2024-09-20T15:03:19.761Z</updated>
    
    <content type="html"><![CDATA[<p>参考</p><ul><li><a href="http://vcb-s.com/archives/2726">http://vcb-s.com/archives/2726</a></li><li><a href="https://help.aliyun.com/document_detail/99380.html">https://help.aliyun.com/document_detail/99380.html</a></li></ul><p>容器(Container)又名封装格式，或者格式(Format)，多媒体容器（Multimedia Container），常见的封装格式(MP4&#x2F;MKV…)、而 H.264&#x2F;H.265&#x2F;AC3&#x2F;AAC 属于编码方式 \ 编码格式(Codec)，MP4以及MKV(封装格式)里封装的视频流以及音频流可以使用相同的编码格式</p><p>同一编码格式可以有很多不一样的编码器实现，每个编码器可能会各有特点，如 AAC 有 FAAC&#x2F;FDK-AAC&#x2F;QAAC&#x2F;NeroAAC&#x2F;FFMpeg-AAC 这些开源编码器，还有一些闭源编码器。另外还有 x265&#x2F;x264就是 常用的视频编码器，也是我们常用的压制工具。</p><h2 id="一些需要注意的"><a href="#一些需要注意的" class="headerlink" title="一些需要注意的"></a>一些需要注意的</h2><h3 id="flac-Free-Lossless-Audio-Codec-自由无损音频压缩编码"><a href="#flac-Free-Lossless-Audio-Codec-自由无损音频压缩编码" class="headerlink" title="flac - Free Lossless Audio Codec - 自由无损音频压缩编码"></a>flac - Free Lossless Audio Codec - 自由无损音频压缩编码</h3><p>flac既是编码格式也是封装格式(flac用同样的名字做了容器名(即同时是封装格式的名字),<a href="https://developer.mozilla.org/zh-TW/docs/Web/Media/Formats/Containers">https://developer.mozilla.org/zh-TW/docs/Web/Media/Formats/Containers</a>)</p><h3 id="m4a"><a href="#m4a" class="headerlink" title="m4a"></a>m4a</h3><p>m4a(封装格式,仅有音频的MPEG-4&#x2F;mp4文件会使用.m4a扩展名)可以使用ALAC(Apple Lossless Audio Codec)编码也可以使用AAC(Advanced Audio Coding)编码。</p><h3 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h3><p>MP3(formally MPEG-1 Audio Layer III or MPEG-2 Audio Layer III) 是由MPEG-1(封装容器)与一个以MPEG-1Audio Layer III encoding编码过的音轨所组成。</p><h3 id="wav-相关"><a href="#wav-相关" class="headerlink" title="wav 相关"></a>wav 相关</h3><p>WAV属于封装格式，封装的PCM属于原始音频数据，完全未经压缩的编码方式</p><p>PCM - 脉冲编码调制（Pulse Code Modulation）是一种模拟信号的数字化方法。它是最常用、最简单的波形编码方式。</p><p>LPCM 是一种特定类型的 PCM，虽然‎‎PCM‎‎是一个更通用的术语，但它通常用于描述编码为LPCM的数据。‎</p><p>BWF（广播声波格式）</p><p>后缀也用wav,作为WAV的后继者，是由欧洲广播联盟(European Broadcasting Union)创建的一种标准音频格式。BWF has more data regarding the file. 但音轨质量没有区别</p><p>RF64(后缀通常会写w64以作区分)(multichannel audio file)</p><p>WAV 文件格式的扩展，其文件大小可大于 4GB。 It has been specified by the European Broadcasting Union. It has been accepted as the ITU recommendation ITU-R BS.2088.</p><h3 id="H-265-相关"><a href="#H-265-相关" class="headerlink" title="H.265 相关"></a>H.265 相关</h3><p>H.265&#x2F;HEVC 是编码</p><p>H.265是标准，HEVC是胜出者，也叫 MPEG-H Part 2</p><p>有部分人认为 H.265 在交流中用于指代非 x265 的 HEVC商业编码器(个人认为非标准，并且无定义，属于口语化内容，仅供参考)</p><p>并且部分站点要求 Web-dl 标题必须写 H.265，不能使用HEVC，而原盘&#x2F;Remux只允许写HEVC。（个人认为属于区域规则，不建议作为标准理解）</p><p>x265是开源免费编码器，另外还有一些商业的编码器，例如<a href="http://www.strongene.com/">视骏</a>,<a href="https://www.nvidia.com/en-us/geforce/guides/broadcasting-guide/">NVENC</a></p><h3 id="qaac"><a href="#qaac" class="headerlink" title="qaac"></a>qaac</h3><p>qaac 是基于 Apple 编码器的命令行 AAC&#x2F;ALAC 编码器前端。 从 1.00 开始，qaac 直接使用 CoreAudioToolbox.dll。 因此，不再需要安装 QuickTime。 但是，需要 Apple 应用程序支持。 支持 AAC-LC、AAC-HE、ALAC 编码。一般我们制作出来的是LC </p><p>(qaac开放源代码，似乎是Copyleft的并且没有任何限制)</p><h2 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h2><p>比较常见的MP4，MKV，RMVB，TS，FLV，AVI等很多，各种封装格式支持的编码是不一样的。</p><p>MKV vs MP4，主要的区别在于：</p><ol><li>MKV支持封装FLAC作为音频，MP4则不支持。但是MP4也可以封装无损音轨(比如说ALAC，虽然普遍认为ALAC的效率不如FLAC优秀)</li><li>MKV支持封装ASS&#x2F;SSA格式的字幕，MP4则不支持。一般字幕组制作的字幕是ASS格式，所以内封字幕多见于MKV格式</li><li>MP4作为工业标准，在视频编辑软件和播放设备上的兼容性一般好于MKV。这也是vcb-s那些为移动设备优化的视频基本上选择MP4封装的原因。</li></ol><p>还有一些过时的封装格式，比如RM、AVI等等。</p><h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><p>通常mediainfo需要封装格式才能显示比较完整的信息，如.pcm .aac .hevc不能显示时长等信息。.hevc在播放器中是无法使用进度条的。</p><p>LPCM(Linear pulse-code modulation) 一般也会叫PCM，但是一种特定类型的 PCM，其跟PCM(Pulse Code Modulation)有区别，其量化级别是线性均匀的。</p><p>H.26X系列：由ITU（国际电信联盟）主导，包括H.261、H.262、H.263、H.264、H.265。</p><ul><li>H.264：H.264&#x2F;MPEG-4第十部分，或称AVC（Advanced Video Coding，高级视频编码），是一种视频压缩标准，一种被广泛使用的高精度视频的录制、压缩和发布格式。</li><li>H.265：高效率视频编码（High Efficiency Video Coding，简称HEVC）是一种视频压缩标准，H.264&#x2F;MPEG-4 AVC的继任者。HEVC不仅提升图像质量，同时也能达到H.264&#x2F;MPEG-4 AVC两倍的压缩率 （等同于同样画面质量下码率减少50%），可支持4K分辨率甚至超高画质电视，最高分辨率可达8192×4320（8K分辨率），这是目前发展的趋势。</li></ul><p>MPEG系列：由ISO（国际标准组织机构）下属的MPEG（运动图象专家组）主导，视频编码方面主要有：</p><ul><li>MPEG-1第二部分：主要使用在VCD上，有些在线视频也使用这种格式，该编解码器的质量大致上和原有的VHS录像带相当。</li><li>MPEG-2第二部分：等同于H.262，使用在DVD、SVCD和大多数数字视频广播系统和有线分布系统（Cable Distribution Systems）中。</li><li>MPEG-4第二部分：可以使用在网络传输、广播和媒体存储上，比起MPEG-2和第一版的H.263，它的压缩性能有所提高。</li><li>MPEG-4第十部分：技术上和ITU-TH.264是相同的标准，二者合作，诞生了H.264&#x2F;AVC标准，ITU-T将其命名为H.264，而ISO&#x2F;IEC称它为MPEG-4高级视频编码（Advanced Video Coding，AVC）。</li></ul><p>AVS（Audio Video coding Standard）：我国自主知识产权的信源编码标准，是《信息技术先进音视频编码》系列标准的简称，目前已完成两代AVS标准的制定。</p><ul><li>第一代AVS标准包括国家标准《信息技术先进音视频编码第2部分：视频》（简称AVS1）和《信息技术先进音视频编码第16部分：广播电视视频》（简称AVS+）。AVS+的压缩效率与国际同类标准H.264&#x2F;AVC最高档次（High Profile）相当。</li><li>第二代AVS标准，简称AVS2，首要应用目标是超高清晰度视频，支持超高分辨率（4K以上）、高动态范围视频的高效压缩。AVS2的压缩效率比上一代标准AVS+和H.264&#x2F;AVC提高了一倍，超过国际同类型标准HEVC&#x2F;H.265。</li></ul><p>其他系列，如，VP8、VP9（Google 主导），RealVideo（RealNetworks推出）等编码方式，在互联网视频使用较少，此处不再介绍。</p><h2 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h2><p>视频转码（Video Transcoding）是指将已经压缩编码的视频码流转换成另一个视频码流，以适应不同的网络带宽、不同的终端处理能力和不同的用户需求。转码本质上是一个先解码、再编码的过程，因此转换前后的码流可能遵循相同的视频编码标准，也可能不遵循相同的视频编码标准。</p><h2 id="转封装-Remux"><a href="#转封装-Remux" class="headerlink" title="转封装(Remux)"></a>转封装(Remux)</h2><p>转封装指的是将视频或音频的封装格式进行转换，如将AVI的视频转换为MP4，其间并不会进行音视频的编码和解码工作，而是直接将视频和音频压缩码流从一种封装格式文件中获取出来然后打包成另一种封装格式的文件。相比转码，转封装有两大特点：</p><p>处理速度极快。音视频编解码过程十分复杂，占据了转码的绝大部分时间。转封装不需要进行编码和解码，节约了大量的处理时间。<br>音视频质量无损。没有解码（解压缩）和编码（压缩）过程，所以不会有音视频的压缩损伤。<br>转封装后的文件与原始文件的分辨率、码率等几乎一致，故播放时也称其为“原画”。(部分封装格式会有无损压缩算法，like While muxing sup into MKV there can be “zlib” compression used)</p><h2 id="分离-Demux"><a href="#分离-Demux" class="headerlink" title="分离(Demux)"></a>分离(Demux)</h2><p>Extract</p><p>将编码格式从封装格式中拆出来</p><h2 id="无损压缩以及有损压缩"><a href="#无损压缩以及有损压缩" class="headerlink" title="无损压缩以及有损压缩"></a>无损压缩以及有损压缩</h2><p>首先PCM和LPCM属于未经压缩的格式，不称为无损压缩。<del>(但叫无损应该也没啥错)</del></p><p>日常中的无损较为口语化，需要理解其意思。通常说的无损格式指的算法无损，并不意味着生成的文件必定无损，一些音轨降位深或降频会造成损失。也会有一些有损转无损的非常规操作。</p><p>通常说原盘以及Remux无损，原盘一般是能找到的最优质的源，但其编码格式都属于有损，从母带(口语化)出来进行有损压缩再发布。而Remux主要为视频轨道以及主要音频轨道的无损提取或转换。(不过会有Hybird)</p><h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p>DTS(指公司)的音轨的压缩率非常差，并且他们以此作为宣传，认为这样能提高解码效率，音质会更好。</p><p>DTS-HD MA 是无损</p><p>DTS-HD HRA 是有损</p><p>两者同样带核心(DTS core，通常 DTS 会指 DTS core，不过有些我也不知道指的啥)。</p><p>其编码器同时包含了DTS Digital（DTS的有损音频格式）的编码核心以便在播放器不兼容DTS-HD MA或DTS-HD HRA（DTS-HD High Resolution Audio）时切换成DTS Digital（DTS Digital一般会以255Kbps的恒定码率进行编码，与DTS-HD MA&#x2F;HRA音频放置在同一流中，格式名称为DTS-HD Core）</p><h3 id="有损音频"><a href="#有损音频" class="headerlink" title="有损音频"></a>有损音频</h3><p>AC3是作为影视业的工业标准。但其发布时间非常早。（略早于MP3）</p><h4 id="DTS"><a href="#DTS" class="headerlink" title="DTS"></a>DTS</h4><p>DTS core 768被认为是不如AC3 640的。</p><h4 id="AC3"><a href="#AC3" class="headerlink" title="AC3"></a>AC3</h4><p>杜比实验室采用了 MDCT 算法以及感知编码原理来开发 AC-3 音频格式以满足影院需求。 AC-3 格式于 1991 年作为杜比数字标准发布。</p><p>AC-3 (Audio Codec 3, Advanced Codec 3, Acoustic Coder 3. [不同于Adaptive Transform Acoustic Coding 3&#x2F;ATRAC3，是索尼研发的另一种格式])</p><p>Dolby Digital Surround EX</p><p>杜比数字环绕EX（Dolby Digital Surround EX），是杜比实验室和Lucasfilm THX在1999年5月面世的星球大战首部曲：威胁潜伏电影中合作的产品。在考虑经济效益和向下兼容性，在左环绕和右环绕中间，加插了后环绕声道，形成6.1输出。它使用了矩阵编码，这是一条独立分离声道，情形就像前置左右声道和中置声道的关系一样。所以它能在标准的5.1设备上输出5.1，又能同时支持杜比数字环绕EX的器材上输出6.1。在星球大战系列中使用了这技术。不少DVD支持杜比数字环绕EX的输出。</p><p>Dolby Digital EX</p><p>杜比数字EX（Dolby Digital EX）是杜比数字环绕EX的民用版本。杜比数字EX类似杜比早期的Pro-Logic技术，集成了矩阵技术，在立体声音轨上加入一中置和一后置声道。杜比数字EX在5.1杜比数字的基础上加入后置声道，创出6.1或7.1的声道输出。但是，这技术并不能视为真正的6.1或7.1编码，与它的竞争对手DTS-ES格式不同，它并不能提供完整独立分离的6条或7条音轨。</p><h4 id="Dolby-Digital-Plus-x2F-DDP-x2F-EAC3"><a href="#Dolby-Digital-Plus-x2F-DDP-x2F-EAC3" class="headerlink" title="Dolby Digital Plus&#x2F;DDP&#x2F;EAC3"></a>Dolby Digital Plus&#x2F;DDP&#x2F;EAC3</h4><p>目前本组的首选格式(1.0&#x2F;2.0除外，一般建议制作时带EX)</p><p>杜比数字Plus（Dolby Digital Plus）又称为E-AC-3，是基于AC3的基础进行加强的编码系统。它把最高比特率提升至6 Mbps，支持14声道（13.1），增强的编码技术能够减少压缩对杂讯（artifact）。无法兼容于Dolby Digital器材，但是Dolby Digital Plus解码器可以将Dolby Digital Plus转码成Dolby Digital 通过光纤&#x2F;同轴输出。Dolby Digital Plus 是HD DVD和蓝光影碟的必选音频格式。在蓝光播放器中，Dolby Digital Plus是主音轨（Primary Audio）的可选格式，第二音轨（Secondary Audio）必选格式。</p><h4 id="AAC"><a href="#AAC" class="headerlink" title="AAC"></a>AAC</h4><p>AAC在低码下更有优势。（但Opus做的更好）</p><p>因为AAC是一个庞大家族，他们共分为9种规格，以适应不同场合的需要，也正是由于AAC的规格（Profile）繁多，导致普通电脑用户感觉十分困扰：</p><p>MPEG-2 AAC LC低复杂度规格（Low Complexity）</p><p>MPEG-2 AAC Main主规格</p><p>MPEG-2 AAC SSR可变采样率规格（Scaleable Sample Rate）</p><p>MPEG-4 AAC LC低复杂度规格（Low Complexity），现在的手机比较常见的MP4文件中的音频部分就包括了该规格音频档案</p><p>MPEG-4 AAC Main主规格</p><p>MPEG-4 AAC SSR可变采样率规格（Scaleable Sample Rate）</p><p>MPEG-4 AAC LTP长时期预测规格（Long Term Predicition）</p><p>MPEG-4 AAC LD低延迟规格（Low Delay）</p><p>MPEG-4 AAC HE高效率规格（High Efficiency）</p><p>上述的规格中，主规格（Main）包含了除增益控制之外的全部功能，其音质最好，而低复杂度规格（LC）则是比较简单，没有了增益控制，但提高了编码效率，至“SSR”对“LC”规格大体是相同，但是多了增益的控制功能，另外，MPEG-4 AAC&#x2F;LTP&#x2F;LD&#x2F;HE，都是用在低比特率下编码，特别是“HE”是有Nero AAC编码器支持，是近来常用的一种编码器，不过通常来说，Main规格和LC规格的音质相差不大，因此目前使用最多的AAC规格多数是“LC”规格，因为要考虑手机目前的存储器能力未达合理水准。</p><p>MPEG-4 AAC LC（Low Complexity）是最常用的规格，我们叫“低复杂度规格”，我们简称“LC-AAC”，这种规格在中等码率的编码效率以及音质方面，都能找到平衡点。所谓中等码率，就是指：96kbps-192kbps之间的码率。因此，如果要使用LC-AAC规格，请尽可能把码率控制在之前说的那个区间内。</p><p>ffmpeg里</p><p>Based on quality produced from high to low:</p><p>libopus &gt; libvorbis &gt;&#x3D; libfdk_aac &gt; aac &gt; libmp3lame &gt;&#x3D; eac3&#x2F;ac3 &gt; libtwolame &gt; vorbis &gt; mp2 &gt; wmav2&#x2F;wmav1</p><h4 id="一些有损音频测试"><a href="#一些有损音频测试" class="headerlink" title="一些有损音频测试"></a>一些有损音频测试</h4><p>引用 blog.nannan.cool 里说的一些话<br>“<br>同一编码格式可以有很多不一样的编码器实现，每个编码器都有自己的特点，音质也不相同。举个例子，光是AAC编码格式就有 FAAC&#x2F;FDK-AAC&#x2F;QAAC&#x2F;NeroAAC&#x2F;FFMpeg-AAC 五种不同的开源编码器，更别提闭源的编解码器了。不同的编码器有自己的侧重点，尽管差异不像不同格式那么巨大，同码率下的听感也有出入（低码率下尤其明显）。多项盲听测试指出AAC编码器中最好的是 QAAC ，其次是 FDK-AAC。<br>“</p><p>“<br>总的来说，对于 MP3 ，因为它实在是不擅长对付高频信息，要能做到听感无损，那么最好使用不低于 192Kbps 的码率进行编码；对于 AAC （LC-AAC）来说，建议至少使用 160Kbps 以上，最好也要到 192Kbps；对于 Opus，得益于最新的心理声学模型，在 128Kbps 下就能够获得可听的音质了，如果还是不放心的话可以提到 160Kbps。不过从上面的对比中可以看出，不同歌曲对于码率的需求是不同的，而且差异一点也不小。因此出现一首歌 128K 就够了，另一首歌 160K 还是不够用也是很正常的。如果需要编码的歌较少，大可以逐一进行尝试，但如果是批量编码的话，可以直接套用上面的推荐码率。<br>“</p><p>双盲:<a href="https://web.archive.org/web/20060831191536/http://www.rjamorim.com/test/">https://web.archive.org/web/20060831191536/http://www.rjamorim.com/test/</a></p><p><a href="https://web.archive.org/web/20110522045514/http://cec.concordia.ca/econtact/9_4/tsabary.html">https://web.archive.org/web/20110522045514/http://cec.concordia.ca/econtact/9_4/tsabary.html</a></p><p><a href="https://tech.ebu.ch/docs/tech/tech3324.pdf">https://tech.ebu.ch/docs/tech/tech3324.pdf</a></p><p><a href="https://blog.nannan.cool/archives/293/">https://blog.nannan.cool/archives/293/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vcb-s.com/archives/2726&quot;&gt;http://vcb-s.com/archives/2726&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.aliyun.com/doc</summary>
      
    
    
    
    <category term="1.基础知识" scheme="http://fxxs.github.io/categories/1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>x265 HDR 参数计算方法</title>
    <link href="http://fxxs.github.io/3.Code/x265%20HDR%20%E5%8F%82%E6%95%B0%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    <id>http://fxxs.github.io/3.Code/x265%20HDR%20%E5%8F%82%E6%95%B0%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</id>
    <published>2022-10-24T10:51:14.875Z</published>
    <updated>2024-12-01T14:26:34.601Z</updated>
    
    <content type="html"><![CDATA[<p>HDR 压制参数为 <code>--master-display &quot;G(13250,34500)B(7500,3000)R(34000,16000)WP(15635,16450)L(10000000,1)&quot; --max-cll=1000,400</code></p><p>首先，不同的色彩空间有不同的G B R WP 数据</p><p>通常，不同的片会有不同的L 数据 以及 max-cll</p><p>Mediainfo范例</p><p>BT.2020  Olympus Has Fallen 2013</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Color range : Limited</span><br><span class="line">Color primaries : BT.2020</span><br><span class="line">Transfer characteristics : PQ</span><br><span class="line">Matrix coefficients : BT.2020 non-constant</span><br><span class="line">Mastering display color primaries : BT.2020</span><br><span class="line">Mastering display luminance : min: 0.0001 cd/m2, max: 1000 cd/m2</span><br><span class="line">Maximum Content Light Level : 891 cd/m2</span><br><span class="line">Maximum Frame-Average Light Level : 428 cd/m2</span><br><span class="line">Original source medium : Blu-ray</span><br></pre></td></tr></table></figure><p>Display P3 会比较多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Color range                 : Limited</span><br><span class="line">Color primaries             : BT.2020</span><br><span class="line">Transfer characteristics    : PQ</span><br><span class="line">Matrix coefficients         : BT.2020 non-constant</span><br><span class="line">Mastering display color pri : Display P3</span><br><span class="line">Mastering display luminance : min: 0.0001 cd/m2, max: 1000 cd/m2</span><br><span class="line">Maximum Content Light Level : 479 cd/m2</span><br><span class="line">Maximum Frame-Average Light : 464 cd/m2</span><br></pre></td></tr></table></figure><p>G B R WP 数据看Mediainfo里的Mastering display color pri</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Display P3</span><br><span class="line">--master-display &quot;G(13250,34500)B(7500,3000)R(34000,16000)WP(15635,16450)&quot;</span><br><span class="line">BT.2020</span><br><span class="line">--master-display &quot;G(8500,39850)B(6550,2300)R(35400,14600)WP(15635,16450)&quot;</span><br></pre></td></tr></table></figure><p>Venom 2018 movie mediainfo :</p><pre><code>Mastering display luminance : min: <b>0.0050</b> cd/m2, max: <b>4000</b> cd/m2Maximum Content Light Level : <b>3903</b> cd/m2Maximum Frame-Average Light Level : <b>1076</b> cd/m2</code></pre><p>In this case master-display&#x3D;G(13250,34500)B(7500,3000)R(34000,16000)WP(15635,16450)<strong>L(40000000,50)</strong> and max-cll&#x3D;<strong>3903,1076</strong></p><p>About Maximum Content Light Level and Maximum Frame-Average Light Level … If those not present -&gt; max-cll&#x3D;0,0</p><p>测试用临时Code</p><p>前置参数</p><textarea style="width: 80%; height: 200px" id="x265" onkeyup="refresh();">--level-idc 5.1 --bframes 8 --rd 4 --me 3 --subme 7 --ref 5 --merange 57 --ipratio 1.3 --pbratio 1.2 --aq-mode 2 --aq-strength 1.00 --qcomp 0.60 --psy-rd 1.5 --psy-rdoq 1.00 --ctu 64 --rc-lookahead 100 --deblock -3:-3 --no-strong-intra-smoothing --cbqpoffs 0 --crqpoffs 0 --qg-size 8 --range limited --no-frame-dup --selective-sao 0 --no-cutree --tu-intra-depth 4 --no-open-gop --tu-inter-depth 4 --rskip 0 --no-tskip --no-early-skip --min-keyint=1 --no-rect --no-amp --no-sao --aud --vbv-bufsize 160000 --vbv-maxrate 160000 --repeat-headers --hrd --hdr-opt --colorprim bt2020 --colormatrix bt2020nc --transfer smpte2084 --chromaloc 2 --pmode </textarea><textarea style="width: 80%; height: 200px" onkeyup="refresh();" placeholder="仅支持输入JSON版mediainfo" id="HDR"></textarea><br><div><input type="checkbox" id="DoVi" name="DoVi" value="DoVi" onclick="refresh();"><label for="DoVi">DoVi P8压制</label></div><p> 请注意你可能需要自己修改RPU的路径</p><pre><code id="result" name="result"></code></pre><script>  var refresh = function () {    document.getElementById("result").textContent = $('#x265').text();    var mediainfo = document.getElementById("HDR").value.replaceAll("\\\"", "|").replaceAll("\\", "|");    if (mediainfo) {      var whole = JSON.parse(mediainfo);      var track = whole.media.track;      var hevc = track.filter(function (video) {        return video["@type"] === "Video";      })[0];      if (hevc.MasteringDisplay_ColorPrimaries == "Display P3")        document.getElementById("result").textContent += '--master-display "G(13250,34500)B(7500,3000)R(34000,16000)WP(15635,16450)';      else if (hevc.MasteringDisplay_ColorPrimaries == "BT.2020")        document.getElementById("result").textContent += '--master-display "G(8500,39850)B(6550,2300)R(35400,14600)WP(15635,16450)';      var Luminance = hevc.MasteringDisplay_Luminance.replaceAll(        " cd/m2",        ""      ).match(/\d\.?\d*/g);      var max = Luminance[1] * 10000,        min = Luminance[0] * 10000;      document.getElementById("result").textContent += "L(" + max + "," + min + ')"';      if (hevc.MaxCLL)        document.getElementById("result").textContent += " --max-cll=" + hevc.MaxCLL.replace(" cd/m2", "") + "," + hevc.MaxFALL.replace(" cd/m2", "");      if (document.getElementById('DoVi').checked) document.getElementById("result").textContent += " --dolby-vision-profile 8.1 --dolby-vision-rpu \"RPU.bin\"";    }  };  refresh();</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;HDR 压制参数为 &lt;code&gt;--master-display &amp;quot;G(13250,34500)B(7500,3000)R(34000,16000)WP(15635,16450)L(10000000,1)&amp;quot; --max-cll=1000,400&lt;/cod</summary>
      
    
    
    
    <category term="3.Code" scheme="http://fxxs.github.io/categories/3-Code/"/>
    
    
    <category term="Document" scheme="http://fxxs.github.io/tags/Document/"/>
    
    <category term="HDR" scheme="http://fxxs.github.io/tags/HDR/"/>
    
  </entry>
  
  <entry>
    <title>使用DEEW制作DDP/EAC3音轨教程</title>
    <link href="http://fxxs.github.io/4.Audio&amp;sub/%E4%BD%BF%E7%94%A8DEEW%E5%88%B6%E4%BD%9CDDP%E9%9F%B3%E8%BD%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://fxxs.github.io/4.Audio&amp;sub/%E4%BD%BF%E7%94%A8DEEW%E5%88%B6%E4%BD%9CDDP%E9%9F%B3%E8%BD%A8%E6%95%99%E7%A8%8B/</id>
    <published>2022-10-24T10:51:13.899Z</published>
    <updated>2024-09-22T14:18:15.734Z</updated>
    
    <content type="html"><![CDATA[<p>摆脱搭建MacOS环境困难以及Dolby Encode Suite单线程制作缓慢的烦恼，在Windows&#x2F;Linux下通过命令行直接制作。</p><p>本文主要讲解Windows下的搭建，Linux下流程类似，自行摸索。</p><blockquote><p>可能因其更新本教程内容会有所滞后，遇到区别时请以上游的<a href="https://github.com/pcroland/deew#readme">README</a>为准。</p></blockquote><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p><a href="https://github.com/pcroland/deew">DEEW</a></p></li><li><p><a href="https://ffmpeg.org/about.html">FFmpeg</a>：<a href="https://www.gyan.dev/ffmpeg/builds/">从 gyan.dev 下载</a> | <a href="https://github.com/BtbN/FFmpeg-Builds/releases">从 Github 下载</a></p><p>  若 <strong>从 gyan.dev 下载</strong>，请选择 <em><a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-essentials.7z">ffmpeg-git-essentials.7z</a></em> 版本；<strong>从 Github 下载</strong>则选择 <em>ffmpeg-master-latest-win64-lgpl</em> 版本即可，足够制作使用。</p><p>  解压并记录解压位置。</p></li><li><p>Dolby Encoding Engine with Dolby AC-4 x64 (+license)</p></li></ul><h2 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h2><p>使用DGDemux提取音轨</p><p>或直接将带有音频的视频输入</p><p>适合于Remux文件，无需任何提取，直接将<code>REMUX.mkv</code>作为输入源，默认将第一个音轨进行转换。</p><h2 id="Dolby-Encoding-Engine-Wrapper使用"><a href="#Dolby-Encoding-Engine-Wrapper使用" class="headerlink" title="Dolby Encoding Engine Wrapper使用"></a>Dolby Encoding Engine Wrapper使用</h2><p>按住<code>Shift</code>键并右键空白区域，选择 <strong>在 Windows终端 中打开</strong> &#x2F; <strong>在此处打开 Powershell 窗口</strong>，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\deew.exe -v</span><br></pre></td></tr></table></figure><p>确认正常返回版本号即可开始制作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&gt;deew -h</span><br><span class="line">deew 2.9.5</span><br><span class="line"></span><br><span class="line">USAGE: deew [-h] [-v] [-i [INPUT ...]] [-ti INDEX] [-o DIRECTORY] [-f FORMAT]</span><br><span class="line">            [-b BITRATE] [-dm CHANNELS] [-d DELAY] [-r DRC] [-dn DIALNORM]</span><br><span class="line">            [-in INSTANCES] [-k] [-mo] [-fs] [-fb] [-lb] [-la] [-np] [-pl]</span><br><span class="line">            [-cl] [-c] [-gc]</span><br><span class="line"></span><br><span class="line">FLAGS:</span><br><span class="line">  -h, --help                  show this help message.</span><br><span class="line">  -v, --version               show version.</span><br><span class="line">  -i, --input [INPUT ...]     audio file(s) or folder(s)</span><br><span class="line">  -ti, --track-index INDEX    default: 0</span><br><span class="line">                              select audio track index of input(s)</span><br><span class="line">  -o, --output DIRECTORY      default: current directory</span><br><span class="line">                              specifies output directory</span><br><span class="line">  -f, --format FORMAT         options: dd / ddp / thd</span><br><span class="line">                              default: ddp</span><br><span class="line">  -b, --bitrate BITRATE       options: run -lb/--list-bitrates</span><br><span class="line">                              default: run -c/--config</span><br><span class="line">  -dm, --downmix CHANNELS     options: 1 / 2 / 6</span><br><span class="line">                              specifies downmix, only works for DD/DDP</span><br><span class="line">                              DD will be automatically downmixed to 5.1 in case of a 7.1 source</span><br><span class="line">  -d, --delay DELAY           examples: -5.1ms, +1,52s, -24@pal, +10@24000/1001</span><br><span class="line">                              default: 0ms or parsed from filename</span><br><span class="line">                              specifies delay as ms, s or frame@FPS</span><br><span class="line">                              FPS can be a number, division or ntsc / pal</span><br><span class="line">                              you have to specify negative values as -d=-0ms</span><br><span class="line">  -r, --drc DRC               options: film_light / film_standard / music_light / music_standard / speech</span><br><span class="line">                              default: music_light (this is the closest to the missing none preset)</span><br><span class="line">                              specifies drc profile</span><br><span class="line">  -dn, --dialnorm DIALNORM    options: between -31 and 0 (in case of 0 DEE&#x27;s measurement will be used)</span><br><span class="line">                              default: 0</span><br><span class="line">                              applied dialnorm value between</span><br><span class="line">  -in, --instances INSTANCES  examples: 1, 4, 50%</span><br><span class="line">                              default: 50%</span><br><span class="line">                              specifies how many encodes can run at the same time</span><br><span class="line">                              50% means 4 on a cpu with 8 threads</span><br><span class="line">                              one DEE can use 2 threads so 50% can utilize all threads</span><br><span class="line">                              (this option overrides the config&#x27;s number)</span><br><span class="line">  -k, --keeptemp              keep temp files</span><br><span class="line">  -mo, --measure-only         kills DEE when the dialnorm gets written to the progress bar</span><br><span class="line">                              this option overrides format with ddp</span><br><span class="line">  -fs, --force-standard       force standard profile for 7.1 DDP encoding (384-1024 kbps)</span><br><span class="line">  -fb, --force-bluray         force bluray profile for 7.1 DDP encoding (768-1664 kbps)</span><br><span class="line">  -lb, --list-bitrates        list bitrates that DEE can do for DD and DDP encoding</span><br><span class="line">  -la, --long-argument        print ffmpeg and DEE arguments for each input</span><br><span class="line">  -np, --no-prompt            disables prompt</span><br><span class="line">  -pl, --print-logos          show all logo variants you can set in the config</span><br><span class="line">  -cl, --changelog            show changelog</span><br><span class="line">  -c, --config                show config and config location(s)</span><br><span class="line">  -gc, --generate-config      generate a new config</span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><p>以我们需要制作的DDP5.1及DDP7.1举例</p><ul><li><p>以THD5.1为输入源 制作DDP5.1@1024kbps &#x2F; 768kbps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deew.exe -i &#x27;4588 PID 1100 48000 6ch eng DELAY 0ms.thd&#x27;</span><br><span class="line">deew.exe -b 768 -i &#x27;4588 PID 1100 48000 6ch eng DELAY 0ms.thd&#x27;</span><br></pre></td></tr></table></figure></li><li><p>以DTS7.1为输入源 制作DDP7.1@1536kbps &#x2F; 1024kbps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deew.exe -i 00001.mpls_3eng.dts</span><br><span class="line">deew.exe -b 1024 -i 00001.mpls_3eng.dts</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://camo.githubusercontent.com/b93af93ef2097658248d07c9dd6ea979bff23aa910e6d70382fa88ba03ee0ccc/68747470733a2f2f74656c656772612e70682f66696c652f6566643261316433353139626466383766636130332e676966" alt="DEEW encoding"></p><p>完成后将在运行目录下找到与输入名称相同的<code>.ec3</code>文件，制作完成。</p><p>补充范例拓展，有需要的类推</p><ul><li><p>以REMUX为输入源 将第一条音轨按默认设置制作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deew.exe -i &#x27;REMUX.mkv&#x27;</span><br></pre></td></tr></table></figure></li><li><p>以 <code>D:\DDP\demux</code> 内所有 <code>.flac</code> 音频为输入源 批量生成动态范围为 <em>film_standard</em> 的DDP 并输出至 <code>D:\DDP\done</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deew.exe -i &#x27;D:\DDP\demux\*flac&#x27; -o &#x27;D:\DDP\done&#x27; -drc film_standard</span><br></pre></td></tr></table></figure><p>完成后将在 <em>D:\DDP\done</em>  下找到与输入名称相同的<code>.ec3</code>文件，制作完成。</p></li><li><p>以w64为输入源 制作DD2.0@448kbps</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deew.exe -i &#x27;abcdefghijk.w64&#x27; -f dd -b 448</span><br></pre></td></tr></table></figure><p>完成后将在 <em>deew-main</em> 下找到与输入名称相同的<code>.ac3</code>文件，制作完成。</p></li></ul><h2 id="特别感谢"><a href="#特别感谢" class="headerlink" title="特别感谢"></a>特别感谢</h2><p><a href="https://github.com/pcroland">pcroland</a>&#x2F;</p><p>所有对DEE无限制使用做出贡献的人</p><h2 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h2><p>教程遵守<a href="https://creativecommons.org/licenses/by/4.0/deed.zh">CC BY 4.0</a>，使用到的项目各自遵守其规范，转载请指明出处！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;摆脱搭建MacOS环境困难以及Dolby Encode Suite单线程制作缓慢的烦恼，在Windows&amp;#x2F;Linux下通过命令行直接制作。&lt;/p&gt;
&lt;p&gt;本文主要讲解Windows下的搭建，Linux下流程类似，自行摸索。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="4.Audio&amp;sub" scheme="http://fxxs.github.io/categories/4-Audio-sub/"/>
    
    
  </entry>
  
  <entry>
    <title>Rules</title>
    <link href="http://fxxs.github.io/5.Upload/Rules/"/>
    <id>http://fxxs.github.io/5.Upload/Rules/</id>
    <published>2022-09-26T10:15:11.737Z</published>
    <updated>2024-09-22T14:16:56.133Z</updated>
    
    <content type="html"><![CDATA[<p>该规则只对MNHD，mUHD生效，对于个人组xxx@tag，可以有自己的写法，但强烈建议统一标准风格。</p><p>目前还是笔记状态</p><h1 id="音轨"><a href="#音轨" class="headerlink" title="音轨"></a>音轨</h1><ul><li>1.0&#x2F;2.0统一使用FLAC(除非源为有损)，如原始音轨为24bit,码率较高，可以转换为16bit使用，不得使用有损编码。(主要有损编码经常给过高码率，AC3也只有16bit，DD2.0 640k很多都比无损码率还高)</li><li>1080p当音轨为多声道时，应使用DDP，除演唱会（或类似性质）以外，不得使用无损音轨（有需要的人让他去收原版原盘）</li><li>最好开始淘汰DD&#x2F;AC3</li></ul><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><ul><li>统一规则 统一大小写</li><li>标题以及副标题应该尽可能的包含所有变种称呼（以豆瓣为准），标题如超长可略去港台译名。</li><li>转载可使用来源文件名标准作为副标题，不用参考下列规则，尊重原始发布者的规则，但如有重大错误，需重命名发布</li><li>不可出现全角字符，不可出现ASCII以外的字符，除”.”以外的其他标点符号以及特殊符号不可出现<ul><li>对于”&amp;”,请写成and，然后标题里写带”&amp;”的名字作为搜索命中补充，如”Kapoor &amp; Sons 2006”应写为”Kapoor and Sons 2006”,标题里写”【卡普尔和儿子们&#x2F;Kapoor &amp; Sons&#x2F;卡普尔和他的孩子们】”(不过由于实际测试中豆瓣自动带出”【卡普尔家的儿子们&#x2F;Kapoor &amp; Sons - Since 1921&#x2F;卡普尔和他的孩子们&#x2F;卡普尔和儿子们】”,所以不用特别处理)</li><li>除”-“外，其他标点和空格一起替换写为”.”，如”Open Season 4: Scared Silly 2016”写为”Open.Season.4.Scared.Silly.2015”,”Yu-Gi-Oh!: The Dark Side of Dimensions 2016”写为”Yu-Gi-Oh.The.Dark.Side.of.Dimensions.2016”</li></ul></li><li>英文名应尽量与IMDb保持一致(除去包含符号)，对于欧洲其他非英文国家的电影，<strong>不可只使用源语言名称命名</strong>，可带上源语言名称 AKA 英文名，可以参考皮，如 <code>La nuit américaine AKA Day for Night 1973</code></li><li>对于有多个英文名的，只保留IMDb使用的即可，其他应出现在标题中</li><li>对于日韩电影，IMDb里使用罗马音或者韩文拼音(?)作为标题的，必须使用源语言名称 AKA 英文名 如<code>Ah-ga-ssi AKA The Handmaiden 2016</code>、<code>Tegami AKA The Letters 2006</code><ul><li>对于日韩电影，如IMDb使用了英文名，则只使用IMDb英文名即可，源语言名称以及罗马音等应该都全部出现在标题和副标题中，以源语言为主，日文不要繁转简（除非豆瓣有，这种情况下应该两种都写），如<code>冰果/冰菓/氷菓</code></li></ul></li><li>对于豆瓣没有的，可以参考TMDB</li><li>年代以IMDb为准</li><li>DDP&#x2F;DD+统一为DDP，音轨声道连写，中间不要有空格，DDP7.1（”+”作为运算符可能会有奇妙的化学反应，故DDP较好）</li><li>音轨名只有DD5.1可以省略，FLAC1.0&#x2F;2.0可以省略声道，Atmos 和 DTS-X可以省略声道</li></ul><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>【名称一&#x2F;名称二】后面可以随便写</p><p>（包含国粤音轨应该标注，不包含中字应该标注）</p><p>（”&#x2F;“的前后不应该包含空格）</p><h2 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h2><p>副标题应尽量与文件名除”.”外保持一致(但可以增加AKA)，标题不可带”.”</p><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>文件名必须将所有空格转换为”.”</p><h2 id="Movie"><a href="#Movie" class="headerlink" title="Movie"></a>Movie</h2><ul><li>x265压制必须为10bit，但由于以前有一些8bit压制，目前要求写上，以后Trump完所有8bit压制后可以省略，带HDR的现可以省略10bit。</li><li>HDR type理论可以写在Source后的任何地方，我们组通常写在x265后方</li><li>对于UHD压制，如为SDR，可以标上以作提示</li></ul><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><p>Name Year Source Resolution Rip-type Video-codec Audio-Tag (因为WEB的源码与压制难以区分，故压制统一标注为WEBRip,另WEBRip还会被录制使用)</p><p>Long Shot 2019 WEB-DL 2160p H.265&#x2F;HEVC&#x2F;H265 HDR DDP5.1-PHOENiX</p><p>0.5 mm 2014 WEBRip 1080p x265 10bit DDP5.1 MNHD-tag</p><h3 id="Blu-ray-Encode"><a href="#Blu-ray-Encode" class="headerlink" title="Blu-ray Encode"></a>Blu-ray Encode</h3><p>Name Year Source Resolution Video-encode Audio MNHD-Tag</p><p>Goodfellas 1990 BluRay 1080p x265 10bit DTS5.1-tag</p><h2 id="TV-Show-Season-x2F-Mini-Series"><a href="#TV-Show-Season-x2F-Mini-Series" class="headerlink" title="TV Show Season&#x2F;Mini-Series:"></a>TV Show Season&#x2F;Mini-Series:</h2><h3 id="Episode-File-Name"><a href="#Episode-File-Name" class="headerlink" title="Episode(File Name)"></a>Episode(File Name)</h3><ul><li>尽量避免数字连写，好看一些</li><li>也要避免集标题后直接接BluRay</li><li>尽量保证整个剧集，命名风格统一</li><li>对于迷你剧，尽管只有一季，也建议标S01，集数S01E01</li></ul><p>Name S##E## Episode-Name(包含) Resolution Source Video-encode Audio-Tag</p><p>Agatha.Christies.Poirot.S02E01.Peril.at.End.House.1080p.BluRay.x265.10bit.DD2.0.MNHD-tag</p><p>Name S##E## Source Resolution Video-encode Audio-Tag</p><p>Agatha.Christies.Poirot.S02E01.BluRay.1080p.x265.10bit.DD2.0.MNHD-tag</p><h3 id="Season"><a href="#Season" class="headerlink" title="Season"></a>Season</h3><p>Name S## Source Resolution Year Video-encode Audio-Tag(由于剧集很多会跨年，故建议省略年份)</p><p>The Romanoffs S01 2018 AMZN WEBRip 2160p x265 HDR DD+5.1-TrollUHD</p><h3 id="Pack"><a href="#Pack" class="headerlink" title="Pack"></a>Pack</h3><p>可以尽量简写，<code>Video-encode</code>、<code>Audio</code>都可以不写</p><h2 id="REPACK-x2F-PROPER-x2F-RERIP"><a href="#REPACK-x2F-PROPER-x2F-RERIP" class="headerlink" title="REPACK&#x2F;PROPER&#x2F;RERIP"></a>REPACK&#x2F;PROPER&#x2F;RERIP</h2><ul><li><p>不做字幕的Repack，建议提供修正后的可更改的文本类型字幕到公网即可</p></li><li><p>写在MNHD&#x2F;mUHD前面，未重新压制写REPACK，重压写RERIP，更换更好的源重压为PROPER</p></li><li><p>PROPER在注明源具体版本的情况下可以省略，但需在标题中注明</p></li><li><p>REPACK、REPACK2、REPACK3 etc</p></li><li><p>PROPER、PROPER2、PROPER3 etc</p></li><li><p>RERIP、RERIP2、RERIP3 etc</p></li></ul><p>版本是继承的</p><p>如 REPACK、PROPER2、RERip3</p><p>对于PROPER省略的，重置计数器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;该规则只对MNHD，mUHD生效，对于个人组xxx@tag，可以有自己的写法，但强烈建议统一标准风格。&lt;/p&gt;
&lt;p&gt;目前还是笔记状态&lt;/p&gt;
&lt;h1 id=&quot;音轨&quot;&gt;&lt;a href=&quot;#音轨&quot; class=&quot;headerlink&quot; title=&quot;音轨&quot;&gt;&lt;/a&gt;音轨&lt;/h</summary>
      
    
    
    
    
  </entry>
  
</feed>
